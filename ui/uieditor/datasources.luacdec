-- Decompiled with CoDLUIDecompiler by JariK

require("ui.T6.CoDBase")
require("ui.uieditor.modifyFunctions")
if not DataSourceHelpers then
	DataSourceHelpers = {}
end
if not DataSources then
	DataSources = {}
end
function ListHelper_CreateModelsFromTable(arg0, arg1)
	local registerVal2, registerVal3, registerVal4 = pairs(arg1)
	for index5,value6 in registerVal2, registerVal3, registerVal4 do
		local registerVal7 = type(value6)
		if registerVal7 == "table" then
			local registerVal8 = Engine.CreateModel(arg0, index5)
			ListHelper_CreateModelsFromTable(registerVal8, value6)
		else
			registerVal8 = Engine.CreateModel(arg0, index5)
			Engine.SetModelValue(registerVal8, value6)
		end
	end
end

function ListHelper_GetListHelperModel(arg0, arg1)
	if arg1 then
		local registerVal3 = Engine.GetModelForController(arg0.dataSourceController)
		return Engine.CreateModel(registerVal3, arg0.customDataSourceHelper)
	else
		registerVal3 = Engine.GetModelForController(arg0.dataSourceController)
		return Engine.GetModel(registerVal3, arg0.customDataSourceHelper)
	end
end

function ListHelper_Prepare(arg0, arg1, arg2, arg3, arg4, arg5)
	arg0[arg2] = {}
	arg0.customDataSourceHelper = arg2
	arg0.dataSourceController = arg1
	local registerVal6 = ListHelper_GetListHelperModel(arg0, true)
	local registerVal7 = arg3(arg1, arg0)
	local registerVal8, registerVal9, registerVal10 = ipairs(registerVal7)
	for index11,value12 in registerVal8, registerVal9, registerVal10 do
		local registerVal13 = Engine.GetModel(registerVal6, index11)
		if registerVal13 then
			Engine.UnsubscribeAndFreeModel(registerVal13)
		end
		local registerVal14 = Engine.CreateModel(registerVal6, index11)
		if value12.models then
			ListHelper_CreateModelsFromTable(registerVal14, value12.models)
		end
		if value12.properties and value12.properties.loopEdges ~= nil then
			arg0.loopEdges = value12.properties.loopEdges
		end
		registerVal14 = arg4(registerVal14)
		if arg1 or registerVal14 then
			local registerVal16 = {}
			registerVal16.model = registerVal14
			registerVal16.properties = value12.properties
			table.insert(arg0[arg2], registerVal16)
		end
	end
	if arg5 then
		arg5(arg1, arg0, registerVal6)
	end
end

function ListHelper_GetCount(arg0)
	if arg0.customDataSourceHelper and arg0[arg0.customDataSourceHelper] then
		return #arg0[arg0.customDataSourceHelper]
	end
	return 0.000000
end

function ListHelper_GetItem(arg0, arg1, arg2)
	if arg1.customDataSourceHelper and arg1[arg1.customDataSourceHelper] then
		return arg1[arg1.customDataSourceHelper][arg2].model
	end
	return nil
end

function ListHelper_GetCustomPropertiesForItem(arg0, arg1)
	if arg0.customDataSourceHelper and arg0[arg0.customDataSourceHelper] then
		return arg0[arg0.customDataSourceHelper][arg1].properties
	end
	return nil
end

function ListHelper_Cleanup(arg0)
	local registerVal1 = ListHelper_GetListHelperModel(arg0, false)
	if registerVal1 then
		Engine.UnsubscribeAndFreeModel(registerVal1)
	end
end

function ListHelper_SetupDataSource(arg0, arg1, arg2, arg3, arg4, arg5)
	{}.getCount = ListHelper_GetCount
	{}.getItem = ListHelper_GetItem
	{}.getCustomPropertiesForItem = ListHelper_GetCustomPropertiesForItem
	{}.getSpacerAfterRow = arg5
	if arg2 then
		{}.cleanup = ListHelper_Cleanup
	end
	local registerVal7, registerVal8, registerVal9 = pairs(arg3)
	for index10,value11 in registerVal7, registerVal8, registerVal9 do
		{}[index10] = value11
	end
	local function __FUNC_9603_(arg2, arg3, arg5)
		ListHelper_Prepare(arg3, arg2, arg0, arg1, arg5, arg4)
	end

	{}.prepare = __FUNC_9603_
	return {}
end

DataSourceHelpers.ListSetup = ListHelper_SetupDataSource
function ListHelper_SetupDataSource_CustomPrepare(arg0, arg1, arg2, arg3)
	{}.getCount = ListHelper_GetCount
	{}.getItem = ListHelper_GetItem
	{}.getCustomPropertiesForItem = ListHelper_GetCustomPropertiesForItem
	if arg2 then
		{}.cleanup = ListHelper_Cleanup
	end
	local registerVal5, registerVal6, registerVal7 = pairs(arg3)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		{}[index8] = value9
	end
	local function __FUNC_97F4_(arg2, arg3, arg4)
		arg3[arg0] = {}
		local registerVal6 = Engine.GetModelForController(arg2)
		local registerVal5 = Engine.CreateModel(registerVal6, arg0)
		arg1(arg2, registerVal5, arg3[arg0], arg4)
	end

	{}.prepare = __FUNC_97F4_
	return {}
end

function GetAccoladesXOfY(arg0, arg1, arg2)
	local registerVal6 = Engine.GetAssetList(CoD.mapsTable[arg1].accoladelist)
	if CoD.mapsTable[arg1].accoladelist and registerVal6 ~= nil then
		local registerVal7 = Engine.GetPlayerStats(arg0, CoD.STATS_LOCATION_NORMAL, Enum.eModes.MODE_CAMPAIGN)
		local registerVal9 = Engine.GetGlobalModel()
		local registerVal8 = CoD.SafeGetModelValue(registerVal9, "inBarracks")
		if not arg1 or registerVal8 == true then
			registerVal8 = Engine.StorageGetBuffer(arg0, Enum.StorageFileType.STORAGE_CP_STATS_ONLINE)
			if CoD.CombatRecordOtherPlayerStats then
				registerVal8 = Engine.GetOtherPlayerStatsBuffer()
			end
		end
		for index8=0.000000, 18.000000, 1.000000 do
			local registerVal17 = tostring(index8)
			local registerVal12 = CoD.GetCombatRecordStatForPath(registerVal8, ("PlayerStatsByMap." .. CoD.mapsTable[arg1].rootMapName .. ".accolades." .. registerVal17 .. ".state"))
			if registerVal12 ~= 0.000000 then
			end
		end
	end
	return (0.000000 + 1.000000), CoDLUIDecompiler.LuaRegister
end

function ClientHasCollectible(arg0, arg1, arg2, arg3)
	local registerVal5 = Engine.GetGlobalModel()
	local registerVal4 = CoD.SafeGetModelValue(registerVal5, "inBarracks")
	if not arg1 or registerVal4 == true then
		registerVal4 = Engine.StorageGetBuffer(arg0, Enum.StorageFileType.STORAGE_CP_STATS_ONLINE)
		if CoD.CombatRecordOtherPlayerStats then
			registerVal5 = Engine.GetOtherPlayerStatsBuffer()
		end
		local registerVal10 = tostring(arg2)
		registerVal5 = CoD.GetCombatRecordStatForPath(registerVal5, ("PlayerStatsByMap." .. arg1 .. ".collectibles." .. registerVal10))
		if registerVal5 ~= 1.000000 then
		end
		return true
	else
		return Engine.ClientHasCollectible(arg0, arg1, arg2, Enum.eModes.MODE_CAMPAIGN)
	end
end

function GetCollectiblesXOfY(arg0, arg1, arg2)
	local registerVal6 = Engine.GetAssetList(CoD.mapsTable[arg1].collectibles)
	if CoD.mapsTable[arg1].collectibles and registerVal6 ~= nil then
		for index7=0.000000, (#0.000000 - 1.000000), 1.000000 do
			local registerVal11 = ClientHasCollectible(arg0, arg1, index7, arg2)
			if registerVal11 then
			end
		end
	end
	return (0.000000 + 1.000000), CoDLUIDecompiler.LuaRegister
end

CoD.XPBar = {}
CoD.XPBar.RankIdCol = 0.000000
CoD.XPBar.RankTableColMinXP = 2.000000
CoD.XPBar.RankTableColMaxXP = 7.000000
CoD.XPBar.RankDisplayLevelCol = 14.000000
CoD.ButtonMappings = {}
DataSourceHelpers.CustomListSetup = ListHelper_SetupDataSource_CustomPrepare
function RefreshListFindSelectedXuid(arg0, arg1)
	if arg1 == nil then
		return 
	end
	local registerVal3 = arg1.activeWidget:getModel(arg0, "xuid")
	if arg1.activeWidget ~= nil and registerVal3 ~= nil then
		local registerVal4 = Engine.GetModelValue(registerVal3)
	end
	arg1:updateDataSource(true, true)
	if registerVal4 ~= nil then
		local registerVal6 = {}
		registerVal6.xuid = registerVal4
		registerVal4 = arg1:findVisibleItem(registerVal6, nil)
		if not registerVal4 then
			registerVal6 = {}
			registerVal6.xuid = registerVal4
			registerVal4 = arg1:findItem(registerVal6, nil, true)
		else
			if registerVal4 ~= arg1.activeWidget then
				arg1:setActiveItem(registerVal4)
			end
		end
	end
	if not registerVal4 then
		registerVal6 = {}
		registerVal6.name = "gain_focus"
		registerVal6.controller = arg0
		arg1:processEvent(registerVal6)
	end
end

function RefreshListFindSelectedGroupId(arg0, arg1)
	if not arg1 then
		return 
	end
	local registerVal3 = arg1.lastActiveWidget:getModel(arg0, "groupId")
	if arg1.lastActiveWidget ~= nil and registerVal3 ~= nil then
		local registerVal4 = Engine.GetModelValue(registerVal3)
	end
	arg1:updateDataSource(true, true)
	if registerVal4 ~= nil then
		local registerVal6 = {}
		registerVal6.groupId = registerVal4
		registerVal4 = arg1:findVisibleItem(registerVal6, nil)
		if not registerVal4 then
			registerVal6 = {}
			registerVal6.groupId = registerVal4
			registerVal4 = arg1:findItem(registerVal6, nil, true)
		else
			if registerVal4 ~= arg1.activeWidget then
				arg1:setActiveItem(registerVal4)
			end
		end
	end
end

local registerVal1 = {}
local function __FUNC_A56F_(arg0)
	return DataSources.GlobalSources.Model
end

registerVal1.getModel = __FUNC_A56F_
DataSources.GlobalSources = registerVal1
registerVal1 = {}
local function __FUNC_A5F3_()
	return DataSources.Controller.Model
end

registerVal1.getModel = __FUNC_A5F3_
DataSources.Controller = registerVal1
registerVal1 = {}
local function __FUNC_A674_()
	return DataSources.VehicleController.Model
end

registerVal1.getModel = __FUNC_A674_
DataSources.VehicleController = registerVal1
registerVal1 = {}
local function __FUNC_A6FF_(arg0)
	local registerVal1 = Engine.GetModelForController(arg0)
	local registerVal2 = Engine.CreateModel(registerVal1, "identityBadge")
	local registerVal3 = Engine.CreateModel(registerVal2, "xuid")
	Engine.SetModelValue(registerVal3, Engine.GetXUID64(arg0))
	local registerVal4 = Engine.CreateModel(registerVal2, "gamertag")
	Engine.SetModelValue(registerVal4, Engine.GetSelfGamertag(arg0))
	local registerVal5 = Engine.CreateModel(registerVal2, "clantag")
	Engine.SetModelValue(registerVal5, Engine.GetClanName(arg0))
	Engine.CreateModel(registerVal1, "forceUpdateVehicleBindings")
	return registerVal1
end

registerVal1.getModel = __FUNC_A6FF_
local function __FUNC_A968_(arg0, arg1)
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal2 = Engine.GetModel(registerVal3, "hintText")
	if not arg1 then
	end
	if registerVal2 then
		Engine.SetModelValue(registerVal2, "")
	end
end

registerVal1.setHintText = __FUNC_A968_
local function __FUNC_AA68_(arg0, arg1)
	DataSources.PerController.setHintText(arg0, "")
end

registerVal1.clearHintText = __FUNC_AA68_
local function __FUNC_AB07_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.GetModel(registerVal2, "hintText")
	registerVal2 = Engine.GetModelValue(registerVal1)
	if registerVal1 and registerVal2 ~= "" then
		return true
	end
	return false
end

registerVal1.hasHintText = __FUNC_AB07_
DataSources.PerController = registerVal1
registerVal1 = {}
local function __FUNC_AC0C_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	return Engine.CreateModel(registerVal2, "WorldSpaceIndicators")
end

registerVal1.getModel = __FUNC_AC0C_
DataSources.WorldSpaceIndicators = registerVal1
registerVal1 = {}
local function __FUNC_ACCE_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.GetModel(registerVal2, "messageDialog")
	return registerVal1
end

registerVal1.getModel = __FUNC_ACCE_
DataSources.MessageDialog = registerVal1
registerVal1 = {}
local function __FUNC_AD79_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "AccountLinkLogin")
	local registerVal3 = Engine.CreateModel(registerVal1, "email")
	Engine.SetModelValue(registerVal3, Engine.Localize("ACCOUNT_LINK_EMAIL"))
	registerVal3 = Engine.CreateModel(registerVal1, "password")
	Engine.SetModelValue(registerVal3, Engine.Localize("ACCOUNT_LINK_PASSWORD"))
	registerVal3 = Engine.CreateModel(registerVal1, "stars")
	Engine.SetModelValue(registerVal3, Engine.Localize("ACCOUNT_LINK_PASSWORD"))
	return registerVal1
end

registerVal1.getModel = __FUNC_AD79_
DataSources.AccountLinkLogin = registerVal1
registerVal1 = {}
local function __FUNC_AF97_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "AccountLinkRegister")
	Engine.CreateModel(registerVal1, "firstName")
	Engine.CreateModel(registerVal1, "lastName")
	Engine.CreateModel(registerVal1, "zipCode")
	Engine.CreateModel(registerVal1, "region")
	Engine.CreateModel(registerVal1, "username")
	Engine.CreateModel(registerVal1, "email")
	Engine.CreateModel(registerVal1, "password")
	Engine.CreateModel(registerVal1, "stars")
	Engine.CreateModel(registerVal1, "confirmPass")
	Engine.CreateModel(registerVal1, "confirmStars")
	Engine.CreateModel(registerVal1, "gender")
	Engine.CreateModel(registerVal1, "month")
	Engine.CreateModel(registerVal1, "monthIndex")
	Engine.CreateModel(registerVal1, "day")
	Engine.CreateModel(registerVal1, "year")
	return registerVal1
end

registerVal1.getModel = __FUNC_AF97_
DataSources.AccountLinkRegister = registerVal1
registerVal1 = {}
local function __FUNC_B2FA_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "TermsOfService")
	registerVal2 = Engine.GetTermsOfService(arg0)
	local registerVal4 = Engine.CreateModel(registerVal1, "message")
	Engine.SetModelValue(registerVal4, registerVal2)
	return registerVal1
end

registerVal1.getModel = __FUNC_B2FA_
DataSources.TermsOfService = registerVal1
registerVal1 = {}
local function __FUNC_B443_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "GenderModel")
	registerVal4 = Engine.CreateModel(registerVal3, "Male")
	local registerVal6 = Engine.CreateModel(registerVal4, "gender")
	Engine.SetModelValue(registerVal6, Engine.Localize("EM_MALE"))
	local registerVal5 = Engine.CreateModel(registerVal3, "Female")
	local registerVal7 = Engine.CreateModel(registerVal5, "gender")
	Engine.SetModelValue(registerVal7, Engine.Localize("EM_FEMALE"))
	registerVal6 = {}
	registerVal6 = {registerVal4, registerVal5}
	arg1.genders = registerVal6
end

registerVal1.prepare = __FUNC_B443_
local function __FUNC_B652_(arg0)
	return #arg0.genders
end

registerVal1.getCount = __FUNC_B652_
local function __FUNC_B6A1_(arg0, arg1, arg2)
	return arg1.genders[arg2]
end

registerVal1.getItem = __FUNC_B6A1_
DataSources.Gender = registerVal1
registerVal1 = {}
local function __FUNC_B6F9_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "monthModel")
	registerVal4 = Engine.CreateModel(registerVal3, "january")
	local registerVal6 = Engine.CreateModel(registerVal4, "month")
	Engine.SetModelValue(registerVal6, Engine.Localize("MENU_MONTHS_JAN"))
	registerVal6 = Engine.CreateModel(registerVal4, "monthIndex")
	Engine.SetModelValue(registerVal6, 1.000000)
	local registerVal5 = Engine.CreateModel(registerVal3, "february")
	local registerVal7 = Engine.CreateModel(registerVal5, "month")
	Engine.SetModelValue(registerVal7, Engine.Localize("MENU_MONTHS_FEB"))
	registerVal7 = Engine.CreateModel(registerVal5, "monthIndex")
	Engine.SetModelValue(registerVal7, 2.000000)
	registerVal6 = Engine.CreateModel(registerVal3, "march")
	local registerVal8 = Engine.CreateModel(registerVal6, "month")
	Engine.SetModelValue(registerVal8, Engine.Localize("MENU_MONTHS_MAR"))
	registerVal8 = Engine.CreateModel(registerVal6, "monthIndex")
	Engine.SetModelValue(registerVal8, 3.000000)
	registerVal7 = Engine.CreateModel(registerVal3, "april")
	local registerVal9 = Engine.CreateModel(registerVal7, "month")
	Engine.SetModelValue(registerVal9, Engine.Localize("MENU_MONTHS_APR"))
	registerVal9 = Engine.CreateModel(registerVal7, "monthIndex")
	Engine.SetModelValue(registerVal9, 4.000000)
	registerVal8 = Engine.CreateModel(registerVal3, "may")
	local registerVal10 = Engine.CreateModel(registerVal8, "month")
	Engine.SetModelValue(registerVal10, Engine.Localize("MENU_MONTHS_MAY"))
	registerVal10 = Engine.CreateModel(registerVal8, "monthIndex")
	Engine.SetModelValue(registerVal10, 5.000000)
	registerVal9 = Engine.CreateModel(registerVal3, "june")
	local registerVal11 = Engine.CreateModel(registerVal9, "month")
	Engine.SetModelValue(registerVal11, Engine.Localize("MENU_MONTHS_JUN"))
	registerVal11 = Engine.CreateModel(registerVal9, "monthIndex")
	Engine.SetModelValue(registerVal11, 6.000000)
	registerVal10 = Engine.CreateModel(registerVal3, "july")
	local registerVal12 = Engine.CreateModel(registerVal10, "month")
	Engine.SetModelValue(registerVal12, Engine.Localize("MENU_MONTHS_JUL"))
	registerVal12 = Engine.CreateModel(registerVal10, "monthIndex")
	Engine.SetModelValue(registerVal12, 7.000000)
	registerVal11 = Engine.CreateModel(registerVal3, "august")
	local registerVal13 = Engine.CreateModel(registerVal11, "month")
	Engine.SetModelValue(registerVal13, Engine.Localize("MENU_MONTHS_AUG"))
	registerVal13 = Engine.CreateModel(registerVal11, "monthIndex")
	Engine.SetModelValue(registerVal13, 8.000000)
	registerVal12 = Engine.CreateModel(registerVal3, "september")
	local registerVal14 = Engine.CreateModel(registerVal12, "month")
	Engine.SetModelValue(registerVal14, Engine.Localize("MENU_MONTHS_SEP"))
	registerVal14 = Engine.CreateModel(registerVal12, "monthIndex")
	Engine.SetModelValue(registerVal14, 9.000000)
	registerVal13 = Engine.CreateModel(registerVal3, "october")
	local registerVal15 = Engine.CreateModel(registerVal13, "month")
	Engine.SetModelValue(registerVal15, Engine.Localize("MENU_MONTHS_OCT"))
	registerVal15 = Engine.CreateModel(registerVal13, "monthIndex")
	Engine.SetModelValue(registerVal15, 10.000000)
	registerVal14 = Engine.CreateModel(registerVal3, "november")
	local registerVal16 = Engine.CreateModel(registerVal14, "month")
	Engine.SetModelValue(registerVal16, Engine.Localize("MENU_MONTHS_NOV"))
	registerVal16 = Engine.CreateModel(registerVal14, "monthIndex")
	Engine.SetModelValue(registerVal16, 11.000000)
	registerVal15 = Engine.CreateModel(registerVal3, "december")
	local registerVal17 = Engine.CreateModel(registerVal15, "month")
	Engine.SetModelValue(registerVal17, Engine.Localize("MENU_MONTHS_DEC"))
	registerVal17 = Engine.CreateModel(registerVal15, "monthIndex")
	Engine.SetModelValue(registerVal17, 12.000000)
	registerVal16 = {}
	registerVal16 = {registerVal4, registerVal5, registerVal6, registerVal7, registerVal8, registerVal9, registerVal10, registerVal11, registerVal12, registerVal13, registerVal14, registerVal15}
	arg1.months = registerVal16
end

registerVal1.prepare = __FUNC_B6F9_
local function __FUNC_C183_(arg0)
	return #arg0.months
end

registerVal1.getCount = __FUNC_C183_
local function __FUNC_C1D0_(arg0, arg1, arg2)
	return arg1.months[arg2]
end

registerVal1.getItem = __FUNC_C1D0_
DataSources.Month = registerVal1
registerVal1 = {}
local function __FUNC_C228_(arg0, arg1, arg2)
	arg1.days = {}
	local registerVal5 = Engine.GetGlobalModel()
	local registerVal4 = Engine.CreateModel(registerVal5, "dayModel")
	for index5=1.000000, 31.000000, 1.000000 do
		local registerVal9 = Engine.CreateModel(registerVal4, ("Day " .. index5))
		local registerVal10 = Engine.CreateModel(registerVal9, "day")
		Engine.SetModelValue(registerVal10, index5)
		arg1.days[(#arg1.days + 1.000000)] = registerVal9
	end
end

registerVal1.prepare = __FUNC_C228_
local function __FUNC_C3B9_(arg0)
	return #arg0.days
end

registerVal1.getCount = __FUNC_C3B9_
local function __FUNC_C406_(arg0, arg1, arg2)
	return arg1.days[arg2]
end

registerVal1.getItem = __FUNC_C406_
DataSources.Day = registerVal1
registerVal1 = {}
local function __FUNC_C45A_(arg0, arg1, arg2)
	arg1.years = {}
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "yearModel")
	for index4=2015.000000, 1900.000000, -1.000000 do
		local registerVal8 = Engine.CreateModel(registerVal3, ("Year " .. index4))
		local registerVal9 = Engine.CreateModel(registerVal8, "year")
		Engine.SetModelValue(registerVal9, index4)
		arg1.years[(#arg1.years + 1.000000)] = registerVal8
	end
end

registerVal1.prepare = __FUNC_C45A_
local function __FUNC_C5F3_(arg0)
	return #arg0.years
end

registerVal1.getCount = __FUNC_C5F3_
local function __FUNC_C63F_(arg0, arg1, arg2)
	return arg1.years[arg2]
end

registerVal1.getItem = __FUNC_C63F_
DataSources.Year = registerVal1
registerVal1 = {}
local function __FUNC_C693_(arg0, arg1, arg2)
	arg1.tabs = {}
	if CoD.isCampaign == true then
		local registerVal4 = {}
		local registerVal5 = {}
		local registerVal6 = Engine.Localize("MENU_TAB_MISSIONS")
		registerVal5.displayName = registerVal6
		registerVal5.viewWidget = "CoD.MissionTab"
		registerVal5.tabIcon = ""
		registerVal6 = {}
		local registerVal7 = Engine.Localize("MENU_TAB_OPTIONS")
		registerVal6.displayName = registerVal7
		registerVal6.viewWidget = "CoD.OptionsTab"
		registerVal6.tabIcon = ""
		registerVal4 = {registerVal5, registerVal6}
	else
		registerVal4 = {}
		registerVal5 = {}
		registerVal6 = Engine.Localize("MENU_TAB_MISSIONS")
		registerVal5.displayName = registerVal6
		registerVal5.viewWidget = "CoD.MissionTab"
		registerVal5.tabIcon = ""
		registerVal6 = {}
		registerVal7 = Engine.Localize("MENU_TAB_OPTIONS")
		registerVal6.displayName = registerVal7
		registerVal6.viewWidget = "CoD.OptionsTab"
		registerVal6.tabIcon = ""
		registerVal4 = {registerVal5, registerVal6}
	end
	if #registerVal4 == 0.000000 then
		return 
	end
	registerVal7 = {}
	registerVal7.displayName = ""
	registerVal7.viewWidget = ""
	registerVal7.tabIcon = CoD.buttonStrings.shoulderl
	table.insert(registerVal4, 1.000000, registerVal7)
	registerVal6 = {}
	registerVal6.displayName = ""
	registerVal6.viewWidget = ""
	registerVal6.tabIcon = CoD.buttonStrings.shoulderr
	table.insert(registerVal4, registerVal6)
	registerVal5 = Engine.GetGlobalModel()
	registerVal4 = Engine.CreateModel(registerVal5, "TabViewModel")
	registerVal5, registerVal6, registerVal7 = ipairs(registerVal4)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal10 = Engine.CreateModel(registerVal4, ("tabModel_" .. index8))
		local registerVal12 = Engine.CreateModel(registerVal10, "tabName")
		Engine.SetModelValue(registerVal12, value9.displayName)
		registerVal12 = Engine.CreateModel(registerVal10, "tabWidget")
		Engine.SetModelValue(registerVal12, value9.viewWidget)
		registerVal12 = Engine.CreateModel(registerVal10, "tabIcon")
		Engine.SetModelValue(registerVal12, value9.tabIcon)
		arg1.tabs[(#arg1.tabs + 1.000000)] = registerVal10
	end
end

registerVal1.prepare = __FUNC_C693_
local function __FUNC_CB7B_(arg0)
	return #arg0.tabs
end

registerVal1.getCount = __FUNC_CB7B_
local function __FUNC_CBC6_(arg0, arg1, arg2)
	return arg1.tabs[arg2]
end

registerVal1.getItem = __FUNC_CBC6_
DataSources.TabbedView = registerVal1
local function __FUNC_CC1A_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	local registerVal2 = Engine.IsDemoPlaying()
	if registerVal2 then
		local registerVal3 = Engine.IsZombiesGame()
		if registerVal3 then
		end
		registerVal5 = {}
		local registerVal6 = {}
		local registerVal7 = Engine.Localize("MENU_THEATER_CAPS")
		registerVal6.tabName = registerVal7
		registerVal6.tabWidget = "CoD.StartMenu_GameOptions_ZM"
		registerVal6.tabIcon = ""
		registerVal5.models = registerVal6
		registerVal6 = {}
		registerVal6.tabId = "gameOptions"
		registerVal5.properties = registerVal6
		table.insert({}, registerVal5)
	else
		registerVal2 = Engine.IsInGame()
		if registerVal2 then
			registerVal2 = IsGameTypeDOA()
			registerVal2 = InSafehouse()
			if registerVal2 and not registerVal2 then
				registerVal4 = {}
				registerVal5 = {}
				registerVal5.tabName = "DOA"
				registerVal5.tabWidget = "CoD.StartMenu_GameOptions_DOA"
				registerVal5.tabIcon = ""
				registerVal4.models = registerVal5
				registerVal5 = {}
				registerVal5.tabId = "gameOptions"
				registerVal4.properties = registerVal5
				table.insert({}, registerVal4)
			else
				if CoD.isCampaign then
					registerVal4 = {}
					registerVal5 = {}
					registerVal6 = SessionModeToUnlocalizedSessionModeCaps(Engine.CurrentSessionMode())
					registerVal5.tabName = registerVal6
					registerVal5.tabWidget = "CoD.StartMenu_GameOptions_CP"
					registerVal5.tabIcon = ""
					registerVal4.models = registerVal5
					registerVal5 = {}
					registerVal5.tabId = "gameOptions"
					registerVal4.properties = registerVal5
					table.insert({}, registerVal4)
					registerVal2 = Engine.IsCampaignModeZombies()
					if not registerVal2 then
						registerVal2 = CoD.isOnlineGame()
						registerVal2 = IsInTrainingSim(arg0)
						registerVal2 = Dvar.ui_safehousebarracks:get()
						registerVal2 = IsPlayerAGuest(arg0)
						if CoD.isSafehouse and registerVal2 and not registerVal2 and registerVal2 and not registerVal2 then
							registerVal4 = {}
							registerVal5 = {}
							registerVal5.tabName = "CPUI_BARRACKS_CAPS"
							registerVal5.tabWidget = "CoD.CombatRecordCP_Contents"
							registerVal5.tabIcon = ""
							registerVal4.models = registerVal5
							registerVal5 = {}
							registerVal5.tabId = "combatRecord"
							registerVal4.properties = registerVal5
							table.insert({}, registerVal4)
						end
						registerVal2 = HighestMapReachedGreaterThan(arg0, 1.000000)
						if not {} or LUI.DEV ~= nil then
							registerVal4 = {}
							registerVal5 = {}
							registerVal5.tabName = "CPUI_TACTICAL_MODE_CAPS"
							registerVal5.tabWidget = "CoD.StartMenu_TacticalMode"
							registerVal5.tabIcon = ""
							registerVal4.models = registerVal5
							registerVal5 = {}
							registerVal5.tabId = "tacticalMode"
							registerVal4.properties = registerVal5
							table.insert({}, registerVal4)
						end
						registerVal2 = IsPlayerAGuest(arg0)
						if not CoD.isSafehouse and not registerVal2 then
							registerVal4 = {}
							registerVal5 = {}
							registerVal5.tabName = "CPUI_ACCOLADES"
							registerVal5.tabWidget = "CoD.MissionRecordVault_Challenges"
							registerVal5.tabIcon = ""
							registerVal4.models = registerVal5
							registerVal5 = {}
							registerVal5.tabId = "accolades"
							registerVal4.properties = registerVal5
							table.insert({}, registerVal4)
						else
							registerVal2 = Engine.IsZombiesGame()
							if registerVal2 then
								registerVal4 = {}
								registerVal5 = {}
								registerVal6 = SessionModeToUnlocalizedSessionModeCaps(Engine.CurrentSessionMode())
								registerVal5.tabName = registerVal6
								registerVal5.tabWidget = "CoD.StartMenu_GameOptions_ZM"
								registerVal5.tabIcon = ""
								registerVal4.models = registerVal5
								registerVal5 = {}
								registerVal5.tabId = "gameOptions"
								registerVal4.properties = registerVal5
								table.insert({}, registerVal4)
							else
								registerVal4 = {}
								registerVal5 = {}
								registerVal6 = SessionModeToUnlocalizedSessionModeCaps(Engine.CurrentSessionMode())
								registerVal5.tabName = registerVal6
								registerVal5.tabWidget = "CoD.StartMenu_GameOptions"
								registerVal5.tabIcon = ""
								registerVal4.models = registerVal5
								registerVal5 = {}
								registerVal5.tabId = "gameOptions"
								registerVal4.properties = registerVal5
								table.insert({}, registerVal4)
							else
								registerVal2 = IsPlayerAGuest(arg0)
								if not registerVal2 then
									registerVal4 = {}
									registerVal5 = {}
									registerVal5.tabName = "MENU_TAB_IDENTITY_CAPS"
									registerVal5.tabWidget = "CoD.StartMenu_Identity"
									registerVal5.tabIcon = ""
									registerVal4.models = registerVal5
									registerVal5 = {}
									registerVal5.tabId = "identity"
									registerVal6 = Dvar.ui_execdemo_gamescom:get()
									registerVal5.disabled = registerVal6
									registerVal4.properties = registerVal5
									table.insert({}, registerVal4)
								end
								registerVal2 = IsLobbyNetworkModeLAN()
								registerVal2 = Dvar.ui_execdemo:get()
								registerVal2 = Engine.IsCampaignModeZombies()
								registerVal2 = IsPlayerAGuest(arg0)
								if not registerVal2 and not registerVal2 and not registerVal2 and not registerVal2 then
									registerVal4 = {}
									registerVal5 = {}
									registerVal5.tabName = "MENU_TAB_CHALLENGES_CAPS"
									registerVal5.tabWidget = "CoD.StartMenu_Challenges"
									registerVal5.tabIcon = ""
									registerVal4.models = registerVal5
									registerVal5 = {}
									registerVal5.tabId = "challenges"
									registerVal4.properties = registerVal5
									table.insert({}, registerVal4)
									if CoD.isPC then
										registerVal2 = Mods_IsUsingMods()
									end
									registerVal5 = {}
									registerVal6 = {}
									registerVal6.tabName = "MENU_TAB_BARRACKS_CAPS"
									registerVal6.tabWidget = "CoD.StartMenu_Barracks"
									registerVal6.tabIcon = ""
									registerVal6.disabled = registerVal2
									registerVal5.models = registerVal6
									registerVal6 = {}
									registerVal6.tabId = "barracks"
									registerVal5.properties = registerVal6
									table.insert({}, registerVal5)
									registerVal3 = CommunityOptionsEnabled()
									if registerVal3 then
										CoD.perController[arg0].openMediaTabAfterClosingGroups = false
										registerVal6 = {}
										registerVal7 = {}
										registerVal7.tabName = "MENU_TAB_MEDIA_CAPS"
										registerVal7.tabWidget = "CoD.StartMenu_Media"
										registerVal7.tabIcon = ""
										registerVal6.models = registerVal7
										registerVal7 = {}
										registerVal7.tabId = "media"
										registerVal7.selectIndex = CoD.perController[arg0].openMediaTabAfterClosingGroups
										registerVal6.properties = registerVal7
										table.insert({}, registerVal6)
									end
								end
							end
						end
					end
				end
			end
		end
	end
	registerVal2 = IsGameTypeDOA()
	registerVal2 = Engine.IsInGame()
	registerVal2 = InSafehouse()
	if registerVal2 and registerVal2 and not registerVal2 then
		registerVal4 = {}
		registerVal5 = {}
		registerVal5.tabName = "MENU_TAB_OPTIONS_CAPS"
		registerVal5.tabWidget = "CoD.StartMenu_Options_DOA"
		registerVal5.tabIcon = ""
		registerVal4.models = registerVal5
		registerVal5 = {}
		registerVal5.tabId = "options"
		registerVal6 = Dvar.ui_execdemo:get()
		if registerVal6 then
			registerVal6 = Engine.IsInGame()
		end
		registerVal5.selectIndex = (not registerVal6)
		registerVal4.properties = registerVal5
		table.insert({}, registerVal4)
	else
		registerVal4 = {}
		registerVal5 = {}
		registerVal5.tabName = "MENU_TAB_OPTIONS_CAPS"
		registerVal5.tabWidget = "CoD.StartMenu_Options"
		registerVal5.tabIcon = ""
		registerVal4.models = registerVal5
		registerVal5 = {}
		registerVal5.tabId = "options"
		registerVal6 = Dvar.ui_execdemo_gamescom:get()
		if registerVal6 then
			registerVal6 = Engine.IsInGame()
		end
		registerVal5.selectIndex = (not registerVal6)
		registerVal4.properties = registerVal5
		table.insert({}, registerVal4)
	end
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderr
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("StartMenuTabs", __FUNC_CC1A_, true)
DataSources.StartMenuTabs = registerVal1
local function __FUNC_DB94_(arg0)
	local registerVal2 = Dvar.ui_gametype:get()
	local registerVal3 = Engine.StructTableLookupString(CoDShared.gametypesStructTable, "name", registerVal2, "name_ref_caps")
	local registerVal6 = {}
	local registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderl
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = registerVal3
	registerVal7.tabWidget = "CoD.GameSettings_GameModeRules"
	registerVal7.tabIcon = ""
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "game_mode_rules"
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_GLOBAL_SETTINGS"
	registerVal7.tabWidget = "CoD.GameSettings_GlobalSettings"
	registerVal7.tabIcon = ""
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "global_settings"
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderr
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("GameSettingsTabs", __FUNC_DB94_, true)
DataSources.GameSettingsTabs = registerVal1
local function __FUNC_DF76_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabName = "MENU_SETTINGS_CAPS"
	registerVal5.tabWidget = "CoD.GameSettings_CompetitiveSettings"
	registerVal5.tabIcon = ""
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "game_mode_rules"
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabName = "MENU_ADVANCED_CAPS"
	registerVal5.tabWidget = "CoD.GameSettings_CompetitiveAdvancedSettings"
	registerVal5.tabIcon = ""
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "global_settings"
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderr
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("GameSettingsCompetitiveTabs", __FUNC_DF76_, true)
DataSources.GameSettingsCompetitiveTabs = registerVal1
local function __FUNC_E284_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	local registerVal2 = {}
	registerVal2 = {"sidebet", "mp_action"}
	local function __FUNC_F128_(arg0, arg1)
		local function __FUNC_F168_(arg2)
			local registerVal1, registerVal2, registerVal3 = ipairs(registerVal2)
			for index4,value5 in registerVal1, registerVal2, registerVal3 do
				if arg2.challengeCategory == value5 then
					return false
				end
			end
			if arg2.challengeRow ~= nil and not arg2 or arg2.isMastery == arg0 then
			end
			return true
		end

		return __FUNC_F168_
	end

	local function __FUNC_F287_(arg1, arg2)
		local registerVal3, registerVal4, registerVal5 = ipairs(arg1)
		local registerVal8 = arg2()
		if arg1 or registerVal8 then
			registerVal8 = Engine.IsEmblemBackgroundNew(arg0, .imageID)
			if registerVal8 then
			end
		end
		return (0.000000 + 1.000000)
	end

	local function __FUNC_F376_()
		local registerVal1 = Engine.GetBackgroundsForCategoryName(arg0, "default")
		local registerVal2, registerVal3, registerVal4 = ipairs(registerVal1)
		for index5,value6 in registerVal2, registerVal3, registerVal4 do
			local registerVal7 = Engine.IsEmblemBackgroundNew(arg0, value6.id)
			if registerVal7 then
			end
		end
		return (0.000000 + 1.000000)
	end

	local function __FUNC_F499_(arg0, arg1, arg2, arg3, arg4)
		local registerVal7 = {}
		local registerVal8 = {}
		registerVal8.tabName = arg0
		registerVal8.tabWidget = arg1
		registerVal8.tabCategory = arg2
		registerVal8.breadcrumbCount = arg4
		registerVal8.tabIcon = ""
		registerVal7.models = registerVal8
		registerVal8 = {}
		registerVal8.tabId = arg3
		registerVal7.properties = registerVal8
		table.insert({}, registerVal7)
	end

	local registerVal7 = Engine.GetChallengeInfoForImages(arg0, nil, Enum.eModes.MODE_CAMPAIGN)
	__FUNC_F499_("MENU_DEFAULT_CAPS", "CoD.CallingCards_Stickerbook_Default", "default", "callingcards_default", __FUNC_F376_())
	local registerVal8 = Engine.CheckNetConnection()
	if {} or registerVal8 then
		__FUNC_F499_("MENU_CAMPAIGN_CAPS", "CoD.CallingCards_Stickerbook", "cp", "callingcards_cp", __FUNC_F287_(registerVal7, __FUNC_F128_(true, true)))
	end
	registerVal8 = IsLobbyNetworkModeLAN()
	if not registerVal8 then
		registerVal8 = Engine.GetChallengeInfoForImages(arg0, nil, Enum.eModes.MODE_MULTIPLAYER)
		CoD.PrestigeUtility.AddPrestigeChallenges(arg0, Enum.eModes.MODE_MULTIPLAYER, registerVal8)
		local registerVal9 = ArenaChallengesEnabled()
		if registerVal9 then
			CoD.ArenaUtility.AddArenaChallenges(arg0, registerVal8)
		end
		registerVal9 = Engine.GetChallengeInfoForImages(arg0, nil, Enum.eModes.MODE_ZOMBIES)
		CoD.PrestigeUtility.AddPrestigeChallenges(arg0, Enum.eModes.MODE_ZOMBIES, registerVal9)
		__FUNC_F499_("MENU_MULTIPLAYER_CAPS", "CoD.CallingCards_Stickerbook", "mp", "callingcards_mp", __FUNC_F287_(registerVal8, __FUNC_F128_(true, true)))
		__FUNC_F499_("MENU_ZOMBIES_CAPS", "CoD.CallingCards_Stickerbook", "zm", "callingcards_zm", __FUNC_F287_(registerVal9, __FUNC_F128_(true, true)))
		local registerVal10 = __FUNC_F287_(registerVal7, __FUNC_F128_(false, true))
		local registerVal11 = __FUNC_F287_(registerVal8, __FUNC_F128_(false, true))
		registerVal11 = __FUNC_F287_(registerVal9, __FUNC_F128_(false, true))
		registerVal11 = ArenaChallengesEnabled()
		registerVal11 = CoD.ArenaUtility.GetArenaVetMasterCard(arg0)
		if registerVal11 and not registerVal11.models.isLocked then
		end
		__FUNC_F499_("MENU_MASTERS_CAPS", "CoD.CallingCards_Stickerbook_Master", "master", "callingcards_master", (((registerVal10 + registerVal11) + registerVal11) + 1.000000))
	end
	registerVal8 = IsLive()
	if registerVal8 then
		registerVal8 = CoD.BlackMarketUtility.GetCallingCardRows()
		registerVal10, registerVal11, registerVal12 = ipairs(registerVal8)
		for index13,value14 in registerVal10, registerVal11, registerVal12 do
			local registerVal15 = Engine.TableLookupGetColumnValueForRow(CoD.BlackMarketUtility.lootTableName, value14, 0.000000)
			local registerVal16 = Engine.TableLookupGetColumnValueForRow(CoD.BlackMarketUtility.lootTableName, value14, 4.000000)
			local registerVal17 = Engine.TableLookupGetColumnValueForRow(CoD.BlackMarketUtility.lootTableName, value14, 5.000000)
			if registerVal16 ~= "" or registerVal17 == "" then
			end
			local registerVal19 = CoD.BlackMarketUtility.IsItemLocked(arg0, registerVal15)
			if not registerVal19 then
				registerVal19 = BlackMarketHideMasterCallingCards()
				if {} or not registerVal19 then
					registerVal19 = CoD.BlackMarketUtility.GetLootCallingCardIndex(arg0, registerVal15)
					local registerVal20 = Engine.IsEmblemBackgroundNew(arg0, registerVal19)
					if registerVal19 and registerVal20 then
					end
				end
			end
		end
		registerVal10 = Dvar.ui_disable_side_bet:exists()
		if registerVal10 then
			registerVal10 = Dvar.ui_disable_side_bet:get()
		else
			registerVal10 = CoD.ChallengesUtility.GetSideBetCallingCards(arg0, nil)
			registerVal11, registerVal12, registerVal13 = ipairs(registerVal10)
			for index14,value15 in registerVal11, registerVal12, registerVal13 do
				registerVal16 = Engine.IsEmblemBackgroundNew(arg0, value15.models.iconId)
				if not value15.models.isLocked and registerVal16 then
				end
			end
		end
		registerVal10, registerVal11, registerVal12 = ipairs(CoD.ChallengesUtility.SpecialContractCategories)
		for index13,value14 in registerVal10, registerVal11, registerVal12 do
			registerVal15 = CoD.ChallengesUtility.GetChallengeTable(arg0, Enum.eModes.MODE_MULTIPLAYER, "mp", value14, nil, false)
			registerVal16, registerVal17, registerVal18 = ipairs(registerVal15)
			for index19,value20 in registerVal16, registerVal17, registerVal18 do
				local registerVal21 = Engine.IsEmblemBackgroundNew(arg0, value20.models.iconId)
				if not value20.models.isLocked and registerVal21 then
				end
			end
		end
		__FUNC_F499_("MENU_BLACK_MARKET", "CoD.CallingCards_Set_BlackMarket", "loot", "callingcards_bm", (((0.000000 + 1.000000) + 1.000000) + 1.000000))
	end
	registerVal10 = {}
	registerVal11 = {}
	registerVal11.tabIcon = CoD.buttonStrings.shoulderr
	registerVal10.models = registerVal11
	registerVal11 = {}
	registerVal11.m_mouseDisabled = true
	registerVal10.properties = registerVal11
	table.insert({}, registerVal10)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("CallingCardsTabs", __FUNC_E284_, true)
DataSources.CallingCardsTabs = registerVal1
local function __FUNC_F5C7_(arg0)
	local registerVal3 = Engine.GetGlobalModel()
	local registerVal2 = Engine.GetModel(registerVal3, "challengeCategory")
	if registerVal2 ~= nil then
		local registerVal4 = Engine.GetModelValue(registerVal2)
	end
	local registerVal6 = {}
	local registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderl
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_MISSIONS_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "missions"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "missions"
	local registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "missions")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_TOOLSOFTHETRADE_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "tott"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "tott"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "tott")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_CAREER_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "career"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "career"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "career")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderr
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	for index4=1.000000, #{}, 1.000000 do
		if {}[index4].properties ~= nil then
			if {}[index4].models.tabCategory == registerVal4 then
				{}[index4].properties.selectIndex = true
			else
				{}[index4].properties.selectIndex = false
			end
		end
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("CPChallengesTabs", __FUNC_F5C7_)
DataSources.CPChallengesTabs = registerVal1
local function __FUNC_FB50_(arg0)
	local registerVal3 = Engine.GetGlobalModel()
	local registerVal2 = Engine.GetModel(registerVal3, "challengeCategory")
	if registerVal2 ~= nil then
		local registerVal4 = Engine.GetModelValue(registerVal2)
	end
	local registerVal6 = {}
	local registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderl
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_ZOMBIEHUNTER_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "zombiehunter"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "zombiehunter"
	local registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "zombiehunter")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_SURVIVALIST_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "survivalist"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "survivalist"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "survivalist")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_GUMGOBBLER_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "gumgobbler"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "gumgobbler"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "gumgobbler")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_DARKOPS_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_ZM_Stickerbook_DarkOps"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "darkops"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "darkops"
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderr
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	for index4=1.000000, #{}, 1.000000 do
		if {}[index4].properties ~= nil then
			if {}[index4].models.tabCategory == registerVal4 then
				{}[index4].properties.selectIndex = true
			else
				{}[index4].properties.selectIndex = false
			end
		end
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("ZMChallengesTabs", __FUNC_FB50_)
DataSources.ZMChallengesTabs = registerVal1
local function __FUNC_101B3_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabName = "MPUI_SUMMARY_CAPS"
	registerVal5.tabWidget = "CoD.Challenges_MP_Summary"
	registerVal5.tabIcon = ""
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "challenges_mp_summary"
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabName = "MENU_OPERATIONS_CAPS"
	registerVal5.tabWidget = "CoD.Challenges_FrameWidget_Operations"
	registerVal5.tabIcon = ""
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "challenges_frameWidget_operations"
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabName = "HEROES_SPECIALISTS_CAPS"
	registerVal5.tabWidget = "CoD.Challenges_FrameWidget_Specialists"
	registerVal5.tabIcon = ""
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "challenges_framewidget_specialists"
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabName = "MENU_SCORESTREAKS_CAPS"
	registerVal5.tabWidget = "CoD.Challenges_FrameWidget_Scorestreaks"
	registerVal5.tabIcon = ""
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "challenges_framewidget_scorestreaks"
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabName = "MENU_EMBLEM_BACKGROUND_PRESTIGETAB"
	registerVal5.tabWidget = "CoD.Challenges_FrameWidget_Prestige"
	registerVal5.tabIcon = ""
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "challenges_framewidget_prestige"
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	local registerVal2 = ArenaChallengesEnabled()
	if registerVal2 then
		registerVal4 = {}
		registerVal5 = {}
		registerVal5.tabName = "MENU_ARENA_CAPS"
		registerVal5.tabWidget = "CoD.Challenges_FrameWidget_Arena"
		registerVal5.tabIcon = ""
		registerVal4.models = registerVal5
		registerVal5 = {}
		registerVal5.tabId = "challenges_framewidget_arena"
		registerVal4.properties = registerVal5
		table.insert({}, registerVal4)
	end
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderr
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("ChallengesTabs", __FUNC_101B3_)
DataSources.ChallengesTabs = registerVal1
local function __FUNC_107CD_(arg0)
	local registerVal3 = Engine.GetGlobalModel()
	local registerVal2 = Engine.GetModel(registerVal3, "challengeCategory")
	if registerVal2 ~= nil then
		local registerVal4 = Engine.GetModelValue(registerVal2)
	end
	local registerVal6 = {}
	local registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderl
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_BOOTCAMP_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "bootcamp"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "bootcamp"
	local registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "bootcamp")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_KILLER_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "killer"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "killer"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "killer")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_HUMILIATION_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "humiliation"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "humiliation"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "humiliation")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_CAREER_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "career"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "career"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "career")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_GAMEVICTORIES_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "gamevictories"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "gamevictories"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "gamevictories")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_GAMEHEROICS_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "gameheroics"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "gameheroics"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "gameheroics")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_DARKOPS_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook_DarkOps"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "darkops"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "darkops"
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderr
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	for index4=1.000000, #{}, 1.000000 do
		if {}[index4].properties ~= nil then
			if {}[index4].models.tabCategory == registerVal4 then
				{}[index4].properties.selectIndex = true
			else
				{}[index4].properties.selectIndex = false
			end
		end
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("OperationsTabs", __FUNC_107CD_)
DataSources.OperationsTabs = registerVal1
local function __FUNC_10FF0_(arg0)
	local registerVal3 = Engine.GetGlobalModel()
	local registerVal2 = Engine.GetModel(registerVal3, "challengeCategory")
	if registerVal2 ~= nil then
		local registerVal4 = Engine.GetModelValue(registerVal2)
	end
	local registerVal6 = {}
	local registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderl
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_SPECIALISTWEAPONS_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "weapons"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "weapons"
	local registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "weapons")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_SPECIALISTABILITIES_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "abilities"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "abilities"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "abilities")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_SPECIALISTKILLJOYS_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "killjoys"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "killjoys"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "killjoys")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderr
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	for index4=1.000000, #{}, 1.000000 do
		if {}[index4].properties ~= nil then
			if {}[index4].models.tabCategory == registerVal4 then
				{}[index4].properties.selectIndex = true
			else
				{}[index4].properties.selectIndex = false
			end
		end
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("SpecialistsTabs", __FUNC_10FF0_)
DataSources.SpecialistsTabs = registerVal1
local function __FUNC_1159B_(arg0)
	local registerVal3 = Engine.GetGlobalModel()
	local registerVal2 = Engine.GetModel(registerVal3, "challengeCategory")
	if registerVal2 ~= nil then
		local registerVal4 = Engine.GetModelValue(registerVal2)
	end
	local registerVal6 = {}
	local registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderl
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_AIR_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "airassault"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "airassault"
	local registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "airassault")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_GROUND_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "groundassault"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "groundassault"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "groundassault")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_SUPPORT_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "support"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "support"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "support")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_RETURNFIRE_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "returnfire"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "returnfire"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "returnfire")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderr
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	for index4=1.000000, #{}, 1.000000 do
		if {}[index4].properties ~= nil then
			if {}[index4].models.tabCategory == registerVal4 then
				{}[index4].properties.selectIndex = true
			else
				{}[index4].properties.selectIndex = false
			end
		end
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("ScorestreaksTabs", __FUNC_1159B_)
DataSources.ScorestreaksTabs = registerVal1
local function __FUNC_11BC4_(arg0)
	local registerVal3 = Engine.GetGlobalModel()
	local registerVal2 = Engine.GetModel(registerVal3, "challengeCategory")
	if registerVal2 ~= nil then
		local registerVal4 = Engine.GetModelValue(registerVal2)
	end
	local registerVal6 = {}
	local registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderl
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_COMBATHANDLING_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "combathandling"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "combathandling"
	local registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "combathandling")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_COMBATEFFICIENCY_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "combatefficiency"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "combatefficiency"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "combatefficiency")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_PERKS1_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "perks1"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "perks1"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "perks1")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_PERKS2_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "perks2"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "perks2"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "perks2")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_PERKS3_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "perks3"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "perks3"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "perks3")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_LETHALS_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "lethals"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "lethals"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "lethals")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_TACTICALS_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "tacticals"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "tacticals"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "tacticals")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_WILDCARDS_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "wildcards"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "wildcards"
	registerVal8 = Challenges_IsCategoryLocked(nil, arg0, "wildcards")
	registerVal7.disabled = registerVal8
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderr
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	for index4=1.000000, #{}, 1.000000 do
		if {}[index4].properties ~= nil then
			if {}[index4].models.tabCategory == registerVal4 then
				{}[index4].properties.selectIndex = true
			else
				{}[index4].properties.selectIndex = false
			end
		end
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("PrestigeTabs", __FUNC_11BC4_)
DataSources.PrestigeTabs = registerVal1
local function __FUNC_12474_(arg0)
	local registerVal3 = Engine.GetGlobalModel()
	local registerVal2 = Engine.GetModel(registerVal3, "challengeCategory")
	if registerVal2 ~= nil then
		local registerVal4 = Engine.GetModelValue(registerVal2)
	end
	local registerVal6 = {}
	local registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderl
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_ARENAVET_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook_ArenaVet"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "arenavet"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "arenavet"
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_CHALLENGE_CATEGORY_ARENABEST_CAPS"
	registerVal7.tabWidget = "CoD.Challenges_MP_Stickerbook_ArenaBest"
	registerVal7.tabIcon = ""
	registerVal7.tabCategory = "arenabest"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "arenabest"
	registerVal7.selectIndex = false
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderr
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	for index4=1.000000, #{}, 1.000000 do
		if {}[index4].properties ~= nil then
			if {}[index4].models.tabCategory == registerVal4 then
				{}[index4].properties.selectIndex = true
			else
				{}[index4].properties.selectIndex = false
			end
		end
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("ArenaChallengesTabs", __FUNC_12474_)
DataSources.ArenaChallengesTabs = registerVal1
local function __FUNC_12939_(arg0)
	local registerVal2 = IsLive()
	if registerVal2 then
		local registerVal4 = {}
		local registerVal5 = {}
		registerVal5.displayText = "MENU_SAVE"
		registerVal5.description = "MENU_SAVE_DESCRIPTION"
		registerVal5.action = SaveCustomGame
		registerVal5.icon = "t7_icon_menu_simple_save"
		registerVal5.disabled = false
		registerVal4.models = registerVal5
		table.insert({}, registerVal4)
	end
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.displayText = "MENU_REVERT_CHANGES"
	registerVal5.description = "MENU_REVERT_CHANGES_DESCRIPTION"
	registerVal5.action = ResetGameSettings
	registerVal5.icon = "t7_icon_menu_simple_revertchanges"
	registerVal5.disabled = false
	registerVal4.models = registerVal5
	table.insert({}, registerVal4)
	local registerVal3 = Engine.GetGlobalModel()
	registerVal2 = Engine.CreateModel(registerVal3, "GametypeSettings.selectedSetting")
	registerVal3 = Engine.GetModelValue(registerVal2)
	if CoD.perController[arg0].selectedGameSettingElement and CoD.perController[arg0].selectedGameSettingElement.revert then
		local registerVal7 = {}
		local registerVal8 = {}
		registerVal8.displayText = "MENU_REVERT_SETTING"
		registerVal8.description = "MENU_REVERT_SETTINGS_DESCRIPTION"
		registerVal8.action = ResetSelectedGameSetting
		registerVal8.icon = "t7_icon_menu_simple_revertsetting"
		registerVal8.disabled = false
		registerVal7.models = registerVal8
		table.insert({}, registerVal7)
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("GameSettingsOptions", __FUNC_12939_, true)
DataSources.GameSettingsOptions = registerVal1
local function __FUNC_12DB5_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabName = "CODCASTER_SETTINGS"
	registerVal5.tabWidget = "CoD.CodCasterSettingsSideBarDisplaySettings"
	registerVal5.tabIcon = ""
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "displaySettings"
	local registerVal6 = IsPerControllerTablePropertyValue(arg0, "codcasterSettingsSideBarPrimaryTab", "displaySettings")
	registerVal5.selectIndex = registerVal6
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabName = "CODCASTER_LOADOUT"
	registerVal5.tabWidget = "CoD.CodCasterSettingsSideBarLoadoutSettings"
	registerVal5.tabIcon = ""
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "loadoutSettings"
	registerVal6 = IsPerControllerTablePropertyValue(arg0, "codcasterSettingsSideBarPrimaryTab", "loadoutSettings")
	registerVal5.selectIndex = registerVal6
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderr
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("CodCasterSideBarTabs", __FUNC_12DB5_)
DataSources.CodCasterSideBarTabs = registerVal1
local function __FUNC_13165_(arg0)
	local function __FUNC_13CDF_(arg0, arg1)
		local registerVal2 = DataSources.TeamIdentity.getModel(arg0)
		local registerVal4 = Engine.CreateModel(registerVal2, "team")
		Engine.SetModelValue(registerVal4, arg1)
	end

	local registerVal4 = CoD.ShoutcasterProfileVarBool(arg0, "shoutcaster_fe_team_identity")
	if registerVal4 ~= false then
	end
	local registerVal8 = {}
	local registerVal9 = Engine.ToUpper(Engine.Localize("CODCASTER_TEAM_IDENTITY_FACTIONS"))
	registerVal8.name = registerVal9
	registerVal8.value = Enum.ShoutcasterSettingTeamIdentityMode.SHOUTCASTER_SETTING_TEAM_IDENTITY_MODE_FACTION
	table.insert({}, registerVal8)
	registerVal8 = {}
	registerVal9 = Engine.ToUpper(Engine.Localize("CODCASTER_TEAM_IDENTITY_CUSTOM"))
	registerVal8.name = registerVal9
	registerVal8.value = Enum.ShoutcasterSettingTeamIdentityMode.SHOUTCASTER_SETTING_TEAM_IDENTITY_MODE_CUSTOM
	table.insert({}, registerVal8)
	local function __FUNC_13DE7_(arg0, arg1, arg2, arg3)
		for index4=1.000000, #arg0.ButtonList.EditCodCasterSettingsButtonList, 1.000000 do
			if arg0.ButtonList.EditCodCasterSettingsButtonList[index4].properties then
				if arg0.ButtonList.EditCodCasterSettingsButtonList[index4].properties.btnType == "btnTeamIdentitySubSettings" or arg0.ButtonList.EditCodCasterSettingsButtonList[index4].properties.btnType == "btnSwapTeamIdentitySettings" then
					local registerVal9 = Engine.GetModel(arg0.ButtonList.EditCodCasterSettingsButtonList[index4].model, "disabled")
					if arg3 ~= 0.000000 then
					end
					Engine.SetModelValue(registerVal9, true)
					arg0.ButtonList.EditCodCasterSettingsButtonList[index4].properties.disabled = true
					CoD.SetupTeamIdentityInformation(arg0, arg1, "team1")
					CoD.SetupTeamIdentityInformation(arg0, arg1, "team2")
				end
			end
		end
	end

	local registerVal7 = {}
	registerVal8 = {}
	registerVal8.btnType = "btnSettings"
	registerVal8.displayText = "CODCASTER_QUICK_SETTINGS"
	registerVal8.hintText = "CODCASTER_QUICK_SETTINGS_DESC"
	registerVal8.buttonOnly = true
	registerVal8.disabled = false
	registerVal8.showTeam1Info = false
	registerVal8.showTeam2Info = false
	local function __FUNC_140B4_(arg0, arg1, arg2, arg3, arg4)
		NavigateToMenu(arg4, "EditCodCasterQuickSettings", true, arg2)
	end

	registerVal8.actionFn = __FUNC_140B4_
	registerVal9 = {}
	registerVal9.btnType = "btnSettings"
	registerVal9.displayText = "CODCASTER_DISPLAY_SETTINGS"
	registerVal9.hintText = "CODCASTER_DISPLAY_SETTINGS_DESC"
	registerVal9.buttonOnly = true
	registerVal9.disabled = false
	registerVal9.showTeam1Info = false
	registerVal9.showTeam2Info = false
	local function __FUNC_14134_(arg0, arg1, arg2, arg3, arg4)
		NavigateToMenu(arg4, "EditCodCasterDisplaySettings", true, arg2)
	end

	registerVal9.actionFn = __FUNC_14134_
	local registerVal10 = {}
	registerVal10.btnType = "btnSettings"
	registerVal10.displayText = "CODCASTER_LOADOUT_SETTINGS"
	registerVal10.hintText = "CODCASTER_LOADOUT_SETTINGS_DESC"
	registerVal10.buttonOnly = true
	registerVal10.disabled = false
	registerVal10.showTeam1Info = false
	registerVal10.showTeam2Info = false
	local function __FUNC_141B6_(arg0, arg1, arg2, arg3, arg4)
		NavigateToMenu(arg4, "EditCodCasterLoadoutSettings", true, arg2)
	end

	registerVal10.actionFn = __FUNC_141B6_
	local registerVal11 = {}
	registerVal11.btnType = "btnSettings"
	registerVal11.displayText = "CODCASTER_PLAYER_ORDER"
	registerVal11.hintText = "CODCASTER_PLAYER_ORDER_DESC"
	registerVal11.buttonOnly = true
	registerVal11.disabled = true
	registerVal11.showTeam1Info = false
	registerVal11.showTeam2Info = false
	local function __FUNC_14236_(arg0, arg1, arg2, arg3, arg4)
	end

	registerVal11.actionFn = __FUNC_14236_
	registerVal11.spacing = 40.000000
	local registerVal12 = {}
	registerVal12.btnType = "btnTeamIdentitySettings"
	registerVal12.displayText = "CODCASTER_TEAM_IDENTITY"
	registerVal12.hintText = "CODCASTER_TEAM_IDENTITY_DESC"
	registerVal12.buttonOnly = false
	registerVal12.sliderOnly = true
	registerVal12.disabled = false
	registerVal12.showTeam1Info = true
	registerVal12.showTeam2Info = true
	local registerVal13 = CoD.OptionsUtility.CreateCustomOptionDataSource(arg0, "CoDCasterSettings_TeamIdentity", {}, "shoutcaster_fe_team_identity", __FUNC_13DE7_, CoD.CodCasterUtility.Options_ItemSelected, CoD.CodCasterUtility.Options_RevertItemSelected)
	registerVal12.optionsDatasource = registerVal13
	registerVal13 = CoD.CodCasterUtility.Options_GetProfileSelection(arg0, {}, "shoutcaster_fe_team_identity")
	registerVal12.currentSelection = registerVal13
	registerVal13 = {}
	registerVal13.btnType = "btnTeamIdentitySubSettings"
	registerVal13.displayText = "CODCASTER_TEAM1_SETTINGS"
	registerVal13.hintText = "CODCASTER_TEAM1_SETTINGS_DESC"
	registerVal13.buttonOnly = true
	registerVal13.disabled = true
	registerVal13.showTeam1Info = true
	registerVal13.showTeam2Info = false
	local function __FUNC_14260_(arg0, arg1, arg2, arg3, arg4)
		__FUNC_13CDF_(arg2, "team1")
		NavigateToMenu(arg4, "EditTeamIdentity", true, arg2)
	end

	registerVal13.actionFn = __FUNC_14260_
	local registerVal14 = {}
	registerVal14.btnType = "btnTeamIdentitySubSettings"
	registerVal14.displayText = "CODCASTER_TEAM2_SETTINGS"
	registerVal14.hintText = "CODCASTER_TEAM2_SETTINGS_DESC"
	registerVal14.buttonOnly = true
	registerVal14.disabled = true
	registerVal14.showTeam1Info = false
	registerVal14.showTeam2Info = true
	local function __FUNC_142F5_(arg0, arg1, arg2, arg3, arg4)
		__FUNC_13CDF_(arg2, "team2")
		NavigateToMenu(arg4, "EditTeamIdentity", true, arg2)
	end

	registerVal14.actionFn = __FUNC_142F5_
	local registerVal15 = {}
	registerVal15.btnType = "btnSwapTeamIdentitySettings"
	registerVal15.displayText = "CODCASTER_SWAP_TEAM_SETTINGS"
	registerVal15.hintText = "CODCASTER_SWAP_TEAM_SETTINGS_DESC"
	registerVal15.buttonOnly = true
	registerVal15.disabled = true
	registerVal15.showTeam1Info = true
	registerVal15.showTeam2Info = true
	local function __FUNC_14389_(arg0, arg1, arg2, arg3, arg4)
		CoD.CodCasterUtility.SwapTeamSettings(arg2)
		CoD.SetupTeamIdentityInformation(arg4, arg2, "team1")
		CoD.SetupTeamIdentityInformation(arg4, arg2, "team2")
		LuaUtils.UI_ShowInfoMessageDialog(arg2, "CODCASTER_SWAP_TEAM_SETTINGS_SUCCESS")
	end

	registerVal15.actionFn = __FUNC_14389_
	registerVal7 = {registerVal8, registerVal9, registerVal10, registerVal11, registerVal12, registerVal13, registerVal14, registerVal15}
	registerVal8, registerVal9, registerVal10 = ipairs(registerVal7)
	for index11,value12 in registerVal8, registerVal9, registerVal10 do
		registerVal15 = {}
		local registerVal16 = {}
		local registerVal17 = Engine.ToUpper(Engine.Localize(value12.displayText))
		registerVal16.displayText = registerVal17
		registerVal16.hintText = value12.hintText
		registerVal16.buttonOnly = value12.buttonOnly
		registerVal16.sliderOnly = value12.sliderOnly
		registerVal16.disabled = value12.disabled
		registerVal16.showTeam1Info = value12.showTeam1Info
		registerVal16.showTeam2Info = value12.showTeam2Info
		registerVal16.optionsDatasource = value12.optionsDatasource
		registerVal16.currentSelection = value12.currentSelection
		registerVal16.selected = false
		registerVal15.models = registerVal16
		registerVal16 = {}
		registerVal16.btnType = value12.btnType
		if value12.buttonOnly ~= true then
		end
		registerVal16.hideArrows = true
		registerVal16.disabled = value12.disabled
		registerVal16.action = value12.actionFn
		registerVal16.spacing = value12.spacing
		registerVal15.properties = registerVal16
		table.insert({}, registerVal15)
	end
	return {}
end

local function __FUNC_1451B_(arg0, arg1, arg2)
	if arg0.EditCodCasterSettingsButtonList[arg1].properties.spacing then
		return arg0.EditCodCasterSettingsButtonList[arg1].properties.spacing
	end
	return arg0.spacing
end

registerVal1 = ListHelper_SetupDataSource("EditCodCasterSettingsButtonList", __FUNC_13165_, false, nil, nil, __FUNC_1451B_)
DataSources.EditCodCasterSettingsButtonList = registerVal1
local function __FUNC_1460E_(arg0)
	local registerVal2 = {}
	local registerVal3 = {}
	registerVal3.displayText = "CODCASTER_QS_XRAY"
	registerVal3.hintText = "CODCASTER_QS_XRAY_HINT"
	registerVal3.profileVar = "shoutcaster_qs_xray"
	local registerVal4 = {}
	registerVal4.displayText = "CODCASTER_QS_THIRD_PERSON"
	registerVal4.hintText = "CODCASTER_QS_THIRD_PERSON_HINT"
	registerVal4.profileVar = "shoutcaster_qs_thirdperson"
	local registerVal5 = {}
	registerVal5.displayText = "CODCASTER_QS_PLAYER_NUMBERS"
	registerVal5.hintText = "CODCASTER_QS_PLAYER_NUMBERS_HINT"
	registerVal5.profileVar = "shoutcaster_qs_playernumbers"
	local registerVal6 = {}
	registerVal6.displayText = "CODCASTER_QS_LISTEN_IN"
	registerVal6.hintText = "CODCASTER_QS_LISTEN_IN_HINT"
	registerVal6.profileVar = "shoutcaster_qs_listen_in"
	local registerVal7 = {}
	registerVal7.displayText = "CODCASTER_QS_PLAYER_LIST"
	registerVal7.hintText = "CODCASTER_QS_PLAYER_LIST_HINT"
	registerVal7.profileVar = "shoutcaster_qs_playerlist"
	local registerVal8 = {}
	registerVal8.displayText = "CODCASTER_QS_SCORE_PANEL"
	registerVal8.hintText = "CODCASTER_QS_SCORE_PANEL_HINT"
	registerVal8.profileVar = "shoutcaster_qs_scorepanel"
	local registerVal9 = {}
	registerVal9.displayText = "CODCASTER_QS_PLAYER_CARD"
	registerVal9.hintText = "CODCASTER_QS_PLAYER_CARD_HINT"
	registerVal9.profileVar = "shoutcaster_qs_playercard"
	local registerVal10 = {}
	registerVal10.displayText = "CODCASTER_QS_PLAYER_HUD"
	registerVal10.hintText = "CODCASTER_QS_PLAYER_HUD_HINT"
	registerVal10.profileVar = "shoutcaster_qs_playerhud"
	registerVal2 = {registerVal3, registerVal4, registerVal5, registerVal6, registerVal7, registerVal8, registerVal9, registerVal10}
	registerVal3, registerVal4, registerVal5 = ipairs(registerVal2)
	for index6,value7 in registerVal3, registerVal4, registerVal5 do
		registerVal10 = {}
		local registerVal11 = {}
		local registerVal12 = Engine.Localize(value7.displayText)
		registerVal11.displayText = registerVal12
		registerVal12 = Engine.Localize(value7.hintText)
		registerVal11.hintText = registerVal12
		registerVal12 = CoD.ShoutcasterProfileVarBool(arg0, value7.profileVar)
		registerVal11.profileVarValue = registerVal12
		registerVal10.models = registerVal11
		registerVal11 = {}
		registerVal11.profileVar = value7.profileVar
		registerVal10.properties = registerVal11
		table.insert({}, registerVal10)
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("CodCasterQuickSettingsButtonList", __FUNC_1460E_)
DataSources.CodCasterQuickSettingsButtonList = registerVal1
local function __FUNC_14BD5_(arg0)
	local function __FUNC_1605E_(arg0, arg1, arg2, arg3)
		local registerVal4 = Engine.IsInGame()
		if not registerVal4 then
			return 
		end
		ToggleControllerModelValueNumber(arg1, "CodCaster.profileSettingsUpdated")
	end

	local registerVal6 = {}
	registerVal6.name = "MENU_OFF"
	registerVal6.value = 0.000000
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal6.name = "MENU_ON"
	registerVal6.value = 1.000000
	table.insert({}, registerVal6)
	local registerVal7 = {}
	registerVal7.name = "CODCASTER_XRAY_NONE"
	registerVal7.value = Enum.ShoutcasterSettingsXray.SHOUTCASTER_SETTING_XRAY_OFF
	table.insert({}, registerVal7)
	registerVal7 = {}
	registerVal7.name = "CODCASTER_XRAY_ENEMY"
	registerVal7.value = Enum.ShoutcasterSettingsXray.SHOUTCASTER_SETTING_XRAY_ENEMY
	table.insert({}, registerVal7)
	registerVal7 = {}
	registerVal7.name = "CODCASTER_XRAY_BOTH"
	registerVal7.value = Enum.ShoutcasterSettingsXray.SHOUTCASTER_SETTING_XRAY_ALL
	table.insert({}, registerVal7)
	local registerVal8 = {}
	registerVal8.name = "MENU_ON_SPAWN"
	registerVal8.value = Enum.ShoutcasterSettingShowPerks.SHOUTCASTER_SETTING_SHOW_PERKS_ON
	table.insert({}, registerVal8)
	registerVal8 = {}
	registerVal8.name = "MPUI_ALWAYS_ON"
	registerVal8.value = Enum.ShoutcasterSettingShowPerks.SHOUTCASTER_SETTING_SHOW_PERKS_ALWAYS
	table.insert({}, registerVal8)
	registerVal8 = {}
	registerVal8.name = "CODCASTER_MINIMAP_STANDARD"
	registerVal8.value = Enum.ShoutcasterSettingShowPerks.SHOUTCASTER_SETTING_SHOW_PERKS_STANDARD
	table.insert({}, registerVal8)
	registerVal8 = {}
	registerVal8.name = "MENU_OFF"
	registerVal8.value = Enum.ShoutcasterSettingShowPerks.SHOUTCASTER_SETTING_SHOW_PERKS_OFF
	table.insert({}, registerVal8)
	local registerVal9 = {}
	registerVal9.name = "MENU_OFF"
	registerVal9.value = Enum.ShoutcasterSettingMinimapMode.SHOUTCASTER_SETTING_MINIMAP_MODE_OFF
	table.insert({}, registerVal9)
	registerVal9 = {}
	registerVal9.name = "CODCASTER_MINIMAP_STANDARD"
	registerVal9.value = Enum.ShoutcasterSettingMinimapMode.SHOUTCASTER_SETTING_MINIMAP_MODE_STANDARD
	table.insert({}, registerVal9)
	registerVal9 = {}
	registerVal9.name = "CODCASTER_MINIMAP_FULL_VIEW"
	registerVal9.value = Enum.ShoutcasterSettingMinimapMode.SHOUTCASTER_SETTING_MINIMAP_MODE_FULL
	table.insert({}, registerVal9)
	local registerVal10 = {}
	registerVal10.name = "MENU_FRIENDLY"
	registerVal10.value = 0.000000
	table.insert({}, registerVal10)
	registerVal10 = {}
	registerVal10.name = "MENU_BOTH"
	registerVal10.value = 1.000000
	table.insert({}, registerVal10)
	registerVal8 = {}
	registerVal9 = {}
	registerVal9.name = "Xray"
	registerVal9.displayText = "CODCASTER_DS_XRAY"
	registerVal9.hintText = "CODCASTER_DS_XRAY_DESC"
	registerVal9.profileVar = "shoutcaster_xray"
	registerVal9.options = {}
	registerVal10 = {}
	registerVal10.name = "TeamIdentity"
	registerVal10.displayText = "CODCASTER_DS_TEAM_IDENTITY"
	registerVal10.hintText = "CODCASTER_DS_TEAM_IDENTITY_DESC"
	registerVal10.profileVar = "shoutcaster_team_identity"
	registerVal10.options = {}
	local registerVal11 = {}
	registerVal11.name = "Toolbar"
	registerVal11.displayText = "CODCASTER_DS_TOOLBAR"
	registerVal11.hintText = "CODCASTER_DS_TOOLBAR_DESC"
	registerVal11.profileVar = "shoutcaster_toolbar"
	registerVal11.options = {}
	local registerVal12 = {}
	registerVal12.name = "Perks"
	registerVal12.displayText = "CODCASTER_DS_PERKS"
	registerVal12.hintText = "CODCASTER_DS_PERKS_DESC"
	registerVal12.profileVar = "shoutcaster_perks"
	registerVal12.options = {}
	local registerVal13 = {}
	registerVal13.name = "Minimap"
	registerVal13.displayText = "CODCASTER_DS_MINIMAP"
	registerVal13.hintText = "CODCASTER_DS_MINIMAP_DESC"
	registerVal13.profileVar = "shoutcaster_minimap"
	registerVal13.options = {}
	local registerVal14 = {}
	registerVal14.name = "TeamScore"
	registerVal14.displayText = "CODCASTER_DS_TEAM_SCORE"
	registerVal14.hintText = "CODCASTER_DS_TEAM_SCORE_DESC"
	registerVal14.profileVar = "shoutcaster_teamscore"
	registerVal14.options = {}
	local registerVal15 = {}
	registerVal15.name = "Inventory"
	registerVal15.displayText = "CODCASTER_DS_INVENTORY"
	registerVal15.hintText = "CODCASTER_DS_INVENTORY_DESC"
	registerVal15.profileVar = "shoutcaster_inventory"
	registerVal15.options = {}
	local registerVal16 = {}
	registerVal16.name = "Scorestreaks"
	registerVal16.displayText = "CODCASTER_DS_SCORESTREAKS"
	registerVal16.hintText = "CODCASTER_DS_SCORESTREAKS_DESC"
	registerVal16.profileVar = "shoutcaster_scorestreaks"
	registerVal16.options = {}
	local registerVal17 = {}
	registerVal17.name = "ScorestreakNotifications"
	registerVal17.displayText = "CODCASTER_DS_SCORESTREAK_NOTIFICATIONS"
	registerVal17.hintText = "CODCASTER_DS_SCORESTREAK_NOTIFICATIONS_DESC"
	registerVal17.profileVar = "shoutcaster_scorestreaks_notification"
	registerVal17.options = {}
	local registerVal18 = {}
	registerVal18.name = "SpecialistNotifications"
	registerVal18.displayText = "CODCASTER_DS_SPECIALIST_NOTIFICATIONS"
	registerVal18.hintText = "CODCASTER_DS_SPECIALIST_NOTIFICATIONS_DESC"
	registerVal18.profileVar = "shoutcaster_specialist_notification"
	registerVal18.options = {}
	local registerVal19 = {}
	registerVal19.name = "ObjectiveStatus"
	registerVal19.displayText = "CODCASTER_DS_OBJECTIVE_STATUS"
	registerVal19.hintText = "CODCASTER_DS_OBJECTIVE_STATUS_DESC"
	registerVal19.profileVar = "shoutcaster_objective_status"
	registerVal19.options = {}
	local registerVal20 = {}
	registerVal20.name = "WaypointMarkers"
	registerVal20.displayText = "CODCASTER_DS_WAYPOINT_MARKERS"
	registerVal20.hintText = "CODCASTER_DS_WAYPOINT_MARKERS_DESC"
	registerVal20.profileVar = "shoutcaster_waypoint_markers"
	registerVal20.options = {}
	local registerVal21 = {}
	registerVal21.name = "KillFeed"
	registerVal21.displayText = "CODCASTER_DS_KILLFEED"
	registerVal21.hintText = "CODCASTER_DS_KILLFEED_DESC"
	registerVal21.profileVar = "shoutcaster_killfeed"
	registerVal21.options = {}
	local registerVal22 = {}
	registerVal22.name = "CalloutCards"
	registerVal22.displayText = "CODCASTER_DS_CALLOUT_CARDS"
	registerVal22.hintText = "CODCASTER_DS_CALLOUT_CARDS_DESC"
	registerVal22.profileVar = "shoutcaster_calloutcards"
	registerVal22.options = {}
	local registerVal23 = {}
	registerVal23.name = "PlayerNotifications"
	registerVal23.displayText = "CODCASTER_DS_PLAYER_NOTIFICATIONS"
	registerVal23.hintText = "CODCASTER_DS_PLAYER_NOTIFICATIONS_DESC"
	registerVal23.profileVar = "shoutcaster_playernotifications"
	registerVal23.options = {}
	local registerVal24 = {}
	registerVal24.name = "VoipDock"
	registerVal24.displayText = "CODCASTER_DS_VOIP_DOCK"
	registerVal24.hintText = "CODCASTER_DS_VOIP_DOCK_DESC"
	registerVal24.profileVar = "shoutcaster_voipdock"
	registerVal24.options = {}
	local registerVal25 = {}
	registerVal25.name = "PlayerNames"
	registerVal25.displayText = "CODCASTER_DS_PLAYER_NAMES"
	registerVal25.hintText = "CODCASTER_DS_PLAYER_NAMES_DESC"
	registerVal25.profileVar = "shoutcaster_playernames"
	registerVal25.options = {}
	registerVal8 = {registerVal9, registerVal10, registerVal11, registerVal12, registerVal13, registerVal14, registerVal15, registerVal16, registerVal17, registerVal18, registerVal19, registerVal20, registerVal21, registerVal22, registerVal23, registerVal24, registerVal25}
	registerVal9, registerVal10, registerVal11 = ipairs(registerVal8)
	for index12,value13 in registerVal9, registerVal10, registerVal11 do
		registerVal16 = {}
		registerVal17 = {}
		registerVal17.displayText = value13.displayText
		registerVal17.hintText = value13.hintText
		registerVal17.buttonOnly = false
		registerVal17.disabled = false
		registerVal18 = CoD.OptionsUtility.CreateCustomOptionDataSource(arg0, ("CoDCasterDisplaySettings_" .. value13.name), value13.options, value13.profileVar, __FUNC_1605E_, CoD.CodCasterUtility.Options_ItemSelected, CoD.CodCasterUtility.Options_RevertItemSelected)
		registerVal17.optionsDatasource = registerVal18
		registerVal18 = CoD.CodCasterUtility.Options_GetProfileSelection(arg0, value13.options, value13.profileVar)
		registerVal17.currentSelection = registerVal18
		registerVal17.selected = false
		registerVal16.models = registerVal17
		registerVal17 = {}
		registerVal17.hideArrows = false
		registerVal17.disabled = false
		registerVal16.properties = registerVal17
		table.insert({}, registerVal16)
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("CodCasterDisplaySettingsButtonList", __FUNC_14BD5_)
DataSources.CodCasterDisplaySettingsButtonList = registerVal1
local function __FUNC_1612E_(arg0)
	local function __FUNC_16979_(arg0, arg1, arg2, arg3)
		local registerVal4 = Engine.IsInGame()
		if not registerVal4 then
			return 
		end
		ToggleControllerModelValueNumber(arg1, "CodCaster.profileSettingsUpdated")
	end

	local registerVal6 = {}
	registerVal6.name = "MENU_OFF"
	registerVal6.value = 0.000000
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal6.name = "MENU_ON"
	registerVal6.value = 1.000000
	table.insert({}, registerVal6)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.name = "PlayerSpecialist"
	registerVal5.displayText = "CODCASTER_LS_PLAYER_SPECIALIST"
	registerVal5.hintText = "CODCASTER_LS_PLAYER_SPECIALIST_DESC"
	registerVal5.profileVar = "shoutcaster_lo_specialist"
	registerVal6 = {}
	registerVal6.name = "SpecialistWeaponAbility"
	registerVal6.displayText = "CODCASTER_LS_SPECIALIST_WEAPON_ABILITY"
	registerVal6.hintText = "CODCASTER_LS_SPECIALIST_WEAPON_ABILITY_DESC"
	registerVal6.profileVar = "shoutcaster_lo_specialist_weapon"
	local registerVal7 = {}
	registerVal7.name = "PrimaryWeapon"
	registerVal7.displayText = "CODCASTER_LS_PRIMARY_WEAPON"
	registerVal7.hintText = "CODCASTER_LS_PRIMARY_WEAPON_DESC"
	registerVal7.profileVar = "shoutcaster_lo_primary"
	local registerVal8 = {}
	registerVal8.name = "SecondaryWeapon"
	registerVal8.displayText = "CODCASTER_LS_SECONDARY_WEAPON"
	registerVal8.hintText = "CODCASTER_LS_SECONDARY_WEAPON_DESC"
	registerVal8.profileVar = "shoutcaster_lo_secondary"
	local registerVal9 = {}
	registerVal9.name = "Equipment"
	registerVal9.displayText = "CODCASTER_LS_EQUIPMENT"
	registerVal9.hintText = "CODCASTER_LS_EQUIPMENT_DESC"
	registerVal9.profileVar = "shoutcaster_lo_equipment"
	local registerVal10 = {}
	registerVal10.name = "Perks"
	registerVal10.displayText = "CODCASTER_LS_PERKS"
	registerVal10.hintText = "CODCASTER_LS_PERKS_DESC"
	registerVal10.profileVar = "shoutcaster_lo_perks"
	local registerVal11 = {}
	registerVal11.name = "Wildcards"
	registerVal11.displayText = "CODCASTER_LS_WILDCARDS"
	registerVal11.hintText = "CODCASTER_LS_WILDCARDS_DESC"
	registerVal11.profileVar = "shoutcaster_lo_wildcard"
	registerVal4 = {registerVal5, registerVal6, registerVal7, registerVal8, registerVal9, registerVal10, registerVal11}
	registerVal5, registerVal6, registerVal7 = ipairs(registerVal4)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal12 = {}
		local registerVal13 = {}
		registerVal13.displayText = value9.displayText
		registerVal13.hintText = value9.hintText
		registerVal13.buttonOnly = false
		registerVal13.disabled = false
		local registerVal14 = CoD.OptionsUtility.CreateCustomOptionDataSource(arg0, ("CoDCasterLoadoutSettings_" .. value9.name), {}, value9.profileVar, __FUNC_16979_, CoD.CodCasterUtility.Options_ItemSelected, CoD.CodCasterUtility.Options_RevertItemSelected)
		registerVal13.optionsDatasource = registerVal14
		registerVal14 = CoD.CodCasterUtility.Options_GetProfileSelection(arg0, {}, value9.profileVar)
		registerVal13.currentSelection = registerVal14
		registerVal13.selected = false
		registerVal12.models = registerVal13
		registerVal13 = {}
		registerVal13.hideArrows = false
		registerVal13.disabled = false
		registerVal12.properties = registerVal13
		table.insert({}, registerVal12)
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("CodCasterLoadoutSettingsButtonList", __FUNC_1612E_)
DataSources.CodCasterLoadoutSettingsButtonList = registerVal1
registerVal1 = {}
local function __FUNC_16A4A_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	registerVal1 = Engine.GetModelForController(registerVal1)
	return Engine.CreateModel(registerVal1, "TeamIdentity")
end

registerVal1.getModel = __FUNC_16A4A_
DataSources.TeamIdentity = registerVal1
registerVal1 = {}
local function __FUNC_16B44_(arg0, arg1)
	if not arg0 then
		local registerVal2 = Engine.GetPrimaryController()
	end
	registerVal2 = Engine.GetModelForController(registerVal2)
	local registerVal3 = Engine.GetModel(registerVal2, "TeamIdentity")
	if not arg1 then
		local registerVal4 = Engine.GetModelValue(Engine.GetModel(registerVal3, "team"))
	end
	return Engine.CreateModel(registerVal3, registerVal4)
end

registerVal1.getModel = __FUNC_16B44_
DataSources.TeamIdentityInformation = registerVal1
local function __FUNC_16CCF_(arg0)
	if not CoD.CodCaster_TeamIdentity.ColorList then
		local registerVal3 = CoD.GetCodCasterTeamColorList(arg0)
		CoD.CodCaster_TeamIdentity.ColorList = registerVal3
	end
	local registerVal4 = Engine.GetModelForController(arg0)
	registerVal3 = Engine.GetModel(registerVal4, "TeamIdentity")
	if registerVal3 then
		registerVal4 = Engine.GetModelValue(Engine.GetModel(registerVal3, "team"))
		local registerVal5 = CoD.ShoutcasterProfileVarValue(arg0, ("shoutcaster_fe_" .. registerVal4 .. "_color"))
		if registerVal4 == "team1" then
			local registerVal7 = CoD.ShoutcasterProfileVarValue(arg0, "shoutcaster_fe_team2_color")
		else
			if registerVal4 == "team2" then
				registerVal7 = CoD.ShoutcasterProfileVarValue(arg0, "shoutcaster_fe_team1_color")
			end
		end
		for index7=1.000000, #arg0, 1.000000 do
			if registerVal5 == (index7 - 1.000000) then
			end
			if 0.000000 <= registerVal7 and registerVal7 == (index7 - 1.000000) then
			end
			local registerVal15 = Engine.GetModelValue(Engine.GetModel(CoD.CodCaster_TeamIdentity.ColorList[index7], "id"))
			local registerVal16 = Engine.GetModelValue(Engine.GetModel(CoD.CodCaster_TeamIdentity.ColorList[index7], "color"))
			local registerVal19 = {}
			local registerVal20 = {}
			registerVal20.id = registerVal15
			registerVal20.color = registerVal16
			registerVal20.disabled = true
			registerVal20.selected = true
			registerVal19.models = registerVal20
			registerVal20 = {}
			registerVal20.selectIndex = true
			registerVal20.disabled = true
			registerVal19.properties = registerVal20
			table.insert({}, registerVal19)
		end
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("TeamIdentityColorList", __FUNC_16CCF_)
DataSources.TeamIdentityColorList = registerVal1
local function __FUNC_17188_(arg0)
	if not CoD.CodCaster_TeamIdentity.LogoList then
		local registerVal3 = CoD.GetCodCasterTeamLogoList(arg0)
		CoD.CodCaster_TeamIdentity.LogoList = registerVal3
	end
	local registerVal4 = Engine.GetModelForController(arg0)
	registerVal3 = Engine.GetModel(registerVal4, "TeamIdentity")
	if registerVal3 then
		registerVal4 = Engine.GetModelValue(Engine.GetModel(registerVal3, "team"))
		local registerVal5 = CoD.ShoutcasterProfileVarValue(arg0, ("shoutcaster_fe_" .. registerVal4 .. "_icon"))
		if registerVal4 == "team1" then
			local registerVal7 = CoD.ShoutcasterProfileVarValue(arg0, "shoutcaster_fe_team2_icon")
		else
			if registerVal4 == "team2" then
				registerVal7 = CoD.ShoutcasterProfileVarValue(arg0, "shoutcaster_fe_team1_icon")
			end
		end
		for index7=1.000000, #arg0, 1.000000 do
			if registerVal5 == (index7 - 1.000000) then
			end
			if 0.000000 <= registerVal7 and registerVal7 == (index7 - 1.000000) then
			end
			local registerVal14 = Engine.GetModelValue(Engine.GetModel(CoD.CodCaster_TeamIdentity.LogoList[index7], "id"))
			local registerVal15 = Engine.GetModelValue(Engine.GetModel(CoD.CodCaster_TeamIdentity.LogoList[index7], "name"))
			local registerVal16 = Engine.GetModelValue(Engine.GetModel(CoD.CodCaster_TeamIdentity.LogoList[index7], "ref"))
			local registerVal19 = {}
			local registerVal20 = {}
			registerVal20.id = registerVal14
			registerVal20.name = registerVal15
			registerVal20.ref = registerVal16
			registerVal20.disabled = true
			registerVal19.models = registerVal20
			registerVal20 = {}
			registerVal20.selectIndex = true
			registerVal20.disabled = true
			registerVal19.properties = registerVal20
			table.insert({}, registerVal19)
		end
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("TeamIdentityLogoList", __FUNC_17188_)
DataSources.TeamIdentityLogoList = registerVal1
registerVal1 = {}
local function __FUNC_17661_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "GametypeSettings")
	Engine.CreateModel(registerVal1, "title")
	Engine.CreateModel(registerVal1, "description")
	Engine.CreateModel(registerVal1, "image")
	registerVal2 = Engine.CreateModel(registerVal1, "gametype")
	local registerVal3 = Dvar.ui_gametype:get()
	local registerVal4 = Engine.StructTableLookupString(CoDShared.gametypesStructTable, "name", registerVal3, "name_ref_caps")
	Engine.SetModelValue(registerVal2, Engine.Localize(registerVal4))
	return registerVal1
end

registerVal1.getModel = __FUNC_17661_
DataSources.GametypeSettings = registerVal1
registerVal1 = {}
local function __FUNC_17910_(arg0)
	local registerVal1 = Engine.CurrentSessionMode()
	if registerVal1 ~= Enum.eModes.MODE_CAMPAIGN then
	end
	local registerVal3 = Engine.GetGlobalModel()
	local registerVal2 = Engine.CreateModel(registerVal3, "GunsmithSnapshot")
	local registerVal4 = Engine.CreateModel(registerVal2, "Stats")
	Engine.SetModelValue(registerVal4, 1.000000)
	registerVal4 = Engine.CreateModel(registerVal2, "WeaponLevel")
	Engine.SetModelValue(registerVal4, 1.000000)
	registerVal4 = Engine.CreateModel(registerVal2, "PlayerID")
	Engine.SetModelValue(registerVal4, 1.000000)
	registerVal4 = Engine.CreateModel(registerVal2, "WeaponName")
	Engine.SetModelValue(registerVal4, 1.000000)
	registerVal4 = Engine.CreateModel(registerVal2, "AttachmentIcons")
	Engine.SetModelValue(registerVal4, 1.000000)
	registerVal4 = Engine.CreateModel(registerVal2, "BO3Logo")
	Engine.SetModelValue(registerVal4, 1.000000)
	registerVal4 = Engine.CreateModel(registerVal2, "ShowControls")
	Engine.SetModelValue(registerVal4, 1.000000)
	registerVal4 = Engine.CreateModel(registerVal2, "SessionMode")
	Engine.SetModelValue(registerVal4, Enum.eModes.MODE_MULTIPLAYER)
	return registerVal2
end

registerVal1.getModel = __FUNC_17910_
DataSources.GunsmithSnapshot = registerVal1
local function __FUNC_17CDD_(arg0)
	local registerVal2 = Engine.GetModel(CoD.perController[arg0].gunsmithVariantModel, "variantIndex")
	if registerVal2 then
		local registerVal4 = Engine.GetModelValue(registerVal2)
	end
	registerVal4 = Engine.GetModel(CoD.perController[arg0].gunsmithVariantModel, "weaponIndex")
	if registerVal4 then
		local registerVal6 = Engine.GetModelValue(registerVal4)
	end
	registerVal6 = {}
	registerVal6 = {"statName", "variantStatValue", "weaponStatValue"}
	local registerVal7 = CoD.CraftUtility.Gunsmith.GetSnapshotSessionMode()
	local registerVal8 = CoD.CraftUtility.Gunsmith.GetWeaponStatList(arg0, registerVal6, registerVal7)
	local registerVal11 = Gunsmith_IsCurrentVariantChanged(arg0)
	if registerVal11 then
	end
	local function __FUNC_180A1_(arg0, arg1, arg2)
		local registerVal4 = tostring(arg1)
		local function __FUNC_18198_(arg0)
			local registerVal2, registerVal3, registerVal4 = ipairs(registerVal6)
			for index5,value6 in registerVal2, registerVal3, registerVal4 do
				if not true then
					local registerVal7 = CoD.CraftUtility.Gunsmith.GetVariantStats(arg0, arg2, (registerVal4 + 1.000000), registerVal7)
				end
				local registerVal9 = {}
				local registerVal10 = {}
				local registerVal11 = CoD.CraftUtility.Gunsmith.GetWeaponStatHeader(arg2)
				registerVal10.statName = registerVal11
				registerVal10.variantStatValue = registerVal7
				registerVal11 = CoD.CraftUtility.Gunsmith.GetWeaponStats(arg0, arg2, registerVal6, registerVal7)
				registerVal10.weaponStatValue = registerVal11
				registerVal10.type = value6
				registerVal9.models = registerVal10
				table.insert({}, registerVal9)
			end
			return {}
		end

		local registerVal5 = DataSourceHelpers.ListSetup(("GunsmithStats_Column_" .. registerVal4), __FUNC_18198_)
		DataSources[("GunsmithStats_Column_" .. registerVal4)] = registerVal5
		return ("GunsmithStats_Column_" .. registerVal4)
	end

	local registerVal13, registerVal14, registerVal15 = ipairs(registerVal8)
	for index16,value17 in registerVal13, registerVal14, registerVal15 do
		local registerVal20 = {}
		local registerVal21 = {}
		local registerVal22 = __FUNC_180A1_(arg0, index16, value17)
		registerVal21.SnapshotStatsColumn = registerVal22
		registerVal20.models = registerVal21
		table.insert({}, registerVal20)
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("GunsmithSnapshotStatsList", __FUNC_17CDD_)
DataSources.GunsmithSnapshotStatsList = registerVal1
registerVal1 = {}
local function __FUNC_183F2_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "CreateAClassEditSettingsName")
	registerVal2 = Engine.CreateModel(registerVal1, "name")
	Engine.SetModelValue(registerVal2, "MENU_CREATE_A_CLASS_SETTINGS")
	return registerVal1
end

registerVal1.getModel = __FUNC_183F2_
DataSources.CreateAClassEditSettingsName = registerVal1
local function __FUNC_18532_(arg0)
	local registerVal2 = Engine.IsDemoPlaying()
	if registerVal2 then
		registerVal2 = Engine.GetDemoSegmentCount()
		local registerVal3 = Engine.IsDemoHighlightReelMode()
		local registerVal4 = Engine.IsDemoClipPlaying()
		local registerVal5 = IsDemoRestrictedBasicMode()
		if not registerVal5 then
			local registerVal7 = {}
			local registerVal8 = {}
			local registerVal9 = Engine.ToUpper(Engine.Localize("MENU_UPLOAD_CLIP", registerVal2))
			registerVal8.displayText = registerVal9
			registerVal8.action = StartMenuUploadClip
			registerVal8.disabledFunction = IsUploadClipButtonDisabled
			registerVal7.models = registerVal8
			registerVal8 = {}
			registerVal8.hideHelpItemLabel = true
			registerVal7.properties = registerVal8
			table.insert({}, registerVal7)
		end
		if registerVal3 then
			registerVal7 = {}
			registerVal8 = {}
			registerVal9 = Engine.ToUpper(Engine.Localize("MENU_DEMO_CUSTOMIZE_HIGHLIGHT_REEL"))
			registerVal8.displayText = registerVal9
			registerVal8.action = StartMenuOpenCustomizeHighlightReel
			registerVal8.disabledFunction = IsCustomizeHighlightReelButtonDisabled
			registerVal7.models = registerVal8
			table.insert({}, registerVal7)
		end
		registerVal7 = {}
		registerVal8 = {}
		registerVal9 = Engine.ToUpper(Engine.ToUpper(Engine.Localize("MENU_JUMP_TO_START")))
		registerVal8.displayText = registerVal9
		registerVal8.action = StartMenuJumpToStart
		registerVal8.disabledFunction = IsJumpToStartButtonDisabled
		registerVal7.models = registerVal8
		registerVal8 = {}
		registerVal8.hideHelpItemLabel = true
		registerVal7.properties = registerVal8
		table.insert({}, registerVal7)
		if registerVal4 then
			local registerVal6 = Engine.ToUpper(Engine.Localize("MENU_END_CLIP"))
		else
			registerVal6 = Engine.ToUpper(Engine.Localize("MENU_END_FILM"))
		end
		registerVal8 = {}
		registerVal9 = {}
		local registerVal10 = Engine.ToUpper(registerVal6)
		registerVal9.displayText = registerVal10
		registerVal9.action = StartMenuEndDemo
		registerVal8.models = registerVal9
		table.insert({}, registerVal8)
	else
		if CoD.isCampaign then
			registerVal4 = {}
			registerVal5 = {}
			registerVal5.displayText = "MENU_RESUMEGAME_CAPS"
			registerVal5.action = StartMenuGoBack_ListElement
			registerVal4.models = registerVal5
			table.insert({}, registerVal4)
			registerVal3 = Engine.GetModelForController(arg0)
			registerVal2 = CoD.SafeGetModelValue(registerVal3, "safehouse.inTrainingSim")
			if not registerVal2 then
			end
			registerVal3 = Engine.IsLobbyHost(Enum.LobbyType.LOBBY_TYPE_GAME)
			if registerVal3 then
				registerVal3 = Engine.GetPrimaryController()
				registerVal5 = {}
				registerVal6 = {}
				registerVal6.displayText = "MENU_RESTART_MISSION_CAPS"
				registerVal6.action = RestartMission
				registerVal5.models = registerVal6
				table.insert({}, registerVal5)
				if not CoD.isSafehouse and arg0 == registerVal3 and LUI.DEV ~= nil then
					registerVal5 = {}
					registerVal6 = {}
					registerVal6.displayText = "MENU_RESTART_CHECKPOINT_CAPS"
					registerVal6.action = RestartFromCheckpoint
					registerVal5.models = registerVal6
					table.insert({}, registerVal5)
				end
				registerVal3 = Engine.GetPrimaryController()
				if arg0 == registerVal3 then
					registerVal5 = {}
					registerVal6 = {}
					registerVal6.displayText = "MENU_CHANGE_DIFFICULTY_CAPS"
					registerVal6.action = OpenDifficultySelect
					registerVal5.models = registerVal6
					table.insert({}, registerVal5)
				end
				if CoD.isSafehouse and 0.000000 == 1.000000 then
					registerVal5 = {}
					registerVal6 = {}
					registerVal6.displayText = "MENU_END_TRAINING_SIM"
					registerVal6.action = EndTrainingSim
					registerVal5.models = registerVal6
					table.insert({}, registerVal5)
				else
					registerVal3 = Engine.GetPrimaryController()
					if arg0 == registerVal3 then
						registerVal3 = Engine.DvarBool(0.000000, "ui_blocksaves")
						if registerVal3 then
							registerVal5 = {}
							registerVal6 = {}
							registerVal6.displayText = "MENU_EXIT_CAPS"
							registerVal6.action = SaveAndQuitGame
							registerVal5.models = registerVal6
							table.insert({}, registerVal5)
						else
							registerVal5 = {}
							registerVal6 = {}
							registerVal6.displayText = "MENU_SAVE_AND_QUIT_CAPS"
							registerVal6.action = SaveAndQuitGame
							registerVal5.models = registerVal6
							table.insert({}, registerVal5)
						else
							if CoD.isSafehouse and 0.000000 == 1.000000 then
								registerVal5 = {}
								registerVal6 = {}
								registerVal6.displayText = "MENU_END_TRAINING_SIM"
								registerVal6.action = EndTrainingSim
								registerVal5.models = registerVal6
								table.insert({}, registerVal5)
							else
								registerVal5 = {}
								registerVal6 = {}
								registerVal6.displayText = "MENU_LEAVE_PARTY_AND_EXIT_CAPS"
								registerVal6.action = QuitGame
								registerVal5.models = registerVal6
								table.insert({}, registerVal5)
							else
								if CoD.isMultiplayer then
									registerVal2 = Engine.Team(arg0, "name")
									registerVal3 = Engine.GetGametypeSetting("disableClassSelection")
									if registerVal2 ~= "TEAM_SPECTATOR" and registerVal3 ~= 1.000000 then
										registerVal5 = {}
										registerVal6 = {}
										registerVal6.displayText = "MPUI_CHOOSE_CLASS_BUTTON_CAPS"
										registerVal6.action = ChooseClass
										registerVal5.models = registerVal6
										table.insert({}, registerVal5)
									end
									registerVal3 = Engine.GameModeIsMode(CoD.GAMEMODE_PUBLIC_MATCH)
									registerVal3 = Engine.GameModeIsMode(CoD.GAMEMODE_LEAGUE_MATCH)
									registerVal3 = Engine.IsVisibilityBitSet(arg0, Enum.UIVisibilityBit.BIT_ROUND_END_KILLCAM)
									registerVal3 = Engine.IsVisibilityBitSet(arg0, Enum.UIVisibilityBit.BIT_FINAL_KILLCAM)
									registerVal3 = CoD.IsTeamChangeAllowed()
									if registerVal3 == false and registerVal3 == false and not registerVal3 and not registerVal3 and registerVal3 then
										registerVal5 = {}
										registerVal6 = {}
										registerVal6.displayText = "MPUI_CHANGE_TEAM_BUTTON_CAPS"
										registerVal6.action = ChooseTeam
										registerVal5.models = registerVal6
										table.insert({}, registerVal5)
									end
									if arg0 == 0.000000 then
										registerVal4 = Engine.IsLobbyHost(Enum.LobbyType.LOBBY_TYPE_GAME)
										registerVal4 = CoD.isOnlineGame()
										if registerVal4 and not registerVal4 then
										end
										registerVal6 = {}
										registerVal7 = {}
										registerVal7.displayText = "MENU_END_GAME_CAPS"
										registerVal7.action = QuitGame_MP
										registerVal6.models = registerVal7
										table.insert({}, registerVal6)
									else
										if CoD.isZombie then
											registerVal4 = {}
											registerVal5 = {}
											registerVal5.displayText = "MENU_RESUMEGAME_CAPS"
											registerVal5.action = StartMenuGoBack_ListElement
											registerVal4.models = registerVal5
											table.insert({}, registerVal4)
											registerVal2 = Engine.SessionModeIsMode(CoD.SESSIONMODE_SYSTEMLINK)
											if registerVal2 ~= true then
											end
											registerVal3 = Engine.SessionModeIsMode(CoD.SESSIONMODE_OFFLINE)
											if registerVal3 ~= true then
											end
											registerVal4 = Engine.IsLobbyHost(Enum.LobbyType.LOBBY_TYPE_GAME)
											if registerVal4 then
												if not {} or true then
													registerVal6 = {}
													registerVal7 = {}
													registerVal7.displayText = "MENU_RESTART_LEVEL_CAPS"
													registerVal7.action = RestartGame
													registerVal6.models = registerVal7
													table.insert({}, registerVal6)
												end
											end
											registerVal4 = Engine.IsLobbyHost(Enum.LobbyType.LOBBY_TYPE_GAME)
											if registerVal4 == true then
												registerVal6 = {}
												registerVal7 = {}
												registerVal7.displayText = "MENU_END_GAME_CAPS"
												registerVal7.action = QuitGame_MP
												registerVal6.models = registerVal7
												table.insert({}, registerVal6)
											else
												registerVal6 = {}
												registerVal7 = {}
												registerVal7.displayText = "MENU_QUIT_GAME_CAPS"
												registerVal7.action = QuitGame_MP
												registerVal6.models = registerVal7
												table.insert({}, registerVal6)
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("StartMenuGameOptions", __FUNC_18532_, true)
DataSources.StartMenuGameOptions = registerVal1
registerVal1 = {}
local function __FUNC_19811_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "PlatformControllerImage")
	registerVal2 = Engine.CreateModel(registerVal1, "image")
	if CoD.isPC then
		Engine.SetModelValue(registerVal2, "t7_menu_startmenu_option_pc")
	else
		if CoD.isDurango then
			Engine.SetModelValue(registerVal2, "t7_menu_startmenu_option_xboxone")
		else
			Engine.SetModelValue(registerVal2, "t7_menu_startmenu_option_ps4")
		end
	end
	return registerVal1
end

registerVal1.getModel = __FUNC_19811_
DataSources.PlatformControllerImage = registerVal1
local function __FUNC_19A3B_(arg0)
	local registerVal3 = Engine.GetPlayerObjectives(arg0)
	if registerVal3 == nil then
		return 
	end
	local registerVal6, registerVal7, registerVal8 = CoD.pairsByKeys(registerVal3)
	for index9,value10 in registerVal6, registerVal7, registerVal8 do
		if value10.status ~= "invisible" and value10.objective_desc ~= nil and value10.objective_desc ~= "" then
			if not {}[value10.objective_desc] then
				local registerVal12 = {}
				registerVal12.index = 1.000000
				registerVal12.desc = value10.objective_desc
				if value10.status ~= "done" then
				end
				registerVal12.complete = true
				{}[value10.objective_desc] = registerVal12
			end
			if {}[value10.objective_desc].complete then
				if value10.status ~= "done" then
				end
			end
			{}[value10.objective_desc].complete = true
			if value10.subobjective_desc and value10.status ~= "done" then
				if value10.subobjective_image and value10.subobjective_image ~= "" then
				end
				local registerVal13 = {}
				registerVal13.desc = value10.subobjective_desc
				if value10.status ~= "done" then
				end
				registerVal13.complete = true
				registerVal13.subobjective_image = value10.subobjective_image
				{}[value10.objective_desc].sub_objective = registerVal13
			end
		end
	end
	local function __FUNC_19F1C_(arg0, arg1)
		if not {}[arg1].complete then
			return false
		else
			if not {}[arg0].complete then
				return true
			else
				if {}[arg0].index >= {}[arg1].index then
				end
				return true
			end
		end
	end

	local function __FUNC_1A015_(arg0, arg1, arg2, arg3)
		local registerVal4 = {}
		local registerVal5 = {}
		registerVal5.objective = arg0.desc
		if not arg0.subobjective_image then
		end
		registerVal5.subobjective_image = "blacktransparent"
		registerVal4.models = registerVal5
		registerVal5 = {}
		registerVal5.completed = arg0.complete
		registerVal5.subobjective = arg1
		registerVal5.awaitingOrders = arg2
		registerVal5.spacer = arg3
		registerVal4.properties = registerVal5
		return registerVal4
	end

	local function __FUNC_1A17E_(arg0)
		local registerVal2 = {}
		registerVal2.desc = "CPUI_AWAITING_UPDATE"
		return __FUNC_1A015_(registerVal2, arg0, true, 20.000000)
	end

	local registerVal10, registerVal11, registerVal12 = LUI.IterateTableBySortedKeys({}, __FUNC_19F1C_)
	for index13,value14 in registerVal10, registerVal11, registerVal12 do
		table.insert({}, __FUNC_1A015_(value14))
		if not value14.complete then
			if value14.sub_objective then
				table.insert({}, __FUNC_1A015_(value14.sub_objective, true, nil, 20.000000))
			else
				table.insert({}, __FUNC_1A17E_(true))
			end
		end
	end
	if not true then
		table.insert({}, 1.000000, __FUNC_1A17E_(false))
	end
	return {}
end

local function __FUNC_1A1F4_(arg0, arg1, arg2)
	if arg0[arg0.customDataSourceHelper] then
		return arg0[arg0.customDataSourceHelper][arg1].properties.spacer
	end
end

registerVal1 = ListHelper_SetupDataSource("MissionObjectives", __FUNC_19A3B_, true, nil, nil, __FUNC_1A1F4_)
DataSources.MissionObjectives = registerVal1
registerVal1 = {}
local function __FUNC_1A2C4_(arg0, arg1, arg2)
	arg1.options = {}
	local registerVal3 = {}
	local registerVal4 = {}
	registerVal4.optionDisplay = "OPEN OPTIONS MENU"
	registerVal4.action = OpenOptionsMenu
	registerVal3 = {registerVal4}
	local registerVal5 = Engine.GetGlobalModel()
	registerVal4 = Engine.CreateModel(registerVal5, "OptionsTabSelectionList")
	registerVal5, registerVal6, registerVal7 = ipairs(registerVal3)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal10 = Engine.CreateModel(registerVal4, ("buttonModel_" .. index8))
		arg1.options[index8] = registerVal10
		local registerVal12 = Engine.CreateModel(registerVal10, "displayText")
		Engine.SetModelValue(registerVal12, Engine.Localize(value9.optionDisplay))
		registerVal12 = Engine.CreateModel(registerVal10, "action")
		Engine.SetModelValue(registerVal12, value9.action)
	end
end

registerVal1.prepare = __FUNC_1A2C4_
local function __FUNC_1A542_(arg0)
	return #arg0.options
end

registerVal1.getCount = __FUNC_1A542_
local function __FUNC_1A591_(arg0, arg1, arg2)
	return arg1.options[arg2]
end

registerVal1.getItem = __FUNC_1A591_
DataSources.OptionsTabSelectionList = registerVal1
registerVal1 = {}
local function __FUNC_1A5E9_(arg0, arg1, arg2)
	arg1.options = {}
	if CoD.isCampaign == true then
		if LUI.DEV ~= nil then
			local registerVal4 = {}
			local registerVal5 = {}
			registerVal5.optionDisplay = "MENU_RESTART_MISSION_CAPS"
			registerVal5.action = RestartMission
			local registerVal6 = {}
			registerVal6.optionDisplay = "MENU_RESTART_CHECKPOINT_CAPS"
			registerVal6.action = RestartFromCheckpoint
			local registerVal7 = {}
			registerVal7.optionDisplay = "MENU_END_GAME_CAPS"
			registerVal7.action = QuitGame
			registerVal4 = {registerVal5, registerVal6, registerVal7}
		else
			registerVal4 = {}
			registerVal5 = {}
			registerVal5.optionDisplay = "MENU_RESTART_MISSION_CAPS"
			registerVal5.action = RestartMission
			registerVal6 = {}
			registerVal6.optionDisplay = "MENU_END_GAME_CAPS"
			registerVal6.action = QuitGame
			registerVal4 = {registerVal5, registerVal6}
		else
			registerVal4 = {}
			registerVal5 = {}
			registerVal5.optionDisplay = "MPUI_CHOOSE_CLASS_CAPS"
			registerVal5.action = ChooseClass
			registerVal6 = {}
			registerVal6.optionDisplay = "MPUI_CHANGE_TEAM_BUTTON_CAPS"
			registerVal6.action = ChooseTeam
			registerVal7 = {}
			registerVal7.optionDisplay = "MENU_LEAVE_GAME_CAPS"
			registerVal7.action = QuitGame_MP
			registerVal4 = {registerVal5, registerVal6, registerVal7}
		end
	end
	if not registerVal4 then
		return 
	end
	registerVal5 = Engine.GetGlobalModel()
	registerVal4 = Engine.CreateModel(registerVal5, "StartMenuSelectionModel")
	registerVal5, registerVal6, registerVal7 = ipairs(registerVal4)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal10 = Engine.CreateModel(registerVal4, ("buttonModel_" .. index8))
		arg1.options[index8] = registerVal10
		local registerVal12 = Engine.CreateModel(registerVal10, "displayText")
		Engine.SetModelValue(registerVal12, Engine.Localize(value9.optionDisplay))
		registerVal12 = Engine.CreateModel(registerVal10, "action")
		Engine.SetModelValue(registerVal12, value9.action)
	end
end

registerVal1.prepare = __FUNC_1A5E9_
local function __FUNC_1AA94_(arg0)
	return #arg0.options
end

registerVal1.getCount = __FUNC_1AA94_
local function __FUNC_1AAE5_(arg0, arg1, arg2)
	return arg1.options[arg2]
end

registerVal1.getItem = __FUNC_1AAE5_
DataSources.StartMenuSelectionList = registerVal1
registerVal1 = {}
local function __FUNC_1AB3D_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.GetModel(registerVal2, "storageGlobalRoot")
	return registerVal1
end

registerVal1.getModel = __FUNC_1AB3D_
DataSources.StorageGlobal = registerVal1
registerVal1 = {}
local function __FUNC_1ABED_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.GetModel(registerVal2, "lobbyRoot")
	Engine.CreateModel(registerVal1, "leaderActivity")
	registerVal2 = Engine.GetModel(registerVal1, "lobbyStatusString1")
	if not registerVal2 then
		local registerVal3 = Engine.CreateModel(registerVal1, "lobbyStatusString1")
		Engine.SetModelValue(registerVal3, "")
		registerVal3 = Engine.CreateModel(registerVal1, "lobbyStatusString2")
		Engine.SetModelValue(registerVal3, "")
		local registerVal4 = Engine.CreateModel(registerVal1, "lobbyStatusString3")
		Engine.SetModelValue(registerVal4, "")
	end
	return registerVal1
end

registerVal1.getModel = __FUNC_1ABED_
DataSources.LobbyRoot = registerVal1
registerVal1 = {}
local function __FUNC_1AE23_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "lobbyPromptModel")
	registerVal2 = Engine.CreateModel(registerVal1, "lobbyPromptTitle")
	local registerVal3 = Engine.CreateModel(registerVal1, "lobbyPromptDescription")
	Engine.SetModelValue(registerVal2, CoD.LobbyBase.Prompt.Title)
	Engine.SetModelValue(registerVal3, CoD.LobbyBase.Prompt.Description)
	return registerVal1
end

registerVal1.getModel = __FUNC_1AE23_
DataSources.LobbyPromptTitle = registerVal1
registerVal1 = {}
local function __FUNC_1B030_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "lobbyPlaylist")
	registerVal2 = Engine.CreateModel(registerVal1, "name")
	local registerVal3 = Engine.CreateModel(registerVal1, "kickerText")
	return registerVal1
end

registerVal1.getModel = __FUNC_1B030_
DataSources.LobbyPlaylistName = registerVal1
registerVal1 = {}
local function __FUNC_1B13A_(arg0, arg1, arg2)
	arg1.options = {}
	local registerVal5 = Engine.GetGlobalModel()
	local registerVal4 = Engine.CreateModel(registerVal5, "LobbyPromptSelectionListModel")
	registerVal5, registerVal6, registerVal7 = ipairs(CoD.LobbyBase.Prompt.Options)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal10 = Engine.CreateModel(registerVal4, ("buttonModel_" .. index8))
		arg1.options[index8] = registerVal10
		local registerVal12 = Engine.CreateModel(registerVal10, "displayText")
		Engine.SetModelValue(registerVal12, Engine.Localize(value9.optionDisplay))
		registerVal12 = Engine.CreateModel(registerVal10, "action")
		Engine.SetModelValue(registerVal12, value9.action)
		registerVal12 = Engine.CreateModel(registerVal10, "param")
		Engine.SetModelValue(registerVal12, value9.param)
		registerVal12 = Engine.CreateModel(registerVal10, "customId")
		Engine.SetModelValue(registerVal12, value9.customId)
	end
end

registerVal1.prepare = __FUNC_1B13A_
local function __FUNC_1B472_(arg0)
	return #arg0.options
end

registerVal1.getCount = __FUNC_1B472_
local function __FUNC_1B4C1_(arg0, arg1, arg2)
	return arg1.options[arg2]
end

registerVal1.getItem = __FUNC_1B4C1_
DataSources.LobbyPromptSelectionList = registerVal1
registerVal1 = {}
local function __FUNC_1B519_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "ModalDialog")
	local registerVal3 = Engine.CreateModel(registerVal1, "title")
	Engine.SetModelValue(registerVal3, Engine.Localize(CoD.Menu.ModalDialogInfo.Title))
	registerVal3 = Engine.CreateModel(registerVal1, "description")
	Engine.SetModelValue(registerVal3, Engine.Localize(CoD.Menu.ModalDialogInfo.Description))
	return registerVal1
end

registerVal1.getModel = __FUNC_1B519_
DataSources.ModalDialogData = registerVal1
registerVal1 = {}
local function __FUNC_1B743_(arg0, arg1, arg2)
	arg1.options = {}
	local registerVal6 = Engine.GetGlobalModel()
	local registerVal5 = Engine.CreateModel(registerVal6, "ModalDialog")
	local registerVal4 = Engine.CreateModel(registerVal5, "list")
	registerVal5, registerVal6, registerVal7 = ipairs(CoD.Menu.ModalDialogInfo.Options)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal11 = Engine.CreateModel(registerVal4, ("buttonModel_" .. index8))
		arg1.options[index8] = registerVal11
		registerVal11 = Engine.CreateModel(arg1.options[index8], "displayText")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9))
	end
end

registerVal1.prepare = __FUNC_1B743_
local function __FUNC_1B9A2_(arg0)
	return #arg0.options
end

registerVal1.getCount = __FUNC_1B9A2_
local function __FUNC_1B9F1_(arg0, arg1, arg2)
	return arg1.options[arg2]
end

registerVal1.getItem = __FUNC_1B9F1_
DataSources.ModalDialogDataList = registerVal1
registerVal1 = {}
local function __FUNC_1BA49_(arg0, arg1, arg2)
	arg1.options = {}
	local registerVal6 = Engine.GetGlobalModel()
	local registerVal5 = Engine.CreateModel(registerVal6, "ModalDialog")
	local registerVal4 = Engine.CreateModel(registerVal5, "list")
	registerVal5, registerVal6, registerVal7 = ipairs(CoD.Menu.ModalDialogInfo.Options)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal11 = Engine.CreateModel(registerVal4, ("buttonModel_" .. index8))
		arg1.options[index8] = registerVal11
		registerVal11 = Engine.CreateModel(arg1.options[index8], "displayText")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9.displayText))
		registerVal11 = Engine.CreateModel(arg1.options[index8], "displayImage")
		Engine.SetModelValue(registerVal11, value9.displayImage)
		registerVal11 = Engine.CreateModel(arg1.options[index8], "displayDesc")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9.displayDesc))
	end
end

registerVal1.prepare = __FUNC_1BA49_
local function __FUNC_1BD91_(arg0)
	return #arg0.options
end

registerVal1.getCount = __FUNC_1BD91_
local function __FUNC_1BDE1_(arg0, arg1, arg2)
	return arg1.options[arg2]
end

registerVal1.getItem = __FUNC_1BDE1_
DataSources.SideModalDialogDataList = registerVal1
registerVal1 = {}
local function __FUNC_1BE39_(arg0)
	Dvar.partyPrivacyEnabled:set(true)
	local registerVal1 = Engine.GetPartyPrivacy()
	local registerVal2 = Engine.GetLobbyMaxClients(Enum.LobbyType.LOBBY_TYPE_PRIVATE)
	local registerVal3 = Engine.IsLobbyActive(Enum.LobbyType.LOBBY_TYPE_GAME)
	if registerVal3 then
		registerVal3 = Engine.GetLobbyMaxClients(Enum.LobbyType.LOBBY_TYPE_GAME)
	end
	local registerVal4 = Engine.GetGlobalModel()
	registerVal3 = Engine.CreateModel(registerVal4, "PartyPrivacy")
	local registerVal5 = Engine.CreateModel(registerVal3, "privacy")
	Engine.SetModelValue(registerVal5, registerVal1)
	registerVal5 = Engine.CreateModel(registerVal3, "privacyStatus")
	Engine.SetModelValue(registerVal5, PartyPrivacy(registerVal1))
	registerVal5 = Engine.CreateModel(registerVal3, "maxPlayers")
	Engine.SetModelValue(registerVal5, registerVal3)
	return registerVal3
end

registerVal1.getModel = __FUNC_1BE39_
DataSources.PartyPrivacy = registerVal1
registerVal1 = {}
local function __FUNC_1C184_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	return Engine.GetModel(registerVal2, "MapVote")
end

registerVal1.getModel = __FUNC_1C184_
DataSources.MapVote = registerVal1
registerVal1 = {}
local function __FUNC_1C22B_(arg0, arg1, arg2)
	local registerVal3 = Engine.GetModelValue(arg1.friendsCountUIModel)
	local registerVal5 = Engine.GetGlobalModel()
	local registerVal4 = Engine.CreateModel(registerVal5, "lobbyFriends")
	local registerVal6 = Engine.CreateModel(registerVal4, "onlineCount")
	Engine.SetModelValue(registerVal6, registerVal3)
	registerVal6 = Engine.CreateModel(registerVal4, "moreCount")
	Engine.SetModelValue(registerVal6, registerVal3)
	DataSources.LobbyFriendsAndGroups.onlineFriendsCount = registerVal3
end

registerVal1.updateOnlineCount = __FUNC_1C22B_
local function __FUNC_1C432_(arg0, arg1, arg2)
	if CoD.isModeSelected == true then
	end
	arg1.listItems = {}
	if arg1.countSubscription then
		arg1:removeSubscription(arg1.countSubscription)
	end
	if arg1.lobbyListCountSubscription then
		arg1:removeSubscription(arg1.lobbyListCountSubscription)
	end
	local registerVal5 = CoD.Friends.GetRootUIModel(arg0)
	arg1.friendsUIModel = registerVal5
	registerVal5 = CoD.Friends.GetCountUIModel(arg0)
	arg1.friendsCountUIModel = registerVal5
	if arg1.friendsListCountSubscription then
		arg1:removeSubscription(arg1.friendsListCountSubscription)
	end
	registerVal5 = CoD.Friends.GetCountUIModel(arg0)
	local function __FUNC_1D08D_(arg3)
		DataSources.LobbyFriendsAndGroups.updateOnlineCount(arg0, arg1, arg2)
		arg1:updateDataSource()
	end

	local registerVal6 = arg1:subscribeToModel(registerVal5, __FUNC_1D08D_, false)
	arg1.friendsListCountSubscription = registerVal6
	if arg1.friendsUpdateSubscription then
		arg1:removeSubscription(arg1.friendsUpdateSubscription)
	end
	registerVal6 = CoD.Friends.GetUpdateUIModel(arg0)
	if nil ~= registerVal6 then
		local function __FUNC_1D159_(arg0)
			arg1:updateDataSource()
		end

		local registerVal7 = arg1:subscribeToModel(registerVal6, __FUNC_1D159_, false)
		arg1.friendsUpdateSubscription = registerVal7
	end
	DataSources.LobbyFriendsAndGroups.updateOnlineCount(arg0, arg1, arg2)
	registerVal7 = Engine.GetModelValue(arg1.friendsCountUIModel)
	for index8=1.000000, registerVal7, 1.000000 do
		local registerVal12 = CoD.Friends.GetItemUIModel(arg1.friendsUIModel, index8)
		local registerVal13 = Engine.GetModelValue(Engine.GetModel(registerVal12, "hasRank"))
		CoD.Friends.GetCount(arg0)
		if registerVal13 == 1.000000 then
			local registerVal15 = Engine.CreateModel(registerVal12, "rankShown")
			Engine.SetModelValue(registerVal15, 1.000000)
		else
			registerVal15 = Engine.CreateModel(registerVal12, "rankShown")
			Engine.SetModelValue(registerVal15, 0.000000)
		end
		registerVal15 = Engine.CreateModel(registerVal12, "activity")
		Engine.SetModelValue(registerVal15, Enum.PresenceActivity.PRESENCE_ACTIVITY_MENU_INLOBBY)
		registerVal15 = Engine.CreateModel(registerVal12, "activityString")
		Engine.SetModelValue(registerVal15, Engine.Localize(CoD.Presence.ActivityStrings[Enum.PresenceActivity.PRESENCE_ACTIVITY_MENU_INLOBBY]))
		local registerVal14 = Engine.GetModelValue(Engine.GetModel(registerVal12, "xuid"))
		local registerVal17 = {}
		registerVal17.model = registerVal12
		registerVal17.isFriendItem = true
		registerVal17.xuid = registerVal14
		table.insert({}, registerVal17)
	end
	local registerVal10 = Engine.GetGlobalModel()
	local registerVal9 = Engine.GetModel(registerVal10, "unifiedGroupMembersListRoot")
	if registerVal9 ~= nil then
		arg1.groupMembersUIModel = registerVal9
		registerVal10 = Engine.GetModel(arg1.groupMembersUIModel, "count")
		arg1.groupMembersCountUIModel = registerVal10
		if arg1.groupsListCountSubscription then
			arg1:removeSubscription(arg1.groupsListCountSubscription)
		end
		local function __FUNC_1D1AA_(arg3)
			DataSources.LobbyFriendsAndGroups.updateOnlineCount(arg0, arg1, arg2)
			arg1:updateDataSource()
		end

		registerVal10 = arg1:subscribeToModel(arg1.groupMembersCountUIModel, __FUNC_1D1AA_, false)
		arg1.groupsListCountSubscription = registerVal10
		DataSources.LobbyFriendsAndGroups.updateOnlineCount(arg0, arg1, arg2)
		registerVal10 = Engine.GetModelValue(arg1.groupMembersCountUIModel)
		for index11=1.000000, registerVal10, 1.000000 do
			registerVal15 = Engine.GetModel(arg1.groupMembersUIModel, ("member" .. (index11 - 1.000000)))
			local registerVal16 = Engine.GetModelValue(Engine.GetModel(registerVal15, "hasRank"))
			registerVal17 = Engine.GetModelValue(Engine.GetModel(registerVal15, "xuid"))
			for index19=1.000000, #"xuid", 1.000000 do
				local registerVal24 = Engine.GetModelValue(Engine.GetModel({}[index19].model, "xuid"))
				if registerVal24 == registerVal17 then
				else
				end
			end
			if not true then
				if registerVal16 == 1.000000 then
					local registerVal20 = Engine.CreateModel(registerVal15, "rankShown")
					Engine.SetModelValue(registerVal20, 1.000000)
				else
					registerVal20 = Engine.CreateModel(registerVal15, "rankShown")
					Engine.SetModelValue(registerVal20, 0.000000)
				end
				registerVal20 = Engine.CreateModel(registerVal15, "isJoinable")
				Engine.SetModelValue(registerVal20, 0.000000)
				local registerVal21 = {}
				registerVal21.model = registerVal15
				registerVal21.isGroupsItem = true
				registerVal21.xuid = registerVal17
				table.insert({}, registerVal21)
			end
		end
	end
	local registerVal11, registerVal12, registerVal13 = ipairs({})
	for index14,value15 in registerVal11, registerVal12, registerVal13 do
		table.insert(arg1.listItems, value15)
	end
	registerVal11, registerVal12, registerVal13 = ipairs({})
	for index14,value15 in registerVal11, registerVal12, registerVal13 do
		table.insert(arg1.listItems, value15)
	end
end

registerVal1.prepare = __FUNC_1C432_
local function __FUNC_1D275_(arg0)
	return #arg0.listItems
end

registerVal1.getCount = __FUNC_1D275_
local function __FUNC_1D2C7_(arg0, arg1, arg2)
	return arg1.listItems[arg2].model
end

registerVal1.getItem = __FUNC_1D2C7_
local function __FUNC_1D33A_(arg0, arg1)
	return arg0.listItems[arg1]
end

registerVal1.getCustomPropertiesForItem = __FUNC_1D33A_
DataSources.LobbyFriendsAndGroups = registerVal1
registerVal1 = {}
local function __FUNC_1D393_(arg0, arg1, arg2)
	local registerVal3 = Engine.GetQuickJoinPlayersCount(arg0, Enum.PresenceFilter.PRESENCE_FILTER_ONLINE_AND_IN_TITLE)
	local registerVal7 = Engine.GetGlobalModel()
	local registerVal6 = Engine.CreateModel(registerVal7, "lobbyFriends")
	local registerVal8 = Engine.CreateModel(registerVal6, "onlineCount")
	Engine.SetModelValue(registerVal8, registerVal3)
	Engine.SetModelValue(arg1.countModel, registerVal3)
	Engine.SetModelValue(arg1.visibleCountModel, #arg1.players)
	registerVal8 = Engine.CreateModel(registerVal6, "moreCount")
	Engine.SetModelValue(registerVal8, (registerVal3 - #arg1.players))
end

registerVal1.updateCounts = __FUNC_1D393_
local function __FUNC_1D627_(arg0, arg1, arg2)
	if CoD.isModeSelected == true then
	end
	arg1.listItems = {}
	if arg1.countSubscription then
		arg1:removeSubscription(arg1.countSubscription)
	end
	if arg1.lobbyListCountSubscription then
		arg1:removeSubscription(arg1.lobbyListCountSubscription)
	end
	local registerVal5 = Engine.GetGlobalModel()
	local registerVal4 = Engine.GetModel(registerVal5, "lobbyRoot.clientList.count")
	arg1.lobbyClientListCountModel = registerVal4
	if arg1.lobbyClientListCountModel ~= nil then
		registerVal4 = Engine.GetModelValue(arg1.lobbyClientListCountModel)
		arg1.lobbyClientListCount = registerVal4
		if arg1.lobbyClientListCount == 0.000000 then
			arg1.lobbyClientListCount = 1.000000
		else
			arg1.lobbyClientListCount = 1.000000
		end
	end
	registerVal4 = Engine.DvarInt(nil, "live_social_quickjoin_count")
	arg1.maxElementsInList = registerVal4
	registerVal5 = Engine.GetGlobalModel()
	registerVal4 = Engine.GetModel(registerVal5, "socialRoot")
	registerVal5 = Engine.CreateModel(registerVal4, "quickJoin")
	arg1.socialSubModel = registerVal5
	registerVal5 = Engine.CreateModel(arg1.socialSubModel, "count")
	arg1.countModel = registerVal5
	registerVal5 = Engine.CreateModel(arg1.socialSubModel, "visibleCount")
	arg1.visibleCountModel = registerVal5
	arg1.players = {}
	registerVal5 = CoD.SocialUtility.GetEmptyPlayerInfo()
	for index6=1.000000, arg1.maxElementsInList, 1.000000 do
		arg1.players[index6] = {}
		local registerVal11 = Engine.CreateModel(arg1.socialSubModel, ("player_" .. index6))
		arg1.players[index6].root = registerVal11
		registerVal11 = Engine.CreateModel(arg1.players[index6].root, "model")
		arg1.players[index6].model = registerVal11
		CoD.SocialUtility.SetDefaultPlayerProperties(arg1.players[index6])
		registerVal11, registerVal12, registerVal13 = pairs(registerVal5)
		for index14,value15 in registerVal11, registerVal12, registerVal13 do
			local registerVal16 = Engine.CreateModel(arg1.players[index6].model, index14)
		end
		registerVal11 = Engine.CreateModel(arg1.players[index6].model, "clanTagAndGamertag")
		registerVal11 = Engine.CreateModel(arg1.players[index6].model, "rank")
		registerVal11 = Engine.CreateModel(arg1.players[index6].model, "rankIcon")
		registerVal11 = Engine.CreateModel(arg1.players[index6].model, "rankString")
		registerVal11 = Engine.CreateModel(arg1.players[index6].model, "isJoinable")
	end
	if 13.000000 < arg1.lobbyClientListCount then
		arg1.numFreeSlotsInList = 0.000000
	else
		arg1.numFreeSlotsInList = (16.000000 - arg1.lobbyClientListCount)
	end
	DataSources.LobbyQuickJoin.updateCounts(arg0, arg1, arg2)
	registerVal12 = {}
	registerVal12.filter = Enum.PresenceFilter.PRESENCE_FILTER_ONLINE_AND_IN_TITLE
	local registerVal6 = CoD.SocialUtility.UpdateModelsHelper(arg0, arg1, 0.000000, arg1.numFreeSlotsInList, arg1.maxElementsInList, registerVal12, Engine.GetQuickJoinPlayers, Engine.GetQuickJoinPlayersPartyInfo)
	arg1.numPlayers = registerVal6
	for index6=1.000000, #arg1.players, 1.000000 do
		local registerVal10 = Engine.GetModelValue(Engine.GetModel(arg1.players[index6].model, "mpRank"))
		registerVal12 = Engine.GetModel(arg1.players[index6].model, "rank")
		Engine.SetModelValue(registerVal12, registerVal10)
		registerVal11 = Engine.GetModelValue(Engine.GetModel(arg1.players[index6].model, "mpRankIcon"))
		registerVal13 = Engine.GetModel(arg1.players[index6].model, "rankIcon")
		Engine.SetModelValue(registerVal13, registerVal11)
		if registerVal10 then
			registerVal12 = Engine.GetModelValue(Engine.GetModel(arg1.players[index6].model, "mpPrestige"))
			local registerVal14 = math.max(0.000000, (registerVal10 - 1.000000))
			registerVal13 = CoD.GetRankName(registerVal14, registerVal12, Enum.eModes.MODE_MULTIPLAYER)
			local registerVal15 = Engine.GetModel(arg1.players[index6].model, "rankString")
			Engine.SetModelValue(registerVal15, registerVal13)
		end
		registerVal12 = Engine.GetModelValue(Engine.GetModel(arg1.players[index6].model, "fullname"))
		registerVal14 = Engine.GetModel(arg1.players[index6].model, "clanTagAndGamertag")
		Engine.SetModelValue(registerVal14, registerVal12)
		registerVal13 = Engine.GetModelValue(Engine.GetModel(arg1.players[index6].model, "activity"))
		registerVal14 = Engine.GetModelValue(Engine.GetModel(arg1.players[index6].model, "partySize"))
		registerVal15 = GetPresencePartyActivityString(registerVal13, registerVal14)
		local registerVal17 = Engine.CreateModel(arg1.players[index6].model, "partyActivityString")
		Engine.SetModelValue(registerVal17, registerVal15)
		registerVal16 = Engine.GetModelValue(Engine.GetModel(arg1.players[index6].model, "joinable"))
		if registerVal16 == Enum.LobbyJoinable.LOBBY_JOINABLE_YES or registerVal16 == Enum.LobbyJoinable.LOBBY_JOINABLE_YES_FRIENDS_ONLY then
		end
		local registerVal18 = CoD.GetMapIDFromMapUniqueID(arg1.players[index6].properties.mapid)
		if 1.000000 == 1.000000 and arg1.players[index6].properties.mapid and registerVal18 then
			local registerVal19 = Engine.GetDLCBitForMapName(registerVal18)
			local registerVal20 = Engine.GetDLCBits()
			local registerVal21 = IsDvarValueEqualTo("ui_freeDLC1", "1")
			if registerVal21 then
			end
			registerVal21 = CoD.BitUtility.IsBitwiseAndNonZero(registerVal19, (registerVal20 | Enum.ContentFlagBits.CONTENT_DLC1))
			if not registerVal21 then
			end
		end
		registerVal19 = Engine.GetModel(arg1.players[index6].model, "isJoinable")
		Engine.SetModelValue(registerVal19, 0.000000)
		registerVal19 = Engine.CreateModel(arg1.players[index6].model, "quickjoinListMember")
		Engine.SetModelValue(registerVal19, true)
	end
	if arg1.lobbyClientListCountSubscription then
		arg1:removeSubscription(arg1.lobbyClientListCountSubscription)
	end
	local function __FUNC_1ECA2_()
		DataSources.LobbyQuickJoin.updateCounts(arg0, arg1, arg2)
		arg1:updateDataSource(nil, true)
		local registerVal0 = Engine.LobbyGetSessionClients(Enum.LobbyModule.LOBBY_MODULE_CLIENT, Enum.LobbyType.LOBBY_TYPE_PRIVATE)
		local registerVal1, registerVal2, registerVal3 = ipairs(registerVal0.sessionClients)
		for index4,value5 in registerVal1, registerVal2, registerVal3 do
			for index6=1.000000, #arg1.players, 1.000000 do
				local registerVal10 = Engine.GetModelValue(Engine.GetModel(arg1.players[index6].model, "xuid"))
				if registerVal10 == value5.xuid then
					if Engine.OnlineSetInternalEvent ~= nil then
						Engine.OnlineSetInternalEvent(0.000000, Enum.LiveInternalEvent.LIVE_INTERNAL_EVENT_QUICKJOIN_PRESENCE_UPDATED)
					else
					end
				end
			end
		end
	end

	registerVal6 = arg1:subscribeToModel(arg1.lobbyClientListCountModel, __FUNC_1ECA2_, false)
	arg1.lobbyClientListCountSubscription = registerVal6
	local registerVal7 = Engine.GetGlobalModel()
	registerVal6 = Engine.GetModel(registerVal7, "socialRoot.friends.update")
	if arg1.socialFriendsUpdateSubscription then
		arg1:removeSubscription(arg1.socialFriendsUpdateSubscription)
	end
	local function __FUNC_1F04D_()
		DataSources.LobbyQuickJoin.updateCounts(arg0, arg1, arg2)
		arg1:updateDataSource(nil, true)
	end

	registerVal7 = arg1:subscribeToModel(registerVal6, __FUNC_1F04D_, false)
	arg1.socialFriendsUpdateSubscription = registerVal7
	local registerVal8 = Engine.GetModelForController(arg0)
	registerVal7 = Engine.CreateModel(registerVal8, "groups.quickJoinMembersUpdate", true)
	if arg1.socialGroupsUpdateSubscription then
		arg1:removeSubscription(arg1.socialGroupsUpdateSubscription)
	end
	local function __FUNC_1F115_()
		DataSources.LobbyQuickJoin.updateCounts(arg0, arg1, arg2)
		arg1:updateDataSource()
	end

	registerVal8 = arg1:subscribeToModel(registerVal7, __FUNC_1F115_, false)
	arg1.socialGroupsUpdateSubscription = registerVal8
	local registerVal9 = Engine.GetGlobalModel()
	registerVal8 = Engine.CreateModel(registerVal9, "socialRoot.quickjoin.update")
	if arg1.socialQuickjoinUpdateSubscription then
		arg1:removeSubscription(arg1.socialQuickjoinUpdateSubscription)
	end
	local function __FUNC_1F1D5_()
		DataSources.LobbyQuickJoin.updateCounts(arg0, arg1, arg2)
		arg1:updateDataSource(nil, true)
	end

	registerVal9 = arg1:subscribeToModel(registerVal8, __FUNC_1F1D5_, false)
	arg1.socialQuickjoinUpdateSubscription = registerVal9
end

registerVal1.prepare = __FUNC_1D627_
local function __FUNC_1F29D_(arg0)
	return math.min(arg0.maxElementsInList, arg0.numPlayers)
end

registerVal1.getCount = __FUNC_1F29D_
local function __FUNC_1F342_(arg0, arg1, arg2)
	return arg1.players[arg2].model
end

registerVal1.getItem = __FUNC_1F342_
local function __FUNC_1F3B4_(arg0, arg1)
	return arg0.players[arg1].properties
end

registerVal1.getCustomPropertiesForItem = __FUNC_1F3B4_
DataSources.LobbyQuickJoin = registerVal1
registerVal1 = {}
local function __FUNC_1F42D_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "lobbyRoot.clientList")
	arg1.clientListModel = registerVal3
	registerVal4 = Engine.GetGlobalModel()
	registerVal3 = Engine.GetModel(registerVal4, "lobbyRoot")
	arg1.lobbyRootModel = registerVal3
	if arg1.gameClientUpdateSubscription then
		arg1:removeSubscription(arg1.gameClientUpdateSubscription)
	end
	local registerVal5 = Engine.GetModel(arg1.lobbyRootModel, "gameClient.update")
	local function __FUNC_1F7E3_()
		CoD.LobbyUtility.UpdateLobbyList(arg1)
		local registerVal0 = Engine.GetModelValue(Engine.CreateModel(arg1.clientListModel, "count"))
		arg1:setVerticalCount(registerVal0, true)
	end

	registerVal3 = arg1:subscribeToModel(registerVal5, __FUNC_1F7E3_, false)
	arg1.gameClientUpdateSubscription = registerVal3
	if arg1.privateClientUpdateSubscription then
		arg1:removeSubscription(arg1.privateClientUpdateSubscription)
	end
	registerVal5 = Engine.GetModel(arg1.lobbyRootModel, "privateClient.update")
	local function __FUNC_1F93A_()
		CoD.LobbyUtility.UpdateLobbyList(arg1)
		local registerVal0 = Engine.GetModelValue(Engine.CreateModel(arg1.clientListModel, "count"))
		arg1:setVerticalCount(registerVal0, true)
	end

	registerVal3 = arg1:subscribeToModel(registerVal5, __FUNC_1F93A_, false)
	arg1.privateClientUpdateSubscription = registerVal3
	if arg1.lobbyNavSubscription then
		arg1:removeSubscription(arg1.lobbyNavSubscription)
	end
	registerVal5 = Engine.GetModel(arg1.lobbyRootModel, "lobbyNav")
	local function __FUNC_1FA92_()
		CoD.LobbyUtility.UpdateLobbyList(arg1)
		local registerVal0 = Engine.GetModelValue(Engine.CreateModel(arg1.clientListModel, "count"))
		arg1:setVerticalCount(registerVal0)
	end

	registerVal3 = arg1:subscribeToModel(registerVal5, __FUNC_1FA92_, false)
	arg1.lobbyNavSubscription = registerVal3
	CoD.LobbyUtility.UpdateLobbyList(arg1)
end

registerVal1.prepare = __FUNC_1F42D_
local function __FUNC_1FBE6_(arg0)
	local registerVal1 = Engine.GetModelValue(Engine.CreateModel(arg0.clientListModel, "count"))
	return registerVal1
end

registerVal1.getCount = __FUNC_1FBE6_
local function __FUNC_1FCB0_(arg0, arg1, arg2)
	return Engine.GetModel(arg1.clientListModel, arg2)
end

registerVal1.getItem = __FUNC_1FCB0_
DataSources.LobbyList = registerVal1
registerVal1 = {}
local function __FUNC_1FD3F_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.GetModel(registerVal4, "lobbyRoot")
	registerVal4 = Engine.GetModel(registerVal3, "privateHost")
	arg1.baseModel = registerVal4
	registerVal4 = Engine.GetModel(arg1.baseModel, "count")
	arg1.countModel = registerVal4
	registerVal4 = Engine.GetModel(arg1.baseModel, "update")
	arg1.updateModel = registerVal4
	if arg1.countSubscription then
		arg1:removeSubscription(arg1.countSubscription)
	end
	local function __FUNC_1FF5E_()
		arg1:updateDataSource()
	end

	registerVal4 = arg1:subscribeToModel(arg1.countModel, __FUNC_1FF5E_, false)
	arg1.countSubscription = registerVal4
end

registerVal1.prepare = __FUNC_1FD3F_
local function __FUNC_1FFAE_(arg0)
	return Engine.GetModelValue(arg0.countModel)
end

registerVal1.getCount = __FUNC_1FFAE_
local function __FUNC_20037_(arg0, arg1, arg2)
	return Engine.GetModel(arg1.baseModel, ("member" .. (arg2 - 1.000000)))
end

registerVal1.getItem = __FUNC_20037_
DataSources.LobbyPrivateHostMembers = registerVal1
registerVal1 = {}
local function __FUNC_200DA_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.GetModel(registerVal4, "lobbyRoot")
	registerVal4 = Engine.GetModel(registerVal3, "gameHost")
	arg1.baseModel = registerVal4
	registerVal4 = Engine.GetModel(arg1.baseModel, "count")
	arg1.countModel = registerVal4
	registerVal4 = Engine.GetModel(arg1.baseModel, "update")
	arg1.updateModel = registerVal4
	if arg1.countSubscription then
		arg1:removeSubscription(arg1.countSubscription)
	end
	local function __FUNC_202F7_()
		arg1:updateDataSource()
	end

	registerVal4 = arg1:subscribeToModel(arg1.countModel, __FUNC_202F7_, false)
	arg1.countSubscription = registerVal4
end

registerVal1.prepare = __FUNC_200DA_
local function __FUNC_20346_(arg0)
	return Engine.GetModelValue(arg0.countModel)
end

registerVal1.getCount = __FUNC_20346_
local function __FUNC_203CF_(arg0, arg1, arg2)
	return Engine.GetModel(arg1.baseModel, ("member" .. (arg2 - 1.000000)))
end

registerVal1.getItem = __FUNC_203CF_
DataSources.LobbyGameHostMembers = registerVal1
local function __FUNC_20472_(arg0)
	local registerVal3 = Engine.GetGlobalModel()
	local registerVal2 = Engine.GetModel(registerVal3, "lobbyRoot")
	registerVal3 = Engine.GetModel(registerVal2, "lobbyNav")
	local registerVal4 = Engine.GetModelValue(registerVal3)
	local registerVal5 = CoD.LobbyMenus.AddButtonsForTarget(arg0, registerVal4)
	CoD.perController[arg0].updateNewBreadcrumbs = false
	local registerVal7, registerVal8, registerVal9 = ipairs(registerVal5)
	for index10,value11 in registerVal7, registerVal8, registerVal9 do
		local registerVal14 = {}
		local registerVal15 = {}
		local registerVal16 = Engine.Localize(value11.optionDisplay)
		registerVal15.displayText = registerVal16
		registerVal15.customId = value11.customId
		registerVal15.warning = value11.warning
		registerVal14.models = registerVal15
		registerVal15 = {}
		registerVal15.disabled = value11.disabled
		registerVal15.action = value11.action
		registerVal15.actionParam = value11.param
		registerVal15.isLastButtonInGroup = value11.isLastButtonInGroup
		registerVal15.selectIndex = value11.selected
		registerVal15.isBreadcrumbNew = value11.isBreadcrumbNew
		registerVal15.requiredChunk = value11.requiredChunk
		registerVal15.starterPackUpgrade = value11.starterPackUpgrade
		registerVal15.unloadMod = value11.unloadMod
		registerVal14.properties = registerVal15
		table.insert({}, registerVal14)
	end
	if #registerVal7 <= 0.000000 then
		registerVal9 = {}
		local registerVal10 = {}
		registerVal10.displayText = ""
		registerVal9.models = registerVal10
		registerVal10 = {}
		registerVal10.disabled = false
		registerVal10.fake = true
		registerVal9.properties = registerVal10
		table.insert({}, registerVal9)
	end
	return {}
end

local function __FUNC_20953_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.GetModel(registerVal4, "lobbyRoot")
	registerVal4 = Engine.GetModel(registerVal3, "lobbyNav")
	if arg1.lobbyNavSubscription then
		arg1:removeSubscription(arg1.lobbyNavSubscription)
	end
	local function __FUNC_210C6_()
		arg1:clearSavedActiveIndex()
		arg1:clearSavedState()
		arg1:updateDataSource(true, false)
		if arg1 then
			local registerVal0 = arg1:getParent()
			registerVal0 = arg1:getParent()
			registerVal0 = registerVal0:getParent()
			registerVal0 = arg1:getParent()
			registerVal0 = registerVal0:getParent()
			registerVal0 = registerVal0:getParent()
			local registerVal1 = arg1:getParent()
			registerVal1 = registerVal1:getParent()
			registerVal1 = registerVal1:getParent()
			registerVal0 = IsMenuInState(registerVal1, "Right")
			if registerVal0 and registerVal0 and  or not registerVal0 then
				local registerVal2 = {}
				registerVal2.name = "gain_focus"
				registerVal2.controller = arg0
				arg1:processEvent(registerVal2)
			end
		end
	end

	local registerVal5 = arg1:subscribeToModel(registerVal4, __FUNC_210C6_, false)
	arg1.lobbyNavSubscription = registerVal5
	local registerVal6 = Engine.GetGlobalModel()
	registerVal5 = Engine.GetModel(registerVal6, "lobbyRoot.lobbyNetworkMode")
	if arg1.networkModeSub then
		arg1:removeSubscription(arg1.networkModeSub)
	end
	local function __FUNC_2129F_()
		arg1:updateDataSource()
	end

	registerVal6 = arg1:subscribeToModel(registerVal5, __FUNC_2129F_, false)
	arg1.networkModeSub = registerVal6
	local registerVal7 = Engine.GetGlobalModel()
	registerVal6 = Engine.CreateModel(registerVal7, "MapVote.timerActive")
	if arg1.timerActiveSubscription then
		arg1:removeSubscription(arg1.timerActiveSubscription)
	end
	local function __FUNC_212EE_()
		arg1:updateDataSource()
	end

	registerVal7 = arg1:subscribeToModel(registerVal6, __FUNC_212EE_, false)
	arg1.timerActiveSubscription = registerVal7
	local registerVal8 = Engine.GetGlobalModel()
	registerVal7 = Engine.GetModel(registerVal8, "lobbyRoot.gameClient.update")
	if arg1.gameClientUpdateSubscription then
		arg1:removeSubscription(arg1.gameClientUpdateSubscription)
	end
	local function __FUNC_2133E_()
		arg1:updateDataSource(nil, true, true)
	end

	registerVal8 = arg1:subscribeToModel(registerVal7, __FUNC_2133E_, false)
	arg1.gameClientUpdateSubscription = registerVal8
	local registerVal9 = Engine.GetGlobalModel()
	registerVal8 = Engine.CreateModel(registerVal9, "lobbyRoot.privateClient.isHost")
	if arg1.lobbyHostSub then
		arg1:removeSubscription(arg1.lobbyHostSub)
	end
	local function __FUNC_2139A_()
		arg1:updateDataSource()
	end

	registerVal9 = arg1:subscribeToModel(registerVal8, __FUNC_2139A_, false)
	arg1.lobbyHostSub = registerVal9
	local registerVal10 = Engine.GetGlobalModel()
	registerVal9 = Engine.CreateModel(registerVal10, "lobbyRoot.gameClient.isHost")
	if arg1.lobbyGameHostSub then
		arg1:removeSubscription(arg1.lobbyGameHostSub)
	end
	local function __FUNC_213EA_()
		arg1:updateDataSource()
	end

	registerVal10 = arg1:subscribeToModel(registerVal9, __FUNC_213EA_, false)
	arg1.lobbyGameHostSub = registerVal10
	local registerVal11 = Engine.GetGlobalModel()
	registerVal10 = Engine.CreateModel(registerVal11, "lobbyRoot.theaterDataDownloaded")
	if arg1.theaterDataDownloadedSub then
		arg1:removeSubscription(arg1.theaterDataDownloadedSub)
	end
	local function __FUNC_2143A_()
		arg1:updateDataSource()
	end

	registerVal11 = arg1:subscribeToModel(registerVal10, __FUNC_2143A_, false)
	arg1.theaterDataDownloadedSub = registerVal11
	local registerVal12 = Engine.GetGlobalModel()
	registerVal11 = Engine.CreateModel(registerVal12, "MapVote.mapVoteMapNext")
	if arg1.mapChangedSub then
		arg1:removeSubscription(arg1.mapChangedSub)
	end
	local function __FUNC_2148A_()
		CoD.LobbyUtility.UpdateMapInstallStatusLine(arg1)
		local registerVal0 = Engine.IsCampaignGame()
		if registerVal0 then
			arg1:updateDataSource()
		end
	end

	registerVal12 = arg1:subscribeToModel(registerVal11, __FUNC_2148A_, false)
	arg1.mapChangedSub = registerVal12
	local registerVal13 = Engine.GetGlobalModel()
	registerVal12 = Engine.CreateModel(registerVal13, "lobbyRoot.lobbyButtonUpdate")
	if arg1.updateButtonsModelSub then
		arg1:removeSubscription(arg1.updateButtonsModelSub)
	end
	arg1.wasCodCaster = false
	arg1.oldTeamAssignment = 0.000000
	arg1.wasMissingMapTextShowing = false
	local function __FUNC_21589_()
		local registerVal0 = IsCodCaster(arg0)
		local registerVal1 = Engine.GetGametypeSetting("teamAssignment")
		if registerVal0 ~= arg1.wasCodCaster then
			arg1.wasCodCaster = registerVal0
		end
		if arg1.oldTeamAssignment ~= registerVal1 then
			arg1.oldTeamAssignment = registerVal1
		end
		if CoD.perController[arg0].updateNewBreadcrumbs == true then
			CoD.perController[arg0].updateNewBreadcrumbs = false
		end
		if CoD.isZombie == true then
			local registerVal3 = LobbyData.GetLobbyNav()
			if registerVal3 == LobbyData.UITargets.UI_ZMLOBBYONLINE.id or registerVal3 == LobbyData.UITargets.UI_ZMLOBBYONLINECUSTOMGAME.id then
			end
		end
		if CoD.perController[arg0].gamesettingsUpdated == true then
			CoD.perController[arg0].gamesettingsUpdated = false
		end
		if CoD.perController[arg0].localClientChanged == true then
			CoD.perController[arg0].localClientChanged = false
		end
		local registerVal4 = CoD.LobbyUtility.IsSomePlayersDoNotHaveMapTextShowing()
		if arg1.wasMissingMapTextShowing ~= registerVal4 then
			registerVal4 = CoD.LobbyUtility.IsSomePlayersDoNotHaveMapTextShowing()
			arg1.wasMissingMapTextShowing = registerVal4
		end
		if true then
			arg1:updateDataSource()
		end
	end

	registerVal13 = arg1:subscribeToModel(registerVal12, __FUNC_21589_, false)
	arg1.updateButtonsModelSub = registerVal13
end

local function __FUNC_21A60_(arg0, arg1, arg2)
	if arg0.LobbyButtons[arg1].properties.isLastButtonInGroup then
		return 9.000000
	end
end

registerVal1 = ListHelper_SetupDataSource("LobbyButtons", __FUNC_20472_, nil, nil, __FUNC_20953_, __FUNC_21A60_)
DataSources.LobbyButtons = registerVal1
registerVal1 = {}
local function __FUNC_21B18_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	return Engine.CreateModel(registerVal2, "socialRoot")
end

registerVal1.getModel = __FUNC_21B18_
DataSources.SocialRoot = registerVal1
registerVal1 = {}
local function __FUNC_21BC5_(arg0)
	local registerVal1 = Engine.GetModelForController(arg0)
	local registerVal2 = Engine.CreateModel(registerVal1, "socialPlayerInfo")
	local registerVal3 = Engine.CreateModel(registerVal2, "identityBadge")
	local registerVal4 = Engine.CreateModel(registerVal1, "Social.selectedFriendXUID")
	local registerVal5 = Engine.GetModelValue(registerVal4, "xuid")
	local registerVal6 = Engine.CreateModel(registerVal1, "Social.selectedFriendGamertag")
	local registerVal7 = Engine.GetModelValue(registerVal6)
	if registerVal5 ~= nil then
		local registerVal8 = Engine.GetPlayerInfo(arg0, registerVal5)
		if registerVal8 ~= nil then
			local registerVal12 = CoD.SocialUtility.GetRankIcons("cp", true, registerVal8.info.cp.rank, registerVal8.info.cp.prestige)
			local registerVal13 = CoD.SocialUtility.GetRankIcons("mp", true, registerVal8.info.mp.rank, registerVal8.info.mp.prestige)
			local registerVal14 = CoD.SocialUtility.GetRankIcons("zm", true, registerVal8.info.zm.rank, registerVal8.info.zm.prestige)
			if registerVal8.info.gamertag == "" then
				registerVal8.info.gamertag = registerVal7
			end
			local registerVal16 = Engine.GetRankDisplayLevel(registerVal8.info.mp.rank, Enum.eModes.MODE_MULTIPLAYER)
			local registerVal18 = Engine.GetPrestigeCap(Enum.eModes.MODE_MULTIPLAYER)
			if registerVal8.info.mp.prestige == registerVal18 then
				local registerVal17 = Engine.GetParagonRankDisplayLevel(registerVal8.info.mp.paragonRank, Enum.eModes.MODE_MULTIPLAYER)
				if registerVal8.info.mp.paragonIconId ~= CoD.PrestigeUtility.INVALID_PARAGON_ICON_ID then
					registerVal17 = Engine.GetParagonIconById(registerVal8.info.mp.paragonIconId, Enum.eModes.MODE_MULTIPLAYER)
				end
				local registerVal19 = CoD.PrestigeUtility.GetMaxRankByMode(Enum.eModes.MODE_MULTIPLAYER)
				registerVal17 = math.floor((((registerVal8.info.mp.paragonRank + registerVal19) + 2.000000) / 100.000000))
			end
			registerVal18 = Engine.GetRankDisplayLevel(registerVal8.info.zm.rank, Enum.eModes.MODE_ZOMBIES)
			local registerVal20 = Engine.GetPrestigeCap(Enum.eModes.MODE_ZOMBIES)
			if registerVal8.info.zm.prestige == registerVal20 then
				registerVal19 = Engine.GetParagonRankDisplayLevel(registerVal8.info.zm.paragonRank, Enum.eModes.MODE_ZOMBIES)
				if registerVal8.info.zm.paragonIconId ~= CoD.PrestigeUtility.INVALID_PARAGON_ICON_ID then
					registerVal19 = Engine.GetParagonIconById(registerVal8.info.zm.paragonIconId, Enum.eModes.MODE_ZOMBIES)
				end
				local registerVal21 = CoD.PrestigeUtility.GetMaxRankByMode(Enum.eModes.MODE_ZOMBIES)
				registerVal19 = math.floor((((registerVal8.info.zm.paragonRank + registerVal21) + 2.000000) / 100.000000))
			end
			registerVal20 = Engine.CreateModel(registerVal3, "xuid")
			Engine.SetModelValue(registerVal20, registerVal8.info.xuid)
			registerVal20 = Engine.CreateModel(registerVal3, "gamertag")
			Engine.SetModelValue(registerVal20, registerVal8.info.gamertag)
			registerVal20 = Engine.CreateModel(registerVal3, "clantag")
			Engine.SetModelValue(registerVal20, registerVal8.info.clantag)
			registerVal20 = Engine.CreateModel(registerVal2, "cpRank")
			Engine.SetModelValue(registerVal20, registerVal8.info.cp.rank)
			registerVal20 = Engine.CreateModel(registerVal2, "cpRankIcon")
			Engine.SetModelValue(registerVal20, registerVal12)
			registerVal20 = Engine.CreateModel(registerVal2, "cpPrestige")
			Engine.SetModelValue(registerVal20, registerVal8.info.cp.prestige)
			registerVal20 = Engine.CreateModel(registerVal2, "mpRank")
			Engine.SetModelValue(registerVal20, tonumber(registerVal17))
			registerVal20 = Engine.CreateModel(registerVal2, "mpRankIcon")
			Engine.SetModelValue(registerVal20, registerVal17)
			registerVal20 = Engine.CreateModel(registerVal2, "mpPrestige")
			Engine.SetModelValue(registerVal20, registerVal8.info.mp.prestige)
			registerVal20 = Engine.CreateModel(registerVal2, "mpPrestigeMasterTier")
			Engine.SetModelValue(registerVal20, registerVal17)
			registerVal20 = Engine.CreateModel(registerVal2, "zmRank")
			Engine.SetModelValue(registerVal20, tonumber(registerVal19))
			registerVal20 = Engine.CreateModel(registerVal2, "zmRankIcon")
			Engine.SetModelValue(registerVal20, registerVal19)
			registerVal20 = Engine.CreateModel(registerVal2, "zmPrestige")
			Engine.SetModelValue(registerVal20, registerVal8.info.zm.prestige)
			registerVal20 = Engine.CreateModel(registerVal2, "zmPrestigeMasterTier")
			Engine.SetModelValue(registerVal20, registerVal19)
			registerVal20 = Engine.CreateModel(registerVal2, "emblemBacking")
			Engine.SetModelValue(registerVal20, registerVal8.info.emblemBacking)
			registerVal20 = Engine.CreateModel(registerVal2, "presence")
			Engine.SetModelValue(registerVal20, registerVal8.info.presence)
			registerVal20 = Engine.CreateModel(registerVal2, "joinable")
			Engine.SetModelValue(registerVal20, registerVal8.info.joinable)
			registerVal20 = Engine.CreateModel(registerVal2, "inGameLobby")
			Engine.SetModelValue(registerVal20, registerVal8.info.inGameLobby)
			registerVal20 = Engine.CreateModel(registerVal2, "inPrivateLobby")
			Engine.SetModelValue(registerVal20, registerVal8.info.inPrivateLobby)
			registerVal20 = Engine.CreateModel(registerVal2, "isSelf")
			Engine.SetModelValue(registerVal20, registerVal8.info.isSelf)
			registerVal20 = Engine.CreateModel(registerVal2, "isLocal")
			Engine.SetModelValue(registerVal20, registerVal8.info.isLocal)
			registerVal20 = Engine.CreateModel(registerVal2, "primaryPresence")
			Engine.SetModelValue(registerVal20, registerVal8.info.primaryPresence)
			registerVal20 = Engine.CreateModel(registerVal2, "titlePresence")
			Engine.SetModelValue(registerVal20, registerVal8.info.titlePresence)
			registerVal20 = Engine.CreateModel(registerVal2, "platformPresence")
			Engine.SetModelValue(registerVal20, registerVal8.info.platformPresence)
			registerVal20 = Engine.CreateModel(registerVal2, "activity")
			Engine.SetModelValue(registerVal20, registerVal8.info.activity)
			registerVal20 = Engine.CreateModel(registerVal2, "activityString")
			Engine.SetModelValue(registerVal20, GetPresenceActivityString(registerVal8.info))
			registerVal20 = Engine.CreateModel(registerVal2, "context")
			Engine.SetModelValue(registerVal20, registerVal8.info.context)
			registerVal20 = Engine.CreateModel(registerVal2, "contextString")
			Engine.SetModelValue(registerVal20, GetPresenceContextString(registerVal8.info))
			registerVal20 = Engine.CreateModel(registerVal2, "gametype")
			Engine.SetModelValue(registerVal20, registerVal8.info.gametype)
			registerVal20 = Engine.CreateModel(registerVal2, "mapid")
			Engine.SetModelValue(registerVal20, registerVal8.info.mapid)
			registerVal20 = Engine.CreateModel(registerVal2, "difficulty")
			Engine.SetModelValue(registerVal20, registerVal8.info.difficulty)
			registerVal20 = Engine.CreateModel(registerVal2, "playlist")
			Engine.SetModelValue(registerVal20, registerVal8.info.playlist)
			registerVal20 = Engine.CreateModel(registerVal2, "isFriend")
			Engine.SetModelValue(registerVal20, registerVal8.info.isFriend)
			registerVal20 = Engine.CreateModel(registerVal2, "primaryGroup")
			Engine.SetModelValue(registerVal20, registerVal8.info.primaryGroup)
			registerVal20 = Engine.CreateModel(registerVal2, "primaryGroupString")
			Engine.SetModelValue(registerVal20, GetPresencePrimaryGroupString(registerVal8.info))
			registerVal20 = Engine.CreateModel(registerVal2, "partySize")
			Engine.SetModelValue(registerVal20, registerVal8.info.partySize)
			registerVal20 = Engine.CreateModel(registerVal2, "partyMax")
			Engine.SetModelValue(registerVal20, registerVal8.info.partyMax)
		end
		local registerVal9 = Engine.UInt64ToString(registerVal5)
		if registerVal9 == "fefefefefefefefe" then
			registerVal12 = CoD.SocialUtility.GetRankIcons("cp", false, 0.000000, 0.000000)
			local registerVal15 = CoD.SocialUtility.GetRankIcons("mp", false, 0.000000, 0.000000)
			registerVal18 = CoD.SocialUtility.GetRankIcons("zm", false, 0.000000, 0.000000)
			registerVal20 = Engine.CreateModel(registerVal2, "cpRank")
			Engine.SetModelValue(registerVal20, 0.000000)
			registerVal20 = Engine.CreateModel(registerVal2, "cpRankIcon")
			Engine.SetModelValue(registerVal20, registerVal12)
			registerVal20 = Engine.CreateModel(registerVal2, "cpPrestige")
			Engine.SetModelValue(registerVal20, 0.000000)
			registerVal20 = Engine.CreateModel(registerVal2, "mpRank")
			Engine.SetModelValue(registerVal20, 0.000000)
			registerVal20 = Engine.CreateModel(registerVal2, "mpRankIcon")
			Engine.SetModelValue(registerVal20, registerVal15)
			registerVal20 = Engine.CreateModel(registerVal2, "mpPrestige")
			Engine.SetModelValue(registerVal20, 0.000000)
			registerVal20 = Engine.CreateModel(registerVal2, "mpPrestigeMasterTier")
			Engine.SetModelValue(registerVal20, 0.000000)
			registerVal20 = Engine.CreateModel(registerVal2, "zmRank")
			Engine.SetModelValue(registerVal20, 0.000000)
			registerVal20 = Engine.CreateModel(registerVal2, "zmRankIcon")
			Engine.SetModelValue(registerVal20, registerVal18)
			registerVal20 = Engine.CreateModel(registerVal2, "zmPrestige")
			Engine.SetModelValue(registerVal20, 0.000000)
			registerVal20 = Engine.CreateModel(registerVal2, "zmPrestigeMasterTier")
			Engine.SetModelValue(registerVal20, 0.000000)
			registerVal20 = Engine.CreateModel(registerVal2, "gamertag")
			Engine.SetModelValue(registerVal20, registerVal7)
			registerVal20 = Engine.CreateModel(registerVal2, "clantag")
			Engine.SetModelValue(registerVal20, "")
		end
	end
	return registerVal2
end

registerVal1.getModel = __FUNC_21BC5_
DataSources.SocialPlayerInfo = registerVal1
registerVal1 = {}
local function __FUNC_236E8_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "lobbyRoot.Pregame")
	registerVal2 = Engine.CreateModel(registerVal1, "timeleft")
	Engine.SetModelValue(registerVal2, "")
	local registerVal3 = Engine.CreateModel(registerVal1, "status")
	Engine.SetModelValue(registerVal3, "")
	return registerVal1
end

registerVal1.getModel = __FUNC_236E8_
DataSources.PregameGlobal = registerVal1
registerVal1 = {}
local function __FUNC_2384F_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "Pregame")
	registerVal2 = Engine.CreateModel(registerVal1, "remainingVotes")
	Engine.SetModelValue(registerVal2, 0.000000)
	return registerVal1
end

registerVal1.getModel = __FUNC_2384F_
DataSources.Pregame = registerVal1
local function __FUNC_2396D_(arg0)
	local registerVal5 = {}
	local registerVal6 = {}
	registerVal6.index = -1.000000
	registerVal6.tabIcon = CoD.buttonStrings.shoulderl
	registerVal5.models = registerVal6
	registerVal6 = {}
	registerVal6.m_mouseDisabled = true
	registerVal5.properties = registerVal6
	table.insert({}, registerVal5)
	local registerVal3, registerVal4, registerVal5 = pairs(CoD.CACUtility.PregameLoadoutFilters)
	for index6,value7 in registerVal3, registerVal4, registerVal5 do
		local registerVal10 = {}
		local registerVal11 = {}
		registerVal11.tabName = value7.title
		registerVal11.index = index6
		registerVal10.models = registerVal11
		registerVal10.properties = {}
		table.insert({}, registerVal10)
	end
	registerVal5 = {}
	registerVal6 = {}
	registerVal6.index = -1.000000
	registerVal6.tabIcon = CoD.buttonStrings.shoulderr
	registerVal5.models = registerVal6
	registerVal6 = {}
	registerVal6.m_mouseDisabled = true
	registerVal5.properties = registerVal6
	table.insert({}, registerVal5)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("PregameItemVoteTabs", __FUNC_2396D_)
DataSources.PregameItemVoteTabs = registerVal1
local function __FUNC_23BEB_(arg0)
	if DataSources.PregameRestrictedItems.cachedItems ~= nil then
		return DataSources.PregameRestrictedItems.cachedItems
	end
	local registerVal1, registerVal2 = CoD.CACUtility.GetAllItems(true, true)
	local function __FUNC_24301_(arg0)
		if arg0 == Enum.ItemRestrictionState.ITEM_RESTRICTION_STATE_RESTRICTED then
			return "MENU_RESTRICTED"
		else
			if arg0 == Enum.ItemRestrictionState.ITEM_RESTRICTION_STATE_BANONLY then
				return "MENU_BAN_ONLY"
			else
				if arg0 == Enum.ItemRestrictionState.ITEM_RESTRICTION_STATE_PROTECTED then
					return "MENU_PROTECTED"
				end
			end
		end
		return ""
	end

	local registerVal5, registerVal6, registerVal7 = pairs(registerVal2)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		if 0.000000 < #value9.items then
			local registerVal12 = {}
			local registerVal13 = {}
			registerVal13.itemType = Enum.VoteItemType.VOTE_ITEM_TYPE_ATTACHMENT
			registerVal13.attachmentIndex = value9.index
			registerVal13.restrictionState = value9.restrictionState
			local registerVal14 = __FUNC_24301_(value9.restrictionState)
			registerVal13.hintText = registerVal14
			registerVal13.name = value9.name
			registerVal13.image = value9.image
			registerVal13.loadoutSlot = "attachment"
			registerVal12.models = registerVal13
			table.insert({}, registerVal12)
		end
	end
	registerVal5, registerVal6, registerVal7 = pairs(registerVal1)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		if value9.groupIndex == Enum.itemGroup_t.ITEMGROUP_KNIFE then
			if value9.name == "WEAPON_KNIFE_LOADOUT" then
				registerVal12 = {}
				registerVal13 = {}
				registerVal13.itemType = Enum.VoteItemType.VOTE_ITEM_TYPE_ITEM
				registerVal13.restrictionState = value9.restrictionState
				registerVal14 = __FUNC_24301_(value9.restrictionState)
				registerVal13.hintText = registerVal14
				registerVal13.itemIndex = value9.index
				registerVal13.name = "MENU_MELEE_WEAPONS"
				registerVal13.image = value9.image
				registerVal13.loadoutSlot = value9.loadoutSlot
				registerVal13.groupName = value9.groupName
				registerVal12.models = registerVal13
				registerVal13 = {}
				registerVal14 = {}
				registerVal14.index = value9.index
				registerVal13.item = registerVal14
				registerVal12.properties = registerVal13
				table.insert({}, registerVal12)
			else
				if CoD.statsTable then
					local registerVal10 = CoD.CACUtility.GetIdForItemRef(value9.index)
				end
				local registerVal11 = CoD.BlackMarketUtility.IsUnreleasedBlackMarketItem(registerVal10)
				if not registerVal11 then
					registerVal13 = {}
					registerVal14 = {}
					registerVal14.itemType = Enum.VoteItemType.VOTE_ITEM_TYPE_ITEM
					registerVal14.restrictionState = value9.restrictionState
					local registerVal15 = __FUNC_24301_(value9.restrictionState)
					registerVal14.hintText = registerVal15
					registerVal14.itemIndex = value9.index
					registerVal14.name = value9.name
					registerVal14.image = value9.image
					registerVal14.loadoutSlot = value9.loadoutSlot
					registerVal14.groupName = value9.groupName
					registerVal13.models = registerVal14
					registerVal14 = {}
					registerVal15 = {}
					registerVal15.index = value9.index
					registerVal14.item = registerVal15
					registerVal13.properties = registerVal14
					table.insert({}, registerVal13)
				end
			end
		end
	end
	DataSources.PregameRestrictedItems.cachedItems = {}
	return {}
end

registerVal1 = ListHelper_SetupDataSource("PregameRestrictedItems", __FUNC_23BEB_)
DataSources.PregameRestrictedItems = registerVal1
local function __FUNC_244BB_(arg0)
	local registerVal1 = Engine.GetLobbyPregameState()
	if registerVal1 ~= Enum.LobbyPregameState.LOBBY_PREGAME_STATE_ITEM_VOTE then
		return {}
	end
	local registerVal2 = Engine.LobbyGetSessionClients(Enum.LobbyModule.LOBBY_MODULE_CLIENT, Enum.LobbyType.LOBBY_TYPE_GAME)
	local function __FUNC_24D97_(arg0, arg1)
		if arg0.pregamePosition >= arg1.pregamePosition then
		end
		return true
	end

	table.sort(registerVal2.sessionClients, __FUNC_24D97_)
	local registerVal6 = Engine.GetPregameItemVotes()
	local registerVal7, registerVal8, registerVal9 = ipairs(registerVal6)
	for index10,value11 in registerVal7, registerVal8, registerVal9 do
		if value11.itemType == Enum.VoteItemType.VOTE_ITEM_TYPE_ITEM then
			local registerVal15 = Engine.GetUnlockableInfoByIndex(value11.itemIndex)
			if registerVal15.groupIndex == Enum.itemGroup_t.ITEMGROUP_KNIFE then
			end
			local registerVal16 = LuaUtils.StartsWith(registerVal15.loadoutSlot, "hero")
			if not registerVal1 or registerVal15.loadoutSlot == "specialgadget" then
			end
			registerVal16 = LuaUtils.StartsWith(registerVal15.loadoutSlot, "killstreak")
			if registerVal16 then
			else
				if value11.itemType == Enum.VoteItemType.VOTE_ITEM_TYPE_ATTACHMENT then
					registerVal15 = Engine.GetAttachmentNameByIndex(value11.attachmentIndex)
					registerVal15 = Engine.GetAttachmentImageByIndex(value11.attachmentIndex)
				else
					if value11.itemType == Enum.VoteItemType.VOTE_ITEM_TYPE_ITEM_ATTACHMENT then
						registerVal15 = Engine.GetAttachmentNameByIndex(value11.attachmentIndex)
						registerVal15 = Engine.GetAttachmentImageByIndex(value11.attachmentIndex)
						registerVal15 = Engine.GetUnlockableInfoByIndex(value11.itemIndex)
					else
						if value11.itemType == Enum.VoteItemType.VOTE_ITEM_TYPE_ATTACHMENT_GROUP then
						else
							error("Item vote updated with invalid vote type")
						end
					end
				end
			end
		end
		local registerVal17 = {}
		local registerVal18 = {}
		registerVal18.name = registerVal15
		registerVal18.image = registerVal15
		registerVal18.headerName = itemInfo.group
		registerVal18.hintText = value11.gamertag
		registerVal18.intData = value11.team
		registerVal18.itemType = value11.itemType
		registerVal18.itemIndex = value11.itemIndex
		registerVal18.attachmentIndex = value11.attachmentIndex
		registerVal18.groupIndex = value11.groupIndex
		registerVal17.models = registerVal18
		table.insert({}, registerVal17)
	end
	return {}
end

local function __FUNC_24E05_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "lobbyRoot.Pregame.Update")
	if arg1.pregameUpdateSubscription then
		arg1:removeSubscription(arg1.pregameUpdateSubscription)
	end
	local function __FUNC_24F58_()
		arg1:updateDataSource(false, false)
	end

	registerVal4 = arg1:subscribeToModel(registerVal3, __FUNC_24F58_, false)
	arg1.pregameUpdateSubscription = registerVal4
end

registerVal1 = ListHelper_SetupDataSource("PregameItemVotes", __FUNC_244BB_, nil, nil, __FUNC_24E05_)
DataSources.PregameItemVotes = registerVal1
local function __FUNC_24FB2_(arg0)
	local function __FUNC_26221_(arg0)
		local registerVal1, registerVal2, registerVal3 = pairs(arg0)
		for index4,value5 in registerVal1, registerVal2, registerVal3 do
			{}[value5] = true
			local registerVal6 = Engine.GetUnlockableInfoByIndex(value5)
			if not {}[value5] and registerVal6.groupIndex == Enum.itemGroup_t.ITEMGROUP_KNIFE then
				table.insert({}, value5)
			end
		end
	end

	local function __FUNC_2639A_(arg0, arg1)
		local registerVal2, registerVal3, registerVal4 = ipairs(arg1)
		for index5,value6 in registerVal2, registerVal3, registerVal4 do
			if not {}[value6] then
				{}[value6] = true
			end
			if not {}[arg0] then
				{}[arg0] = {}
			end
			if not {}[arg0][value6] then
				{}[arg0][value6] = true
			end
		end
	end

	local registerVal7 = CoD.CACUtility.GetFullLoadout(arg0)
	local registerVal8, registerVal9, registerVal10 = ipairs(registerVal7.classes)
	for index11,value12 in registerVal8, registerVal9, registerVal10 do
		__FUNC_26221_(value12.weapons)
		__FUNC_26221_(value12.equipment)
		__FUNC_26221_(value12.perks)
		__FUNC_26221_(value12.wildcards)
		if value12.weapons.primary ~= nil then
			__FUNC_2639A_(value12.weapons.primary, value12.primaryAttachments)
		end
		if value12.weapons.secondary ~= nil then
			__FUNC_2639A_(value12.weapons.secondary, value12.secondaryAttachments)
		end
	end
	registerVal10 = Engine.GetPregameItemVotes()
	local registerVal11, registerVal12, registerVal13 = ipairs(registerVal10)
	for index14,value15 in registerVal11, registerVal12, registerVal13 do
		if value15.voteType == Enum.VoteType.VOTE_TYPE_BAN then
			if value15.itemType == Enum.VoteItemType.VOTE_ITEM_TYPE_ITEM then
				local registerVal16 = Engine.GetUnlockableInfoByIndex(value15.itemIndex)
				if CoD.statsTable then
					local registerVal17 = CoD.CACUtility.GetIdForItemRef(value15.itemIndex)
				end
				local registerVal18 = LuaUtils.StartsWith(registerVal16.loadoutSlot, "hero")
				registerVal18 = LuaUtils.StartsWith(registerVal16.loadoutSlot, "killstreak")
				registerVal18 = CoD.BlackMarketUtility.IsUnreleasedBlackMarketItem(registerVal17)
				if not registerVal18 and not registerVal18 and not registerVal18 then
					if registerVal16.groupIndex == Enum.itemGroup_t.ITEMGROUP_KNIFE then
						local registerVal20 = {}
						registerVal20.name = "MENU_MELEE_WEAPONS"
						registerVal20.image = registerVal16.image
						registerVal20.hintText = value15.gamertag
						registerVal20.intData = value15.team
						registerVal20.groupIndex = registerVal16.groupIndex
						registerVal20.loadoutSlot = registerVal16.loadoutSlot
						registerVal20.loadoutSlotIndex = registerVal16.loadoutSlotIndex
						if 0.000000 >= #({} or __FUNC_26221_) then
						end
						registerVal20.equipped = true
						table.insert({}, registerVal20)
					else
						registerVal20 = {}
						registerVal20.name = registerVal16.name
						registerVal20.image = registerVal16.image
						registerVal20.hintText = value15.gamertag
						registerVal20.intData = value15.team
						registerVal20.groupIndex = registerVal16.groupIndex
						registerVal20.loadoutSlot = registerVal16.loadoutSlot
						registerVal20.loadoutSlotIndex = registerVal16.loadoutSlotIndex
						if {}[value15.itemIndex] ~= true then
						end
						registerVal20.equipped = true
						table.insert({}, registerVal20)
					else
						if value15.itemType == Enum.VoteItemType.VOTE_ITEM_TYPE_ATTACHMENT then
							registerVal18 = {}
							local registerVal19 = Engine.GetAttachmentNameByIndex(value15.attachmentIndex)
							registerVal18.name = registerVal19
							registerVal19 = Engine.GetAttachmentImageByIndex(value15.attachmentIndex)
							registerVal18.image = registerVal19
							registerVal19 = Engine.IsOpticByAttachmentIndex(value15.attachmentIndex)
							registerVal18.isOptic = registerVal19
							registerVal18.hintText = value15.gamertag
							if {}[value15.attachmentIndex] ~= true then
							end
							registerVal18.equipped = true
							table.insert({}, registerVal18)
						else
							if value15.itemType == Enum.VoteItemType.VOTE_ITEM_TYPE_ITEM_ATTACHMENT then
							else
								if value15.itemType == Enum.VoteItemType.VOTE_ITEM_TYPE_ATTACHMENT_GROUP then
								else
									error("PregameBannedItems: Unknown vote item type")
								end
							end
						end
					end
				end
			end
		end
	end
	registerVal11, registerVal12 = CoD.CACUtility.GetAllItems(false, true)
	registerVal13, registerVal14, registerVal15 = pairs(registerVal11)
	for index16,value17 in registerVal13, registerVal14, registerVal15 do
		registerVal18 = Engine.GetItemRestrictionState(value17.index)
		registerVal18 = Engine.GetUnlockableInfoByIndex(value17.index)
		registerVal19 = LuaUtils.StartsWith(registerVal18.loadoutSlot, "hero")
		registerVal19 = LuaUtils.StartsWith(registerVal18.loadoutSlot, "killstreak")
		if registerVal18 == Enum.ItemRestrictionState.ITEM_RESTRICTION_STATE_RESTRICTED and not registerVal19 and not registerVal19 then
			registerVal20 = Engine.GetItemIndexFromReference("knife_loadout", Enum.eModes.MODE_MULTIPLAYER)
			local registerVal21 = Engine.GetItemVote(registerVal20)
			if registerVal18.groupIndex == Enum.itemGroup_t.ITEMGROUP_KNIFE and registerVal21 == Enum.VoteType.VOTE_TYPE_BAN then
			end
			if true == false then
				local registerVal22 = {}
				registerVal22.name = registerVal18.name
				registerVal22.image = registerVal18.image
				local registerVal23 = Engine.Localize("MENU_RESTRICTED")
				registerVal22.hintText = registerVal23
				registerVal22.groupIndex = registerVal18.groupIndex
				registerVal22.loadoutSlot = registerVal18.loadoutSlot
				registerVal22.loadoutSlotIndex = registerVal18.loadoutSlotIndex
				if {}[value17.index] ~= true then
				end
				registerVal22.equipped = true
				table.insert({}, registerVal22)
			end
		end
	end
	registerVal13, registerVal14, registerVal15 = pairs(registerVal12)
	for index16,value17 in registerVal13, registerVal14, registerVal15 do
		registerVal18 = Engine.IsAttachmentRestrictedForAnyWeapon(value17.index)
		if registerVal18 then
			registerVal20 = {}
			registerVal21 = Engine.GetAttachmentNameByIndex(value17.index)
			registerVal20.name = registerVal21
			registerVal21 = Engine.GetAttachmentImageByIndex(value17.index)
			registerVal20.image = registerVal21
			registerVal21 = Engine.IsOpticByAttachmentIndex(value17.index)
			registerVal20.isOptic = registerVal21
			registerVal21 = Engine.Localize("MENU_RESTRICTED")
			registerVal20.hintText = registerVal21
			if {}[value17.index] ~= true then
			end
			registerVal20.equipped = true
			table.insert({}, registerVal20)
		end
	end
	local function __FUNC_2646A_(arg0, arg1)
		if {}[arg0].isOptic and {}[arg1].isOptic then
			local registerVal2 = Engine.Localize({}[arg0].name)
			local registerVal3 = Engine.Localize({}[arg1].name)
			if registerVal2 >= registerVal3 then
			end
			return true
		else
			if {}[arg0].isOptic ~= {}[arg1].isOptic then
				return {}[arg0].isOptic
			else
				registerVal2 = Engine.Localize({}[arg0].name)
				registerVal3 = Engine.Localize({}[arg1].name)
				if registerVal2 >= registerVal3 then
				end
				return true
			end
		end
	end

	local function __FUNC_2666D_(arg0, arg1)
		if {}[arg0].groupIndex ~= {}[arg1].groupIndex then
			if {}[arg0].groupIndex >= {}[arg1].groupIndex then
			end
			return true
		end
		if {}[arg0].loadoutSlot == {}[arg1].loadoutSlot then
			local registerVal2 = Engine.Localize({}[arg0].name)
			local registerVal3 = Engine.Localize({}[arg1].name)
			if registerVal2 >= registerVal3 then
			end
			return true
		end
		registerVal2 = Engine.Localize({}[arg0].loadoutSlot)
		registerVal3 = Engine.Localize({}[arg1].loadoutSlot)
		if registerVal2 >= registerVal3 then
		end
		return true
	end

	registerVal17, registerVal18, registerVal19 = LUI.IterateTableBySortedKeys({}, __FUNC_2666D_, nil)
	if false == false and 50.000000 < true.loadoutSlotIndex then
		registerVal22, registerVal23, registerVal24 = LUI.IterateTableBySortedKeys({}, __FUNC_2646A_, nil)
		for index25,value26 in registerVal22, registerVal23, registerVal24 do
			local registerVal29 = {}
			local registerVal30 = {}
			registerVal30.name = value26.name
			registerVal30.image = value26.image
			registerVal30.hintText = value26.hintText
			registerVal30.intData = value26.intData
			registerVal30.equipped = value26.equipped
			registerVal29.models = registerVal30
			table.insert({}, registerVal29)
		end
	end
	registerVal24 = {}
	local registerVal25 = {}
	registerVal25.name = true.name
	registerVal25.image = true.image
	registerVal25.hintText = true.hintText
	registerVal25.intData = true.intData
	registerVal25.equipped = true.equipped
	registerVal24.models = registerVal25
	table.insert({}, registerVal24)
	registerVal17, registerVal18, registerVal19 = LUI.IterateTableBySortedKeys({}, __FUNC_2646A_, nil)
	for index20,value21 in registerVal17, registerVal18, registerVal19 do
		registerVal24 = {}
		registerVal25 = {}
		registerVal25.name = value21.name
		registerVal25.image = value21.image
		registerVal25.hintText = value21.hintText
		registerVal25.intData = value21.intData
		registerVal25.equipped = value21.equipped
		registerVal24.models = registerVal25
		table.insert({}, registerVal24)
	end
	return {}
end

local function __FUNC_268A5_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "lobbyRoot.Pregame.Update")
	if arg1.pregameUpdateSubscription then
		arg1:removeSubscription(arg1.pregameUpdateSubscription)
	end
	local function __FUNC_269F8_()
		arg1:updateDataSource(false, false)
	end

	registerVal4 = arg1:subscribeToModel(registerVal3, __FUNC_269F8_, false)
	arg1.pregameUpdateSubscription = registerVal4
end

registerVal1 = ListHelper_SetupDataSource("PregameBannedItems", __FUNC_24FB2_, nil, nil, __FUNC_268A5_)
DataSources.PregameBannedItems = registerVal1
local function __FUNC_26A52_(arg0)
	local registerVal1 = CoD.CACUtility.GetFullLoadout(arg0)
	local registerVal3, registerVal4, registerVal5 = pairs(registerVal1.streaks)
	for index6,value7 in registerVal3, registerVal4, registerVal5 do
		{}[value7] = true
	end
	registerVal3 = Engine.GetPregameItemVotes()
	registerVal5, registerVal6, registerVal7 = ipairs(registerVal3)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		if value9.voteType == Enum.VoteType.VOTE_TYPE_BAN then
			local registerVal10 = Engine.GetUnlockableInfoByIndex(value9.itemIndex)
			if {}[value9.itemIndex] ~= true then
			end
			local registerVal12 = LUI.startswith(registerVal10.loadoutSlot, "killstreak")
			if registerVal12 then
				local registerVal14 = {}
				registerVal14.name = registerVal10.name
				registerVal14.image = (registerVal10.image .. "_menu")
				registerVal14.momentum = registerVal10.momentum
				registerVal14.gamertag = value9.gamertag
				registerVal14.intData = value9.team
				registerVal14.equipped = true
				table.insert({}, registerVal14)
			end
		end
	end
	registerVal5, registerVal6 = CoD.CACUtility.GetAllItems(false, true)
	registerVal7, registerVal8, registerVal9 = pairs(registerVal5)
	for index10,value11 in registerVal7, registerVal8, registerVal9 do
		registerVal12 = Engine.GetItemRestrictionState(value11.index)
		registerVal12 = Engine.GetUnlockableInfoByIndex(value11.index)
		local registerVal13 = LuaUtils.StartsWith(registerVal12.loadoutSlot, "killstreak")
		if registerVal12 == Enum.ItemRestrictionState.ITEM_RESTRICTION_STATE_RESTRICTED and registerVal13 then
			if {}[value11.index] ~= true then
			end
			local registerVal16 = {}
			registerVal16.name = registerVal12.name
			registerVal16.image = (registerVal12.image .. "_menu")
			registerVal16.momentum = registerVal12.momentum
			registerVal16.gamertag = ""
			registerVal16.equipped = true
			table.insert({}, registerVal16)
		end
	end
	local function __FUNC_2712A_(arg0, arg1)
		if {}[arg0].momentum >= {}[arg1].momentum then
		end
		return true
	end

	registerVal9, registerVal10, registerVal11 = LUI.IterateTableBySortedKeys({}, __FUNC_2712A_, nil)
	for index12,value13 in registerVal9, registerVal10, registerVal11 do
		registerVal16 = {}
		local registerVal17 = {}
		registerVal17.name = value13.name
		registerVal17.image = value13.image
		registerVal17.hintText = value13.gamertag
		registerVal17.intData = value13.intData
		registerVal17.equipped = value13.equipped
		registerVal16.models = registerVal17
		table.insert({}, registerVal16)
	end
	return {}
end

local function __FUNC_271B2_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "lobbyRoot.Pregame.Update")
	if arg1.pregameUpdateSubscription then
		arg1:removeSubscription(arg1.pregameUpdateSubscription)
	end
	local function __FUNC_27304_()
		arg1:updateDataSource(false, false)
	end

	registerVal4 = arg1:subscribeToModel(registerVal3, __FUNC_27304_, false)
	arg1.pregameUpdateSubscription = registerVal4
end

registerVal1 = ListHelper_SetupDataSource("PregameAllBannedStreaks", __FUNC_26A52_, nil, nil, __FUNC_271B2_)
DataSources.PregameBannedStreaks = registerVal1
local function __FUNC_2735E_(arg0)
	local registerVal2 = Engine.LobbyGetSessionClients(Enum.LobbyModule.LOBBY_MODULE_CLIENT, Enum.LobbyType.LOBBY_TYPE_GAME)
	local function __FUNC_2799D_(arg0, arg1)
		if arg0.pregamePosition >= arg1.pregamePosition then
		end
		return true
	end

	table.sort(registerVal2.sessionClients, __FUNC_2799D_)
	local registerVal5, registerVal6, registerVal7 = ipairs(registerVal2.sessionClients)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal13 = Engine.CurrentSessionMode()
		local registerVal12 = Engine.GetHeroName(registerVal13, value9.characterDraft.characterIndex)
		local registerVal14 = Engine.CurrentSessionMode()
		registerVal13 = Engine.GetLoadoutInfoForHero(registerVal14, value9.characterDraft.characterIndex, value9.characterDraft.loadout)
		if registerVal13 then
		end
		local registerVal17 = {}
		local registerVal18 = {}
		registerVal18.xuid = value9.xuid
		registerVal18.gamertag = value9.gamertag
		registerVal18.clantag = ""
		registerVal18.rank = value9.competitiveRank
		registerVal18.rankIcon = value9.competitiveRankIcon
		registerVal18.prestige = value9.prestige
		registerVal18.team = value9.team
		local registerVal19 = tostring(value9.team)
		registerVal18.teamString = registerVal19
		registerVal18.groupId = value9.simpleGroupID
		registerVal18.isHost = value9.isHost
		registerVal18.isLeader = value9.isLeader
		registerVal18.clientState = value9.pregameState
		registerVal18.position = value9.pregamePosition
		registerVal18.voteCount = value9.voteCount
		registerVal18.characterIndex = value9.characterDraft.characterIndex
		registerVal18.characterName = registerVal12
		registerVal18.characterLoadout = value9.characterDraft.loadout
		registerVal18.characterLoadoutName = registerVal13.itemName
		registerVal17.models = registerVal18
		registerVal17.properties = {}
		table.insert({}, registerVal17)
	end
	return {}
end

local function __FUNC_27A0D_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "lobbyRoot.Pregame.Update")
	if arg1.pregameUpdateSubscription then
		arg1:removeSubscription(arg1.pregameUpdateSubscription)
	end
	local function __FUNC_27C26_()
		arg1:updateDataSource(false, false)
	end

	registerVal4 = arg1:subscribeToModel(registerVal3, __FUNC_27C26_, false)
	arg1.pregameUpdateSubscription = registerVal4
	local registerVal5 = Engine.GetGlobalModel()
	registerVal4 = Engine.GetModel(registerVal5, "lobbyRoot.gameClient.update")
	if arg1.teamCountSubscription then
		arg1:removeSubscription(arg1.teamCountSubscription)
	end
	local function __FUNC_27C7E_()
		arg1:updateDataSource()
	end

	registerVal5 = arg1:subscribeToModel(registerVal4, __FUNC_27C7E_, false)
	arg1.teamCountSubscription = registerVal5
end

registerVal1 = ListHelper_SetupDataSource("PregameClientList", __FUNC_2735E_, nil, nil, __FUNC_27A0D_)
DataSources.PregameClientList = registerVal1
local function __FUNC_27CCE_(arg0)
	local function __FUNC_280DD_(arg0, arg1, arg2, arg3, arg4)
		Engine.SendPregameEditComplete(arg2, true)
		GoBack(arg0, arg1, arg2, arg3, arg4)
	end

	local registerVal3 = ItemRestrictionCACEditActive()
	if registerVal3 then
		local registerVal5 = {}
		registerVal5.text = "MENU_EDIT_CAC_CAPS"
		registerVal5.id = "editCaC"
		registerVal5.disabled = false
		registerVal5.action = OpenCAC
		local registerVal6 = {}
		registerVal6.controller = arg0
		registerVal5.params = registerVal6
		table.insert({}, registerVal5)
		registerVal5 = {}
		registerVal5.text = "MENU_DONE_CAPS"
		registerVal5.id = "cancel"
		registerVal5.disabled = false
		registerVal5.action = __FUNC_280DD_
		registerVal6 = {}
		registerVal6.controller = arg0
		registerVal5.params = registerVal6
		table.insert({}, registerVal5)
	else
		registerVal3 = ItemRestrictionScorestreakEditActive()
		if registerVal3 then
			registerVal5 = {}
			registerVal5.text = "MENU_EDIT_SCORESTREAKS_CAPS"
			registerVal5.id = "editStreaks"
			registerVal5.disabled = false
			registerVal5.action = OpenScorestreaks
			registerVal6 = {}
			registerVal6.controller = arg0
			registerVal5.params = registerVal6
			table.insert({}, registerVal5)
			registerVal5 = {}
			registerVal5.text = "MENU_DONE_CAPS"
			registerVal5.id = "cancel"
			registerVal5.disabled = false
			registerVal5.action = __FUNC_280DD_
			registerVal6 = {}
			registerVal6.controller = arg0
			registerVal5.params = registerVal6
			table.insert({}, registerVal5)
		end
	end
	local registerVal4, registerVal5, registerVal6 = ipairs({})
	for index7,value8 in registerVal4, registerVal5, registerVal6 do
		local registerVal11 = {}
		local registerVal12 = {}
		local registerVal13 = Engine.Localize(value8.text)
		registerVal12.displayText = registerVal13
		registerVal12.customId = value8.customId
		registerVal11.models = registerVal12
		registerVal12 = {}
		registerVal12.disabled = value8.disabled
		registerVal12.action = value8.action
		registerVal12.actionParam = value8.params
		registerVal11.properties = registerVal12
		table.insert({}, registerVal11)
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("PregameBannedContentButtons", __FUNC_27CCE_)
DataSources.PregameBannedContentButtons = registerVal1
local function __FUNC_28181_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.GetModelValue(Engine.CreateModel(registerVal2, "Social.selectedFriendXUID"))
	local registerVal4 = Engine.GetModelValue(Engine.CreateModel(registerVal2, "Social.selectedFriendGamertag"))
	local registerVal5 = Engine.GetXUID64(arg0)
	if registerVal3 ~= registerVal5 then
	end
	local registerVal7 = Engine.GetModelValue(Engine.CreateModel(registerVal2, "Social.selectedFriendInTitle"))
	local registerVal8 = Engine.GetModelValue(Engine.CreateModel(registerVal2, "Social.hideSelectedFriendShowcase"))
	local registerVal9 = Engine.IsInGame()
	if registerVal3 == nil then
		return {}
	end
	local registerVal10 = Engine.GetPlayerInfo(arg0, registerVal3)
	local registerVal11 = IsInFileshare(arg0)
	if true == false and registerVal11 == false then
		registerVal11 = Engine.LobbyIsPlayerInLobby(Enum.LobbyType.LOBBY_TYPE_PRIVATE, registerVal3)
		local registerVal12 = Engine.LobbyIsPlayerInLobby(Enum.LobbyType.LOBBY_TYPE_GAME, registerVal3)
		local registerVal13 = CoD.canInviteToGame(arg0, registerVal3)
		if registerVal13 then
			if registerVal11 ~= false or registerVal12 ~= false then
			end
		end
		local registerVal14 = Engine.LobbyIsPlayerInLobby(Enum.LobbyType.LOBBY_TYPE_PRIVATE, registerVal3)
		if registerVal14 then
			registerVal14 = Engine.IsLeader(arg0, Enum.LobbyType.LOBBY_TYPE_PRIVATE)
			if registerVal9 == false and registerVal14 then
				registerVal14 = ShouldShowPromotePlayer(arg0)
				if registerVal14 then
					local registerVal16 = {}
					registerVal16.text = "MENU_PROMOTE_TO_PARTY_LEADER"
					registerVal16.id = "promoteToLeader"
					registerVal16.action = PromoteToLeader
					local registerVal17 = {}
					registerVal17.controller = arg0
					registerVal17.xuid = registerVal3
					registerVal16.params = registerVal17
					registerVal16.lastInGroup = false
					table.insert({}, registerVal16)
				end
				registerVal14 = Engine.IsLocalClient(registerVal3)
				registerVal16 = {}
				registerVal16.text = "MENU_REMOVE_FROM_PARTY"
				registerVal16.id = "removeFromParty"
				registerVal16.action = DisconnectClient
				registerVal17 = {}
				registerVal17.controller = arg0
				registerVal17.xuid = registerVal3
				registerVal16.params = registerVal17
				registerVal16.lastInGroup = true
				table.insert({}, registerVal16)
				if not registerVal14 and registerVal7 == true then
					registerVal14 = Engine.IsFriendFromXUID(arg0, registerVal3)
					registerVal16 = CoD.GetMapIDFromMapUniqueID(registerVal10.info.mapid)
					if registerVal10.info.mapid and registerVal16 then
						registerVal17 = Engine.GetDLCBitForMapName(registerVal16)
						local registerVal18 = Engine.GetDLCBits()
						local registerVal19 = IsDvarValueEqualTo("ui_freeDLC1", "1")
						if registerVal19 then
						end
						registerVal19 = CoD.BitUtility.IsBitwiseAndNonZero(registerVal17, (registerVal18 | Enum.ContentFlagBits.CONTENT_DLC1))
					end
					if registerVal19 then
						if registerVal10.info.joinable ~= Enum.LobbyJoinable.LOBBY_JOINABLE_YES then
							if registerVal14 and registerVal10.info.joinable == Enum.LobbyJoinable.LOBBY_JOINABLE_YES_FRIENDS_ONLY then
								if registerVal10.info.activity ~= Enum.PresenceActivity.PRESENCE_ACTIVITY_CP_PLAYING_COOP_ON_MAP and registerVal10.info.activity ~= Enum.PresenceActivity.PRESENCE_ACTIVITY_CP_PLAYING_SOLO_ON_MAP and registerVal10.info.activity ~= Enum.PresenceActivity.PRESENCE_ACTIVITY_CP_PLAYING_COOP_IN_SAFEHOUSE and registerVal10.info.activity ~= Enum.PresenceActivity.PRESENCE_ACTIVITY_CP_PLAYING_SOLO_IN_SAFEHOUSE and registerVal10.info.activity ~= Enum.PresenceActivity.PRESENCE_ACTIVITY_CP_IN_LOBBY and registerVal10.info.activity ~= Enum.PresenceActivity.PRESENCE_ACTIVITY_MP_PLAYING_GMODE_ON_MAP and registerVal10.info.activity ~= Enum.PresenceActivity.PRESENCE_ACTIVITY_MP_IN_LOBBY and registerVal10.info.activity == Enum.PresenceActivity.PRESENCE_ACTIVITY_ZM_PLAYING_MAP_ON_ROUND or registerVal10.info.activity == Enum.PresenceActivity.PRESENCE_ACTIVITY_ZM_IN_LOBBY then
									if registerVal14 then
										registerVal18 = {}
										registerVal18.text = "MENU_JOIN_GAME"
										registerVal18.id = "joinGame"
										registerVal18.disabled = false
										registerVal18.action = SocialJoin
										registerVal19 = {}
										registerVal19.controller = arg0
										registerVal19.xuid = registerVal3
										registerVal19.joinType = Enum.JoinType.JOIN_TYPE_FRIEND
										registerVal19.goBack = true
										registerVal18.params = registerVal19
										registerVal18.lastInGroup = (not registerVal19)
										table.insert({}, registerVal18)
									else
										registerVal18 = {}
										registerVal18.text = "MENU_JOIN_GAME"
										registerVal18.id = "joinGame"
										registerVal18.disabled = false
										registerVal18.action = SocialJoin
										registerVal19 = {}
										registerVal19.controller = arg0
										registerVal19.xuid = registerVal3
										registerVal19.joinType = Enum.JoinType.JOIN_TYPE_NORMAL
										registerVal19.goBack = true
										registerVal18.params = registerVal19
										registerVal18.lastInGroup = (not registerVal19)
										table.insert({}, registerVal18)
									else
										if registerVal14 then
											registerVal18 = {}
											registerVal18.text = "MENU_JOIN_PARTY"
											registerVal18.id = "joinParty"
											registerVal18.disabled = false
											registerVal18.action = SocialJoin
											registerVal19 = {}
											registerVal19.controller = arg0
											registerVal19.xuid = registerVal3
											registerVal19.joinType = Enum.JoinType.JOIN_TYPE_FRIEND
											registerVal19.goBack = true
											registerVal18.params = registerVal19
											registerVal18.lastInGroup = (not registerVal19)
											table.insert({}, registerVal18)
										else
											registerVal18 = {}
											registerVal18.text = "MENU_JOIN_PARTY"
											registerVal18.id = "joinParty"
											registerVal18.disabled = false
											registerVal18.action = SocialJoin
											registerVal19 = {}
											registerVal19.controller = arg0
											registerVal19.xuid = registerVal3
											registerVal19.joinType = Enum.JoinType.JOIN_TYPE_NORMAL
											registerVal19.goBack = true
											registerVal18.params = registerVal19
											registerVal18.lastInGroup = (not registerVal19)
											table.insert({}, registerVal18)
										end
									end
								end
							end
						end
					end
				end
			end
		end
		if true then
			registerVal14 = Engine.IsLobbyActive(Enum.LobbyType.LOBBY_TYPE_GAME)
			if registerVal14 then
				registerVal16 = {}
				registerVal16.text = "MENU_INVITE_GAME"
				registerVal16.id = "inviteToGame"
				registerVal16.disabled = false
				registerVal16.action = LobbyInviteFriendGoBack
				registerVal17 = {}
				registerVal17.controller = arg0
				registerVal17.xuid = registerVal3
				registerVal17.gamertag = registerVal4
				registerVal16.params = registerVal17
				registerVal16.lastInGroup = true
				table.insert({}, registerVal16)
			else
				registerVal16 = {}
				registerVal16.text = "MENU_INVITE_TO_PARTY"
				registerVal16.id = "invteToParty"
				registerVal16.disabled = false
				registerVal16.action = LobbyInviteFriendGoBack
				registerVal17 = {}
				registerVal17.controller = arg0
				registerVal17.xuid = registerVal3
				registerVal17.gamertag = registerVal4
				registerVal16.params = registerVal17
				registerVal16.lastInGroup = true
				table.insert({}, registerVal16)
			end
		end
	end
	registerVal11 = IsInGame()
	registerVal11 = IsUserContentRestricted(arg0)
	if registerVal10.info.hasEverPlayed == true and not registerVal11 and not registerVal11 then
		if registerVal8 ~= true then
			registerVal13 = {}
			registerVal13.text = "MENU_SHOWCASE_CAPS"
			registerVal13.id = "playerShowcase"
			registerVal13.disabled = false
			registerVal13.action = OpenPlayerShowcaseOnParent
			registerVal14 = {}
			registerVal14.controller = arg0
			registerVal14.xuid = registerVal3
			registerVal13.params = registerVal14
			registerVal13.lastInGroup = false
			table.insert({}, registerVal13)
		end
		registerVal13 = {}
		registerVal13.text = "MENU_COMBAT_RECORD_CAPS"
		registerVal13.id = "combatRecord"
		registerVal13.disabled = false
		registerVal13.action = CombatRecordOpenFromPlayerDetails
		registerVal14 = {}
		registerVal14.controller = arg0
		registerVal14.xuid = registerVal3
		registerVal13.params = registerVal14
		registerVal13.lastInGround = false
		table.insert({}, registerVal13)
	end
	registerVal13 = {}
	registerVal13.text = "XBOXLIVE_VIEW_PROFILE"
	registerVal13.id = "platformProfile"
	registerVal13.disabled = false
	registerVal13.action = OpenPlatformProfile
	registerVal14 = {}
	registerVal14.controller = arg0
	registerVal14.gamertag = registerVal4
	registerVal14.xuid = registerVal3
	registerVal13.params = registerVal14
	registerVal13.lastInGroup = false
	table.insert({}, registerVal13)
	if true == false then
		registerVal11 = IsGroupsEnabled()
		registerVal11 = IsPlayerAGuest(arg0)
		registerVal11 = IsPrimaryControllerIndex(arg0)
		if registerVal11 and not registerVal11 and registerVal11 then
			registerVal11 = string.find(registerVal4, "(", 1.000000, true)
			if {} or not registerVal11 then
				registerVal12 = Engine.GetModelForController(arg0)
				registerVal11 = CoD.SafeGetModelValue(registerVal12, "groups.disableViewGroups")
				if not registerVal11 then
					registerVal13 = {}
					registerVal13.text = "MENU_VIEW_GROUPS_CAPS"
					registerVal13.id = "viewGroups"
					registerVal13.disabled = false
					registerVal13.action = OpenViewGroups
					registerVal13.params = nil
					registerVal13.lastInGroup = true
					table.insert({}, registerVal13)
				end
			end
		end
		registerVal11 = Engine.LobbyIsPlayerInLobby(Enum.LobbyType.LOBBY_TYPE_PRIVATE, registerVal3)
		registerVal12 = Engine.LobbyIsPlayerInLobby(Enum.LobbyType.LOBBY_TYPE_GAME, registerVal3)
		registerVal13 = Engine.IsPlayerMuted(arg0, Enum.LobbyType.LOBBY_TYPE_PRIVATE, registerVal3)
		registerVal14 = Engine.IsLobbyActive(Enum.LobbyType.LOBBY_TYPE_GAME)
		if registerVal14 then
			registerVal14 = Engine.IsPlayerMuted(arg0, Enum.LobbyType.LOBBY_TYPE_GAME, registerVal3)
		end
		registerVal14 = Engine.IsFriendFromXUID(arg0, registerVal3)
		if not registerVal14 then
			registerVal14 = IsDurango()
			if registerVal14 then
				registerVal16 = {}
				registerVal16.text = "MENU_FOLLOW_PLAYER"
				registerVal16.id = "sendFriendRequest"
				registerVal16.disabled = false
				registerVal16.action = OpenPlatformFriendRequest
				registerVal17 = {}
				registerVal17.controller = arg0
				registerVal17.gamertag = registerVal4
				registerVal17.xuid = registerVal3
				registerVal16.params = registerVal17
				registerVal16.lastInGroup = false
				table.insert({}, registerVal16)
			else
				registerVal16 = {}
				registerVal16.text = "MENU_SEND_FRIEND_REQUEST"
				registerVal16.id = "sendFriendRequest"
				registerVal16.disabled = false
				registerVal16.action = OpenPlatformFriendRequest
				registerVal17 = {}
				registerVal17.controller = arg0
				registerVal17.gamertag = registerVal4
				registerVal17.xuid = registerVal3
				registerVal16.params = registerVal17
				registerVal16.lastInGroup = false
				table.insert({}, registerVal16)
			end
		end
		registerVal14 = IsGroupsEnabled()
		registerVal14 = CanSendGroupInvites(arg0)
		if registerVal14 and registerVal14 then
			registerVal14 = string.find(registerVal4, "(", 1.000000, true)
			if {} or not registerVal14 then
				registerVal16 = {}
				registerVal16.text = "MENU_INVITE_TO_GROUP"
				registerVal16.id = "inviteToGroup"
				registerVal16.disabled = false
				registerVal16.action = OpenGroupSelector
				registerVal16.params = nil
				registerVal16.lastInGroup = false
				table.insert({}, registerVal16)
			end
		end
		if registerVal10.info.hasEverPlayed == true then
			registerVal16 = {}
			registerVal16.text = "MENU_REPORT_PLAYER"
			registerVal16.id = "reportPlayer"
			registerVal16.disabled = false
			registerVal16.action = ShowReportPlayerDialog
			registerVal17 = {}
			registerVal17.controller = arg0
			registerVal17.gamertag = registerVal4
			registerVal17.xuid = registerVal3
			registerVal16.params = registerVal17
			registerVal16.lastInGroup = false
			table.insert({}, registerVal16)
		end
		if not {} or registerVal12 then
			if registerVal14 then
				registerVal16 = {}
				registerVal16.text = "MENU_UNMUTE_PLAYER"
				registerVal16.id = "unmutePlayer"
				registerVal16.disabled = false
				registerVal16.action = UnMutePlayer
				registerVal17 = {}
				registerVal17.controller = arg0
				registerVal17.xuid = registerVal3
				registerVal16.params = registerVal17
				registerVal16.lastInGroup = false
				table.insert({}, registerVal16)
			else
				registerVal16 = {}
				registerVal16.text = "MENU_MUTE_PLAYER"
				registerVal16.id = "mutePlayer"
				registerVal16.disabled = false
				registerVal16.action = MutePlayer
				registerVal17 = {}
				registerVal17.controller = arg0
				registerVal17.xuid = registerVal3
				registerVal16.params = registerVal17
				registerVal16.lastInGroup = false
				table.insert({}, registerVal16)
			end
		end
	end
	registerVal12, registerVal13, registerVal14 = ipairs({})
	for index15,value16 in registerVal12, registerVal13, registerVal14 do
		registerVal19 = {}
		local registerVal20 = {}
		local registerVal21 = Engine.Localize(value16.text)
		registerVal20.displayText = registerVal21
		registerVal20.customId = value16.customId
		registerVal19.models = registerVal20
		registerVal20 = {}
		registerVal20.disabled = value16.disabled
		registerVal20.action = value16.action
		registerVal20.actionParam = value16.params
		registerVal20.isLastButtonInGroup = value16.lastInGroup
		registerVal19.properties = registerVal20
		table.insert({}, registerVal19)
	end
	return {}
end

local function __FUNC_29F0F_(arg0, arg1, arg2)
end

local function __FUNC_29F38_(arg0, arg1, arg2)
	if arg0.SocialPlayerDetailsButtons[arg1].properties.isLastButtonInGroup then
		return 9.000000
	end
end

registerVal1 = ListHelper_SetupDataSource("SocialPlayerDetailsButtons", __FUNC_28181_, nil, nil, __FUNC_29F0F_, __FUNC_29F38_)
DataSources.SocialPlayerDetailsButtons = registerVal1
registerVal1 = {}
local function __FUNC_29FFE_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "spinnerModel")
	Engine.CreateModel(registerVal1, "spinnerMessage")
	return registerVal1
end

registerVal1.getModel = __FUNC_29FFE_
DataSources.SpinnerMessage = registerVal1
registerVal1 = {}
local function __FUNC_2A0DF_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.GetModel(registerVal2, "FeaturedCardsRoot")
	return registerVal1
end

registerVal1.getModel = __FUNC_2A0DF_
DataSources.FeaturedCardsRoot = registerVal1
registerVal1 = {}
local function __FUNC_2A18D_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.GetModel(registerVal2, "NetworkImage")
	return registerVal1
end

registerVal1.getModel = __FUNC_2A18D_
DataSources.NetworkImage = registerVal1
function DataSources.FeaturedCardHelper(arg0, arg1)
	local registerVal4 = IsExperimentPromotionActive(arg0)
	if registerVal4 then
		if arg1 then
		end
		local registerVal6 = Engine.GetPrimaryController()
		local registerVal5 = Engine.ExperimentsGetVariant(registerVal6, "chris_variable_discount")
		local registerVal8 = {}
		local registerVal9 = {}
		registerVal9.title = registerVal5
		registerVal9.actionTitle = "MENU_GO_TO_BLACK_MARKET"
		registerVal9.action = "blackmarket"
		registerVal9.background = registerVal5
		registerVal9.isExperimentPromo = true
		registerVal9.sequence = 0.000000
		registerVal8.models = registerVal9
		registerVal9 = {}
		registerVal9.customWidgetOverride = CoD.FE_ExperimentPromoFeatureCard
		registerVal8.properties = registerVal9
		table.insert({}, registerVal8)
	end
	registerVal4 = HasLiveEvent(arg0)
	if registerVal4 then
		if arg1 then
		end
		local registerVal7 = {}
		registerVal8 = {}
		registerVal8.actionTitle = "MENU_WATCH_NOW"
		registerVal8.action = "liveevent"
		registerVal8.sequence = (0.000000 + 1.000000)
		registerVal7.models = registerVal8
		registerVal8 = {}
		registerVal8.customWidgetOverride = CoD.FE_LiveEventFeatureCard
		registerVal7.properties = registerVal8
		table.insert({}, registerVal7)
	end
	registerVal4 = Dvar.ui_enableZMHDFeaturedCard:get()
	registerVal4 = Dvar.ui_enableZMHDFeaturedCard:get()
	if registerVal4 == 1.000000 or registerVal4 == "1" then
		registerVal5 = IsThermometerProgressEqualTo(1.000000)
		if registerVal5 then
		end
		registerVal7 = {}
		registerVal8 = {}
		registerVal8.title = ""
		registerVal8.actionTitle = "MENU_DETAILS"
		registerVal8.action = "open_zmhd_thermometer"
		registerVal8.background = "t7_crm_zmhd_cosmic_featured_thermometer"
		registerVal8.sequence = ((0.000000 + 1.000000) + 1.000000)
		registerVal7.models = registerVal8
		table.insert({}, registerVal7)
	end
	registerVal4 = Engine.GetFeaturedCardsData()
	if registerVal4 ~= nil and registerVal4.enabled == true and 0.000000 < registerVal4.cardsCountToShow then
		for index7=0.000000, (registerVal4.cardsCountToShow - 1.000000), 1.000000 do
			local registerVal11 = Engine.GetFeaturedCard(index7)
			if registerVal11.valid == true then
				if registerVal11.subTitle == "zm" and not CoD.isZombie then
				end
				if registerVal11.subTitle == "mp" and not CoD.isMultiplayer then
				end
				if false then
					local registerVal15 = {}
					local registerVal16 = {}
					registerVal16.index = index7
					registerVal16.title = registerVal11.title
					registerVal16.subTitle = registerVal11.subTitle
					registerVal16.type = registerVal11.type
					registerVal16.actionTitle = registerVal11.actionTitle
					registerVal16.action = registerVal11.action
					registerVal16.background = registerVal11.bg
					registerVal16.sequence = (((0.000000 + 1.000000) + 1.000000) + 1.000000)
					registerVal15.models = registerVal16
					table.insert({}, registerVal15)
				end
			end
		end
	end
	if CoD.isZombie then
		if arg1 then
		end
		registerVal6 = CoD.BubbleGumBuffUtility.GetCurrentGobbleGumRecipeIndices(arg0)
		registerVal7 = CoD.BubbleGumBuffUtility.GetGobbleGumRecipeForIndex(arg0, registerVal6[1.000000])
		registerVal8 = CoD.BubbleGumBuffUtility.GetGobbleGumRecipeForIndex(arg0, registerVal6[2.000000])
		registerVal9 = CoD.BubbleGumBuffUtility.GetGobbleGumRecipeForIndex(arg0, registerVal6[3.000000])
		local registerVal12 = {}
		local registerVal13 = {}
		registerVal13.title = "MENU_TODAYS_NEWTONS_COOKBOOK_RECIPES"
		registerVal13.actionTitle = "MENU_DETAILS"
		registerVal13.action = "open_cookbook"
		registerVal13.background = "t7_crm_zm_featured_cookbook_daily"
		registerVal13.sequence = ((((0.000000 + 1.000000) + 1.000000) + 1.000000) + 1.000000)
		registerVal13.recipeResultIndex1 = registerVal7.result.itemIndex
		registerVal13.recipeResultIndex2 = registerVal8.result.itemIndex
		registerVal13.recipeResultIndex3 = registerVal9.result.itemIndex
		registerVal12.models = registerVal13
		registerVal13 = {}
		registerVal13.customWidgetOverride = CoD.FE_DailyRecipeFeatureCard
		registerVal12.properties = registerVal13
		table.insert({}, registerVal12)
		if arg1 then
		end
		registerVal12 = {}
		registerVal13 = {}
		registerVal13.actionTitle = "MENU_DETAILS"
		registerVal13.action = "open_daily_challenge"
		registerVal13.sequence = (((((0.000000 + 1.000000) + 1.000000) + 1.000000) + 1.000000) + 1.000000)
		registerVal12.models = registerVal13
		registerVal13 = {}
		registerVal13.customWidgetOverride = CoD.DailyChallengeWidgetContainer
		registerVal12.properties = registerVal13
		table.insert({}, registerVal12)
	end
	return {}
end

function DataSources.FeaturedCardPostCreationHelper(arg0, arg1, arg2)
	local registerVal3 = DataSources.LiveEventViewer.getModel(arg0)
	local registerVal4 = Engine.GetModel(registerVal3, "stream")
	if not arg1.eventViewerSubscription and registerVal3 and registerVal4 then
		local function __FUNC_2B0B2_()
			arg1:updateDataSource()
		end

		local registerVal5 = arg1:subscribeToModel(registerVal4, __FUNC_2B0B2_, false)
		arg1.eventViewerSubscription = registerVal5
	end
	registerVal4 = Engine.GetGlobalModel()
	registerVal3 = Engine.CreateModel(registerVal4, "lobbyRoot.lobbyNav")
	if not arg1.lobbyNavSubscription and registerVal3 then
		local function __FUNC_2B102_(arg0)
			local registerVal1 = Engine.GetModelValue(arg0)
			if arg1.lastLobby ~= registerVal1 then
				arg1.lastLobby = registerVal1
				arg1:updateDataSource()
			end
		end

		registerVal4 = arg1:subscribeToModel(registerVal3, __FUNC_2B102_, false)
		arg1.lobbyNavSubscription = registerVal4
	end
	registerVal4 = CoD.BubbleGumBuffUtility.GetGobbleGumRecipeInfoModel(arg0)
	registerVal3 = Engine.GetModel(registerVal4, "scheduleIndex")
	if not arg1.cookbookScheduleTimerSubscription and registerVal3 then
		local function __FUNC_2B1C4_(arg0)
			arg1:updateDataSource()
		end

		registerVal4 = arg1:subscribeToModel(registerVal3, __FUNC_2B1C4_, false)
		arg1.cookbookScheduleTimerSubscription = registerVal4
	end
end

local function __FUNC_2B216_(arg0)
	return DataSources.FeaturedCardHelper(arg0, true)
end

registerVal1 = ListHelper_SetupDataSource("FeaturedCards", __FUNC_2B216_, nil, nil, DataSources.FeaturedCardPostCreationHelper)
DataSources.FeaturedCards = registerVal1
local function __FUNC_2B291_(arg0)
	return DataSources.FeaturedCardHelper(arg0, false)
end

registerVal1 = ListHelper_SetupDataSource("FeaturedCardTicks", __FUNC_2B291_, nil, nil, DataSources.FeaturedCardPostCreationHelper)
DataSources.FeaturedCardTicks = registerVal1
registerVal1 = {}
local function __FUNC_2B30D_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.GetModel(registerVal2, "MarketingRoot")
	return registerVal1
end

registerVal1.getModel = __FUNC_2B30D_
DataSources.MarketingRoot = registerVal1
registerVal1 = {}
local function __FUNC_2B3B9_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "NetworkInfo")
	registerVal2 = Engine.CreateModel(registerVal1, "natType")
	local registerVal3 = Engine.CreateModel(registerVal1, "bandwidth")
	local registerVal4 = Engine.CreateModel(registerVal1, "connectionType")
	local registerVal5 = Engine.CreateModel(registerVal1, "externalIP")
	local registerVal6 = Engine.CreateModel(registerVal1, "internalIP")
	local registerVal7 = Engine.CreateModel(registerVal1, "region")
	local registerVal8 = Engine.CreateModel(registerVal1, "version")
	local registerVal9 = Engine.CreateModel(registerVal1, "connectivityInfo")
	local registerVal10 = Engine.CreateModel(registerVal1, "supportURL")
	local function __FUNC_2B8E4_(arg1, arg2)
		local registerVal2, registerVal3 = Engine.GetSystemInfo(arg0, arg2)
		Engine.SetModelValue(arg1, registerVal2)
	end

	__FUNC_2B8E4_(registerVal2, CoD.SYSINFO_NAT_TYPE)
	__FUNC_2B8E4_(registerVal3, CoD.SYSINFO_BANDWIDTH)
	__FUNC_2B8E4_(registerVal4, CoD.SYSINFO_CONNECTION_TYPE)
	__FUNC_2B8E4_(registerVal5, CoD.SYSINFO_EXTERNAL_IP_ADDRESS)
	__FUNC_2B8E4_(registerVal6, CoD.SYSINFO_INTERNAL_IP_ADDRESS)
	__FUNC_2B8E4_(registerVal7, CoD.SYSINFO_GEOGRAPHICAL_REGION)
	__FUNC_2B8E4_(registerVal8, CoD.SYSINFO_VERSION_NUMBER)
	__FUNC_2B8E4_(registerVal9, CoD.SYSINFO_CONNECTIVITY_INFO)
	if Dvar.ui_supportURL ~= nil then
		local registerVal13 = Dvar.ui_supportURL:get()
	end
	Engine.SetModelValue(registerVal10, registerVal13)
	return registerVal1
end

registerVal1.getModel = __FUNC_2B3B9_
DataSources.NetworkInfo = registerVal1
registerVal1 = {}
local function __FUNC_2B986_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "PlayGoDownloadProgress")
	local registerVal3 = Engine.CreateModel(registerVal1, "progress")
	Engine.SetModelValue(registerVal3, 0.000000)
	registerVal3 = Engine.CreateModel(registerVal1, "chunk")
	Engine.SetModelValue(registerVal3, "")
	return registerVal1
end

registerVal1.getModel = __FUNC_2B986_
DataSources.PlayGoDownloadProgress = registerVal1
registerVal1 = {}
local function __FUNC_2BAEC_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.GetModel(registerVal2, "NetStatsInfo")
	return registerVal1
end

registerVal1.getModel = __FUNC_2BAEC_
DataSources.NetStatsInfo = registerVal1
registerVal1 = {}
local function __FUNC_2BB98_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "motd")
	registerVal2 = Engine.CreateModel(registerVal1, "isValid")
	local registerVal3 = Engine.CreateModel(registerVal1, "singleView")
	local registerVal4 = Engine.CreateModel(registerVal1, "motdVersion")
	local registerVal5 = Engine.CreateModel(registerVal1, "title")
	local registerVal6 = Engine.CreateModel(registerVal1, "message")
	local registerVal7 = Engine.CreateModel(registerVal1, "image")
	local registerVal8 = Engine.CreateModel(registerVal1, "action")
	local registerVal9 = Engine.CreateModel(registerVal1, "actionContext")
	local registerVal10 = Engine.CreateModel(registerVal1, "actionString")
	local registerVal11 = Engine.CreateModel(registerVal1, "bannerTitle")
	local registerVal12 = Engine.CreateModel(registerVal1, "bannerMessage")
	local registerVal13 = Engine.CreateModel(registerVal1, "bannerImage")
	local registerVal14 = Engine.CreateModel(registerVal1, "bannerAction")
	local registerVal15 = Engine.CreateModel(registerVal1, "bannerActionContext")
	local registerVal16 = Engine.CreateModel(registerVal1, "bannerActionString")
	local registerVal17 = Engine.GetMOTD()
	Engine.SetModelValue(registerVal2, registerVal17.isValid)
	if registerVal17.isValid then
		Engine.SetModelValue(registerVal3, registerVal17.singleView)
		Engine.SetModelValue(registerVal4, registerVal17.motdVersion)
		Engine.SetModelValue(registerVal5, registerVal17.title)
		Engine.SetModelValue(registerVal6, registerVal17.message)
		Engine.SetModelValue(registerVal7, registerVal17.image)
		Engine.SetModelValue(registerVal8, registerVal17.action)
		Engine.SetModelValue(registerVal9, registerVal17.actionContext)
		Engine.SetModelValue(registerVal10, registerVal17.actionString)
		Engine.SetModelValue(registerVal11, registerVal17.bannerTitle)
		Engine.SetModelValue(registerVal12, registerVal17.bannerMessage)
		Engine.SetModelValue(registerVal13, registerVal17.bannerImage)
		Engine.SetModelValue(registerVal14, registerVal17.bannerAction)
		Engine.SetModelValue(registerVal15, registerVal17.bannerActionContext)
		Engine.SetModelValue(registerVal16, registerVal17.bannerActionString)
	end
	return registerVal1
end

registerVal1.getModel = __FUNC_2BB98_
DataSources.MOTD = registerVal1
registerVal1 = {}
local function __FUNC_2C185_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "mtxCommsMOTD")
	registerVal2 = Engine.GetMarketingMessage(arg0, "motd")
	if registerVal2 ~= nil then
		for index6,value7 in next, registerVal2, nil do
			local registerVal9 = Engine.CreateModel(registerVal1, index6)
			Engine.SetModelValue(registerVal9, value7)
		end
		if not registerVal2.messageID then
			local registerVal4 = Engine.CreateModel(registerVal1, "messageID")
			Engine.SetModelValue(registerVal4, 0.000000)
		else
			Engine.ExecNow(arg0, "setupThumbnailForMarketing mtxcommsmotd")
			registerVal4 = Engine.CreateModel(registerVal1, "imageFileID")
			Engine.SetModelValue(registerVal4, 1.000000)
		end
	end
	if registerVal1 or not registerVal2.type then
		registerVal4 = Engine.CreateModel(registerVal1, "type")
		Engine.SetModelValue(registerVal4, "")
	end
	return registerVal1
end

registerVal1.getModel = __FUNC_2C185_
DataSources.MtxCommsMOTD = registerVal1
registerVal1 = {}
local function __FUNC_2C46C_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "mtxCommsRegistration")
	registerVal2 = Engine.GetMarketingMessage(arg0, "registration")
	if registerVal2 ~= nil and not registerVal2.messageViewReported then
		for index6,value7 in next, registerVal2, nil do
			local registerVal9 = Engine.CreateModel(registerVal1, index6)
			Engine.SetModelValue(registerVal9, value7)
		end
		local registerVal4 = Engine.CreateModel(registerVal1, "action_title")
		Engine.SetModelValue(registerVal4, Engine.Localize("ACCOUNT_LINK_LEARN_MORE"))
		local registerVal3 = Engine.GetMarketingMessage(arg0, "motd")
		if registerVal2.action ~= "opt-in" and registerVal2.action ~= "registration" and registerVal2.content_long ~= "" and registerVal3 ~= nil and registerVal3.hasBanner then
			local registerVal5 = Engine.CreateModel(registerVal1, "content_short")
			Engine.SetModelValue(registerVal5, registerVal3.bannerTitle)
			registerVal5 = Engine.CreateModel(registerVal1, "action_title")
			Engine.SetModelValue(registerVal5, Engine.Localize(registerVal3.bannerActionString))
			registerVal5 = Engine.CreateModel(registerVal1, "action")
			Engine.SetModelValue(registerVal5, registerVal3.bannerAction)
			registerVal5 = Engine.CreateModel(registerVal1, "image")
			Engine.SetModelValue(registerVal5, registerVal3.bannerImage)
			registerVal5 = Engine.CreateModel(registerVal1, "locationID")
			Engine.SetModelValue(registerVal5, 1.000000)
		end
	end
	return registerVal1
end

registerVal1.getModel = __FUNC_2C46C_
DataSources.MtxCommsRegistration = registerVal1
registerVal1 = {}
local function __FUNC_2C95A_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "CRMPopup")
	registerVal2 = Engine.GetModel(registerVal1, "location")
	if registerVal2 ~= nil then
		local registerVal4 = Engine.GetModelValue(registerVal2)
		if registerVal4 == "crm_featured" then
			local registerVal6 = Engine.GetGlobalModel()
			local registerVal5 = Engine.GetModel(registerVal6, "FeaturedCardsRoot")
			registerVal6 = Engine.GetModelValue(Engine.GetModel(registerVal5, "CardSequence"))
			local registerVal8 = Engine.GetModelForController(arg0)
			local registerVal7 = Engine.GetModel(registerVal8, "FeaturedCards")
			registerVal8 = Engine.GetModel(registerVal7, (registerVal6 + 1.000000))
			local registerVal9 = Engine.GetModelValue(Engine.GetModel(registerVal8, "index"))
			local registerVal10 = Engine.GetMarketingMessage(arg0, registerVal4, registerVal9)
		else
			registerVal5 = Engine.GetMarketingMessage(arg0, registerVal4)
		else
			registerVal4 = Engine.GetMarketingMessage(arg0, "crm_featured")
		end
	end
	registerVal4, registerVal5, registerVal6 = pairs(registerVal4)
	for index7,value8 in registerVal4, registerVal5, registerVal6 do
		registerVal10 = Engine.CreateModel(registerVal1, index7)
		Engine.SetModelValue(registerVal10, value8)
	end
	if registerVal1 or not registerVal4.action then
		registerVal5 = Engine.CreateModel(registerVal1, "action")
		Engine.SetModelValue(registerVal5, "")
	end
	return registerVal1
end

registerVal1.getModel = __FUNC_2C95A_
DataSources.CRMPopup = registerVal1
local function __FUNC_2CD5D_(arg0)
	for index3=1.000000, #, 1.000000 do
		local registerVal11 = {}
		local registerVal12 = {}
		registerVal12.breadcrumbCount = 0.000000
		registerVal12.categoryRef = CoD.Craft.WeaponGroupNames[index3].weapon_category
		registerVal12.categoryName = CoD.Craft.WeaponGroupNames[index3].lowercaseName
		registerVal12.categoryImage = CoD.Craft.WeaponGroupNames[index3].weapon_image
		registerVal11.models = registerVal12
		registerVal11.properties = {}
		table.insert({}, registerVal11)
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("WeaponBuildKitCategories", __FUNC_2CD5D_, true)
DataSources.WeaponBuildKitCategories = registerVal1
local function __FUNC_2CF54_(arg0)
	local function __FUNC_2D226_(arg1, arg2)
		local registerVal2 = CoD.PrestigeUtility.GetPermanentUnlockMode()
		local registerVal3, registerVal4, registerVal5 = ipairs(arg1)
		for index6,value7 in registerVal3, registerVal4, registerVal5 do
			if CoD.UnlockablesTable and CoD.UnlockablesTable[value7.weapon_category] then
				local registerVal10 = {}
				local registerVal11 = {}
				registerVal11.tabName = value7.name
				local registerVal12 = Engine.WeaponGroupNewItemCount(arg0, value7.weapon_category, nil, registerVal2)
				registerVal11.breadcrumbCount = registerVal12
				registerVal10.models = registerVal11
				registerVal11 = {}
				registerVal11.filter = value7.weapon_category
				registerVal11.loadoutType = arg2
				registerVal10.properties = registerVal11
				table.insert({}, registerVal10)
			end
		end
	end

	local registerVal5 = {}
	local registerVal6 = {}
	registerVal6.tabIcon = CoD.buttonStrings.shoulderl
	registerVal5.models = registerVal6
	registerVal6 = {}
	registerVal6.m_mouseDisabled = true
	registerVal5.properties = registerVal6
	table.insert({}, registerVal5)
	if CoD.perController[arg0].weaponClassGroup == "primary" then
		__FUNC_2D226_(CoD.CACUtility.PrimaryWeaponGroupNames, "primary")
	else
		if CoD.perController[arg0].weaponClassGroup == "secondary" then
			__FUNC_2D226_(CoD.CACUtility.SecondaryWeaponGroupNames, "secondary")
		end
	end
	registerVal6 = {}
	local registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderr
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("WeaponGroups", __FUNC_2CF54_, true)
DataSources.WeaponGroups = registerVal1
registerVal1 = {}
local function __FUNC_2D4AA_(arg0, arg1, arg2)
	if not CoD.UnlockablesTable then
		local registerVal4 = CoD.GetUnlockablesTable(arg0, arg2)
		CoD.UnlockablesTable = registerVal4
	end
	CoD.UpdateUnlockableTableBMItems(arg0, CoD.UnlockablesTable)
	arg1.dataSource = CoD.UnlockablesTable
end

registerVal1.prepare = __FUNC_2D4AA_
local function __FUNC_2D5CA_(arg0)
	if not DataSources.Unlockables.currentFilter and arg0.dataSource.filterList then
		return #arg0.dataSource.filterList
	else
		if arg0.dataSource[DataSources.Unlockables.currentFilter] then
			return #arg0.dataSource[DataSources.Unlockables.currentFilter]
		end
		return 0.000000
	end
end

registerVal1.getCount = __FUNC_2D5CA_
local function __FUNC_2D74A_(arg0, arg1, arg2)
	if not DataSources.Unlockables.currentFilter and arg1.dataSource.filterList then
		return arg1.dataSource.filterList[arg2]
	else
		if arg1.dataSource[DataSources.Unlockables.currentFilter] then
			return arg1.dataSource[DataSources.Unlockables.currentFilter][arg2]
		end
	end
end

registerVal1.getItem = __FUNC_2D74A_
local function __FUNC_2D8CD_(arg0)
	DataSources.Unlockables.currentFilter = arg0
end

registerVal1.setCurrentFilterItem = __FUNC_2D8CD_
local function __FUNC_2D94D_()
	return DataSources.Unlockables.currentFilter
end

registerVal1.getCurrentFilterItem = __FUNC_2D94D_
registerVal1.currentFilter = nil
DataSources.Unlockables = registerVal1
registerVal1 = {}
local function __FUNC_2D9D9_(arg0, arg1, arg2)
	if not CoD.CraftWeaponListTable then
		local registerVal4 = CoD.GetCraftWeaponListTable(arg0, arg2)
		CoD.CraftWeaponListTable = registerVal4
	end
	CoD.UpdateUnlockableTableBMItems(arg0, CoD.CraftWeaponListTable, Enum.eModes.MODE_MULTIPLAYER)
	arg1.dataSource = CoD.CraftWeaponListTable
end

registerVal1.prepare = __FUNC_2D9D9_
local function __FUNC_2DB56_(arg0)
	if not DataSources.CraftWeaponList.currentFilter and arg0.dataSource.filterList then
		return #arg0.dataSource.filterList
	else
		if arg0.dataSource[DataSources.CraftWeaponList.currentFilter] then
			return #arg0.dataSource[DataSources.CraftWeaponList.currentFilter]
		end
		return 0.000000
	end
end

registerVal1.getCount = __FUNC_2DB56_
local function __FUNC_2DCDA_(arg0, arg1, arg2)
	if not DataSources.CraftWeaponList.currentFilter and arg1.dataSource.filterList then
		return arg1.dataSource.filterList[arg2]
	else
		if arg1.dataSource[DataSources.CraftWeaponList.currentFilter] then
			return arg1.dataSource[DataSources.CraftWeaponList.currentFilter][arg2]
		end
	end
end

registerVal1.getItem = __FUNC_2DCDA_
local function __FUNC_2DE61_(arg0)
	DataSources.CraftWeaponList.currentFilter = arg0
end

registerVal1.setCurrentFilterItem = __FUNC_2DE61_
local function __FUNC_2DEE5_()
	return DataSources.CraftWeaponList.currentFilter
end

registerVal1.getCurrentFilterItem = __FUNC_2DEE5_
registerVal1.currentFilter = nil
DataSources.CraftWeaponList = registerVal1
local function __FUNC_2DF75_(arg0)
	local registerVal5 = Engine.GetModelValue(Engine.GetModel(CoD.perController[arg0].classModel, (CoD.perController[arg0].weaponSlot .. ".itemIndex")))
	local registerVal6 = Engine.GetNumAttachments(registerVal5)
	local registerVal8 = Engine.GetItemRef(registerVal5)
	local registerVal15 = {}
	registerVal15.damage = 0.000000
	registerVal15.range = 0.000000
	registerVal15.fireRate = 0.000000
	registerVal15.accuracy = 0.000000
	local registerVal16 = CoD.CACUtility.GetAttachmentListForSlot(CoD.perController[arg0].weaponCategory)
	local registerVal18, registerVal19, registerVal20 = ipairs(registerVal16)
	for index21,value22 in registerVal18, registerVal19, registerVal20 do
		local registerVal23 = Engine.GetModelValue(Engine.GetModel(CoD.perController[arg0].classModel, (value22 .. ".itemIndex")))
		if value22 ~= CoD.perController[arg0].weaponCategory and CoD.CACUtility.EmptyItemIndex < registerVal23 then
			local registerVal24 = Engine.GetAttachmentRef(registerVal5, registerVal23)
			table.insert({}, registerVal24)
			local registerVal25 = Engine.TableLookup(nil, CoD.weaponAttributes, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_REFERENCE, registerVal24, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_WEAPON_NAME, registerVal8, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_DAMAGE)
			local registerVal26 = Engine.TableLookup(nil, CoD.weaponAttributes, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_REFERENCE, registerVal24, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_WEAPON_NAME, registerVal8, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_RANGE)
			local registerVal27 = Engine.TableLookup(nil, CoD.weaponAttributes, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_REFERENCE, registerVal24, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_WEAPON_NAME, registerVal8, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_FIRE_RATE)
			local registerVal28 = Engine.TableLookup(nil, CoD.weaponAttributes, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_REFERENCE, registerVal24, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_WEAPON_NAME, registerVal8, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_ACCURACY)
			if registerVal25 ~= "" or not 0.000000 then
			end
			registerVal15.damage = (registerVal15.damage + registerVal25)
			if registerVal26 ~= "" or not 0.000000 then
			end
			registerVal15.range = (registerVal15.range + registerVal26)
			if registerVal27 ~= "" or not 0.000000 then
			end
			registerVal15.fireRate = (registerVal15.fireRate + registerVal27)
			if registerVal28 ~= "" or not 0.000000 then
			end
			registerVal15.accuracy = (registerVal15.accuracy + registerVal28)
		end
	end
	for index18=1.000000, (registerVal6 - 1.000000), 1.000000 do
		if CoD.perController[arg0].attachmentType == "attachment" then
			registerVal23 = Engine.IsOptic(registerVal5, index18)
			registerVal23 = Engine.GetItemAttachment(registerVal5, index18)
			registerVal23 = Engine.IsOptic(registerVal5, index18)
			if registerVal23 == false and CoD.perController[arg0].attachmentType == "optic" and registerVal23 == true then
				registerVal23 = Engine.GetItemAttachment(registerVal5, index18)
			end
		end
		registerVal23 = Engine.GetAttachmentAllocationCost(registerVal5, index18)
		if CoD.CACUtility.EmptyItemIndex < registerVal23 and 0.000000 < registerVal23 then
			registerVal24 = Engine.GetAttachmentRef(registerVal5, index18)
			registerVal25 = Engine.GetAttachmentNameByIndex(registerVal23)
			registerVal26 = Engine.GetAttachmentUniqueImageByIndex(registerVal5, index18)
			registerVal28 = Engine.GetGlobalModel()
			registerVal27 = Engine.GetModel(registerVal28, "Unlockables")
			registerVal28 = Engine.GetModel(registerVal27, (registerVal5 .. ".weaponAttributes"))
			local function __FUNC_2EC1E_(arg0, arg1)
				local registerVal2 = Engine.GetModelValue(Engine.GetModel(registerVal28, arg0))
				local registerVal3 = Engine.TableLookup(nil, CoD.weaponAttributes, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_REFERENCE, registerVal24, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_WEAPON_NAME, registerVal8, arg1)
				if registerVal2 == "" then
				end
				if registerVal3 == "" then
				end
				local registerVal5, registerVal6, registerVal7 = ipairs({})
				for index8,value9 in registerVal5, registerVal6, registerVal7 do
					if value9 == registerVal24 then
					else
					end
				end
				if not true then
				end
				return (0.000000 .. "," .. ((0.000000 + registerVal15[arg0]) + 0.000000))
			end

			local registerVal30 = {}
			local registerVal31 = {}
			registerVal31.name = registerVal25
			registerVal31.image = registerVal26
			registerVal31.itemIndex = index18
			registerVal31.weaponIndex = registerVal5
			registerVal31.attachmentIndex = registerVal23
			registerVal31.itemType = Enum.VoteItemType.VOTE_ITEM_TYPE_ITEM_ATTACHMENT
			registerVal31.weaponSlot = CoD.perController[arg0].weaponCategory
			registerVal31.weaponIndex = registerVal5
			local registerVal32 = Engine.GetAttachmentDesc(registerVal5, index18)
			registerVal31.description = registerVal32
			registerVal32 = {}
			local registerVal33 = __FUNC_2EC1E_("damage", Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_DAMAGE)
			registerVal32.damage = registerVal33
			registerVal33 = __FUNC_2EC1E_("range", Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_RANGE)
			registerVal32.range = registerVal33
			registerVal33 = __FUNC_2EC1E_("fireRate", Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_FIRE_RATE)
			registerVal32.fireRate = registerVal33
			registerVal33 = __FUNC_2EC1E_("accuracy", Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_ACCURACY)
			registerVal32.accuracy = registerVal33
			registerVal31.weaponAttributes = registerVal32
			registerVal30.models = registerVal31
			registerVal31 = {}
			registerVal31.weaponIndex = registerVal5
			registerVal31.attachmentTableIndex = registerVal23
			registerVal31.acvIndex = CoD.CACUtility.EmptyItemIndex
			registerVal30.properties = registerVal31
			table.insert({}, registerVal30)
		end
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("WeaponAttachments", __FUNC_2DF75_, true)
DataSources.WeaponAttachments = registerVal1
registerVal1 = {}
local function __FUNC_2EDCF_(arg0)
	local registerVal1 = Engine.GetModelForController(arg0)
	local registerVal2 = Engine.CreateModel(registerVal1, "EquippedBubbleGumPack")
	local registerVal3 = Engine.GetEquippedBubbleGumPack(arg0)
	local registerVal5 = Engine.CreateModel(registerVal2, "bgbPackIndex")
	Engine.SetModelValue(registerVal5, registerVal3)
	return registerVal2
end

registerVal1.getModel = __FUNC_2EDCF_
DataSources.EquippedBubbleGumPack = registerVal1
registerVal1 = {}
local function __FUNC_2EF2E_(arg0, arg1, arg2)
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.GetEquippedBubbleGumPack(arg0)
	local registerVal5 = DataSources.BubbleGumBuffs.setupBubbleGumBuffsModel(arg0, registerVal3, registerVal4)
	arg1.rootModel = registerVal5
end

registerVal1.prepare = __FUNC_2EF2E_
local function __FUNC_2F06B_(arg0)
	return CoD.BubbleGumBuffs.NumBuffsPerPack
end

registerVal1.getCount = __FUNC_2F06B_
local function __FUNC_2F0F2_(arg0, arg1, arg2)
	local registerVal3 = arg1:getParent()
	if registerVal3 then
		registerVal3 = arg1:getParent()
		return registerVal3:getModel(arg0, ("BubbleGumBuffs." .. arg2))
	else
		local registerVal4 = Engine.GetModelForController(arg0)
		return Engine.CreateModel(registerVal4, ("BubbleGumBuffs." .. arg2))
	end
end

registerVal1.getItem = __FUNC_2F0F2_
local function __FUNC_2F212_(arg0, arg1, arg2)
	local registerVal3 = Engine.CreateModel(arg1, "BubbleGumBuffs")
	for index4=0.000000, (CoD.BubbleGumBuffs.NumBuffsPerPack - 1.000000), 1.000000 do
		local registerVal8 = Engine.CreateModel(registerVal3, (index4 + 1.000000))
		local registerVal9 = Engine.GetBubbleGumBuff(arg0, arg2, index4)
		local registerVal11 = Engine.GetGlobalModel()
		local registerVal10 = CoD.SafeGetModelValue(registerVal11, ("Unlockables." .. registerVal9 .. ".dlcIndex"))
		local registerVal12 = Engine.CreateModel(registerVal8, "bgbIndex")
		Engine.SetModelValue(registerVal12, index4)
		registerVal12 = Engine.CreateModel(registerVal8, "itemIndex")
		Engine.SetModelValue(registerVal12, registerVal9)
		registerVal12 = Engine.CreateModel(registerVal8, "dlcIndex")
		Engine.SetModelValue(registerVal12, registerVal10)
		registerVal11 = IsInGame()
		if registerVal11 then
			registerVal12 = Engine.CreateModel(registerVal8, "remaining")
			Engine.SetModelValue(registerVal12, GetConsumableCountFromIndex(arg0, registerVal9))
		end
	end
end

registerVal1.setupBubbleGumBuffsModel = __FUNC_2F212_
local function __FUNC_2F563_(arg0)
	if arg0.rootModel then
		Engine.UnsubscribeAndFreeModel(arg0.rootModel)
		arg0.rootModel = nil
	end
end

registerVal1.cleanup = __FUNC_2F563_
DataSources.BubbleGumBuffs = registerVal1
registerVal1 = {}
local function __FUNC_2F609_(arg0, arg1, arg2)
	arg1.bubbleGumPacks = {}
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal3, "BubbleGumPacks")
	for index5=0.000000, (CoD.BubbleGumBuffs.NumPacks - 1.000000), 1.000000 do
		local registerVal9 = Engine.CreateModel(registerVal4, index5)
		local registerVal10 = Engine.GetBubbleGumPackName(arg0, index5)
		local registerVal12 = Engine.CreateModel(registerVal9, "bgbPackIndex")
		Engine.SetModelValue(registerVal12, index5)
		registerVal12 = Engine.CreateModel(registerVal9, "bubbleGumPackName")
		Engine.SetModelValue(registerVal12, registerVal10)
		DataSources.BubbleGumBuffs.setupBubbleGumBuffsModel(arg0, registerVal9, index5)
		local registerVal13 = Engine.GetModelForController(arg0)
		local registerVal11 = Engine.GetModelValue(Engine.CreateModel(registerVal13, "EquippedBubbleGumPack.bgbPackIndex"))
		if registerVal11 and (registerVal11 + 1.000000) == index5 then
			arg1.selectIndex = index5
		end
		table.insert(arg1.bubbleGumPacks, registerVal9)
	end
end

registerVal1.prepare = __FUNC_2F609_
local function __FUNC_2F9B5_(arg0)
	return #arg0.bubbleGumPacks
end

registerVal1.getCount = __FUNC_2F9B5_
local function __FUNC_2FA0C_(arg0, arg1, arg2)
	return arg1.bubbleGumPacks[arg2]
end

registerVal1.getItem = __FUNC_2FA0C_
local function __FUNC_2FA6C_(arg0, arg1)
	if arg0.selectIndex == arg1 then
		local registerVal2 = {}
		registerVal2.selectIndex = true
		return registerVal2
	end
end

registerVal1.getCustomPropertiesForItem = __FUNC_2FA6C_
DataSources.BubbleGumPacks = registerVal1
local function __FUNC_2FACF_(arg0)
	local registerVal2 = CoD.BubbleGumBuffUtility.GetGobbleGumRecipes(arg0)
	local registerVal3 = Engine.GetPlayerStats(arg0)
	local registerVal4, registerVal5, registerVal6 = ipairs(registerVal2)
	for index7,value8 in registerVal4, registerVal5, registerVal6 do
		local registerVal11 = {}
		registerVal11.models = value8.result
		local registerVal12 = {}
		registerVal12.haveAllIngredients = value8.haveAllIngredients
		registerVal12.recipeIndex = value8.recipeIndex
		registerVal11.properties = registerVal12
		table.insert({}, registerVal11)
	end
	return {}
end

local function __FUNC_2FCB8_(arg0, arg1, arg2)
	if not arg1.scheduleIndexSubscription then
		local registerVal6 = CoD.BubbleGumBuffUtility.GetGobbleGumRecipeInfoModel(arg0)
		local registerVal5 = Engine.GetModel(registerVal6, "scheduleIndex")
		local function __FUNC_2FEAC_(arg0)
			arg1:updateDataSource()
		end

		local registerVal3 = arg1:subscribeToModel(registerVal5, __FUNC_2FEAC_, false)
		arg1.scheduleIndexSubscription = registerVal3
	end
	if not arg1.recipeUpdateSubscription then
		registerVal6 = CoD.BubbleGumBuffUtility.GetGobbleGumRecipeInfoModel(arg0)
		registerVal5 = Engine.GetModel(registerVal6, "update")
		local function __FUNC_2FEFE_(arg0)
			arg1:updateDataSource()
		end

		registerVal3 = arg1:subscribeToModel(registerVal5, __FUNC_2FEFE_, false)
		arg1.recipeUpdateSubscription = registerVal3
	end
end

registerVal1 = ListHelper_SetupDataSource("GobbleGumRecipeResultList", __FUNC_2FACF_, true, nil, __FUNC_2FCB8_)
DataSources.GobbleGumRecipeResultList = registerVal1
local function __FUNC_2FF4E_(arg0)
	local registerVal1 = CoD.BubbleGumBuffUtility.GetGobbleGumRecipeInfoModel(arg0)
	if not registerVal1 then
		return nil
	end
	local registerVal3 = Engine.GetModelValue(Engine.GetModel(registerVal1, "recipeIndex"))
	local registerVal4 = CoD.BubbleGumBuffUtility.GetGobbleGumRecipeForIndex(arg0, registerVal3)
	local registerVal5, registerVal6, registerVal7 = ipairs(registerVal4.ingredients)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal12 = {}
		registerVal12.models = value9
		table.insert({}, registerVal12)
	end
	registerVal6 = Engine.GetModel(registerVal1, "haveAllIngredients")
	Engine.SetModelValue(registerVal6, registerVal4.haveAllIngredients)
	return {}
end

local function __FUNC_301D9_(arg0, arg1, arg2)
	if not arg1.recipeUpdateSubscription then
		local registerVal6 = CoD.BubbleGumBuffUtility.GetGobbleGumRecipeInfoModel(arg0)
		local registerVal5 = Engine.GetModel(registerVal6, "update")
		local function __FUNC_3032A_(arg1)
			local registerVal1 = CoD.BubbleGumBuffUtility.GetGobbleGumRecipeInfoModel(arg0)
			local registerVal2 = Engine.GetModelValue(Engine.GetModel(registerVal1, "recipeIndex"))
			local registerVal3 = CoD.BubbleGumBuffUtility.GetGobbleGumRecipeForIndex(arg0, registerVal2)
			local registerVal5 = Engine.GetModel(registerVal1, "haveAllIngredients")
			Engine.SetModelValue(registerVal5, registerVal3.haveAllIngredients)
		end

		local registerVal3 = arg1:subscribeToModel(registerVal5, __FUNC_3032A_, false)
		arg1.recipeUpdateSubscription = registerVal3
	end
end

registerVal1 = ListHelper_SetupDataSource("GobbleGumRecipeIngredientList", __FUNC_2FF4E_, true, nil, __FUNC_301D9_)
DataSources.GobbleGumRecipeIngredientList = registerVal1
registerVal1 = {}
local function __FUNC_30501_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "GobbleGumRecipeResult")
	registerVal2 = CoD.BubbleGumBuffUtility.GetGobbleGumRecipeInfoModel(arg0)
	local registerVal3 = Engine.GetModelValue(Engine.GetModel(registerVal2, "recipeIndex"))
	local registerVal4 = CoD.BubbleGumBuffUtility.GetGobbleGumRecipeForIndex(arg0, registerVal3)
	if registerVal4 then
		registerVal4.result.fractionText = registerVal4.result.count
		ListHelper_CreateModelsFromTable(registerVal1, registerVal4.result)
	end
	return registerVal1
end

registerVal1.getModel = __FUNC_30501_
DataSources.GobbleGumRecipeResult = registerVal1
local function __FUNC_30798_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	local registerVal6 = Engine.Localize("ZMUI_BUBBLEGUM_TAB_NAME_CAPS")
	registerVal5.tabName = registerVal6
	registerVal6 = Engine.WeaponGroupNewItemCount(arg0, "bubblegum", "", Enum.eModes.MODE_ZOMBIES)
	registerVal5.breadcrumbCount = registerVal6
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.filter = "bubblegum"
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	local registerVal2 = IsProgressionEnabled(arg0)
	registerVal2 = IsInPermanentUnlockMenu(arg0)
	if registerVal2 and not registerVal2 then
		registerVal4 = {}
		registerVal5 = {}
		registerVal6 = Engine.Localize("ZMUI_MEGACHEW_CAPS")
		registerVal5.tabName = registerVal6
		registerVal6 = Engine.WeaponGroupNewItemCount(arg0, "bubblegum_consumable", "", Enum.eModes.MODE_ZOMBIES)
		registerVal5.breadcrumbCount = registerVal6
		registerVal4.models = registerVal5
		registerVal5 = {}
		registerVal5.filter = "bubblegum_consumable"
		registerVal4.properties = registerVal5
		table.insert({}, registerVal4)
	end
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderr
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("BubbleGumTabType", __FUNC_30798_, true)
DataSources.BubbleGumTabType = registerVal1
registerVal1 = {}
local function __FUNC_30BD2_(arg0)
	local registerVal1 = Engine.GetModelForController(arg0)
	local registerVal2 = Engine.CreateModel(registerVal1, "MegaChewTokens")
	local registerVal4 = Engine.CreateModel(registerVal2, "remainingTokens")
	local registerVal5 = Engine.IsLootReady(arg0)
	registerVal5 = Engine.GetZMVials(arg0)
	if registerVal1 or not registerVal5 then
	end
	Engine.SetModelValue(registerVal4, -1.000000)
	return registerVal2
end

registerVal1.getModel = __FUNC_30BD2_
DataSources.MegaChewTokens = registerVal1
registerVal1 = {}
local function __FUNC_30D62_(arg0)
	local registerVal1 = Engine.GetModelForController(arg0)
	local registerVal2 = Engine.CreateModel(registerVal1, "GobbleGumDistills")
	local registerVal3 = Engine.CreateModel(registerVal2, "freeDistills")
	local registerVal4 = Engine.CreateModel(registerVal2, "paidDistills")
	local registerVal7 = Engine.IsLootReady(arg0)
	registerVal7 = Engine.GetInventoryItemQuantity(arg0, Engine.DvarInt(nil, "loot_distill_free_balance_id"))
	if registerVal1 or not registerVal7 then
	end
	Engine.SetModelValue(registerVal3, -1.000000)
	registerVal7 = Engine.IsLootReady(arg0)
	registerVal7 = Engine.GetInventoryItemQuantity(arg0, Engine.DvarInt(nil, "loot_distill_paid_balance_id"))
	if registerVal1 or not registerVal7 then
	end
	Engine.SetModelValue(registerVal4, -1.000000)
	local registerVal5 = CoD.BubbleGumBuffUtility.IsDebuggingEnabled()
	if registerVal5 then
		Engine.SetModelValue(registerVal3, CoD.BubbleGumBuffUtility.Debug.DistillList[CoD.BubbleGumBuffUtility.FREE_DISTILL].uses)
		registerVal7 = CoD.BubbleGumBuffUtility.GetTotalRemainingDistills(arg0)
		Engine.SetModelValue(registerVal4, (registerVal7 - CoD.BubbleGumBuffUtility.Debug.DistillList[CoD.BubbleGumBuffUtility.FREE_DISTILL].uses))
	end
	local registerVal6 = Engine.CreateModel(registerVal2, "totalDistills")
	registerVal7 = Engine.GetModelValue(registerVal3)
	local registerVal8 = Engine.GetModelValue(registerVal4)
	Engine.SetModelValue(registerVal6, (registerVal7 + registerVal8))
	return registerVal2
end

registerVal1.getModel = __FUNC_30D62_
DataSources.GobbleGumDistills = registerVal1
registerVal1 = {}
local function __FUNC_312A3_(arg0)
	local registerVal1 = Engine.GetModelForController(arg0)
	local registerVal2 = Engine.CreateModel(registerVal1, "MegaChewMachines")
	for index3=0.000000, 2.000000, 1.000000 do
		local registerVal8 = Engine.CreateModel(registerVal2, ("machine" .. index3))
		local registerVal12 = Engine.CreateModel(registerVal8, "index")
		Engine.SetModelValue(registerVal12, index3)
		registerVal12 = Engine.CreateModel(registerVal8, "price")
		Engine.SetModelValue(registerVal12, (index3 + 1.000000))
	end
	return registerVal2
end

registerVal1.getModel = __FUNC_312A3_
DataSources.MegaChewMachines = registerVal1
registerVal1 = {}
local function __FUNC_31463_(arg0, arg1, arg2)
	arg1.clientDemoFiles = {}
	local registerVal3 = Engine.GetClientDemoFileCount()
	local registerVal5 = Engine.GetGlobalModel()
	local registerVal4 = Engine.CreateModel(registerVal5, "ClientDemo")
	for index5=1.000000, registerVal3, 1.000000 do
		local registerVal10 = Engine.GetClientDemoFileInfo((index5 - 1.000000))
		local registerVal11 = Engine.CreateModel(registerVal4, (index5 - 1.000000))
		local registerVal13 = Engine.CreateModel(registerVal11, "index")
		Engine.SetModelValue(registerVal13, (index5 - 1.000000))
		registerVal13 = Engine.CreateModel(registerVal11, "fileName")
		Engine.SetModelValue(registerVal13, registerVal10.fileName)
		registerVal13 = Engine.CreateModel(registerVal11, "gameType")
		Engine.SetModelValue(registerVal13, registerVal10.gameType)
		registerVal13 = Engine.CreateModel(registerVal11, "mapName")
		Engine.SetModelValue(registerVal13, registerVal10.mapName)
		registerVal13 = Engine.CreateModel(registerVal11, "authorName")
		Engine.SetModelValue(registerVal13, registerVal10.authorName)
		registerVal13 = Engine.CreateModel(registerVal11, "createTime")
		Engine.SetModelValue(registerVal13, registerVal10.createTime)
		registerVal13 = Engine.CreateModel(registerVal11, "duration")
		Engine.SetModelValue(registerVal13, registerVal10.duration)
		table.insert(arg1.clientDemoFiles, registerVal11)
	end
end

registerVal1.prepare = __FUNC_31463_
local function __FUNC_31842_(arg0)
	return #arg0.clientDemoFiles
end

registerVal1.getCount = __FUNC_31842_
local function __FUNC_31899_(arg0, arg1, arg2)
	return arg1.clientDemoFiles[arg2]
end

registerVal1.getItem = __FUNC_31899_
DataSources.ClientDemoFiles = registerVal1
local function __FUNC_318F9_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	local registerVal6 = Engine.ToUpper(Engine.Localize("MENU_MY_THEATER"))
	registerVal5.tabName = registerVal6
	registerVal5.tabWidget = "CoD.SelectFilm_MyTheater"
	registerVal5.tabIcon = ""
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "mytheater"
	registerVal5.selectIndex = false
	registerVal5.disabled = false
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal6 = Engine.ToUpper(Engine.Localize("MENU_COMMUNITY"))
	registerVal5.tabName = registerVal6
	registerVal5.tabWidget = "CoD.SelectFilm_MyTheater"
	registerVal5.tabIcon = ""
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "community"
	registerVal5.selectIndex = false
	registerVal5.disabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderr
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("TheaterSelectFilmTabs", __FUNC_318F9_)
DataSources.TheaterSelectFilmTabs = registerVal1
registerVal1 = {}
local function __FUNC_31C77_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	local registerVal2 = Engine.GetGlobalModel()
	return Engine.CreateModel(registerVal2, "demo")
end

registerVal1.getModel = __FUNC_31C77_
DataSources.Demo = registerVal1
registerVal1 = {}
local function __FUNC_31D59_(arg0, arg1, arg2)
	arg1.buttons = {}
	local registerVal5 = Engine.GetGlobalModel()
	local registerVal4 = Engine.GetModel(registerVal5, "demo.isPaused")
	registerVal5 = Engine.GetModelValue(registerVal4)
	local registerVal7 = Engine.GetGlobalModel()
	local registerVal6 = Engine.GetModel(registerVal7, "demo.contextMode")
	local registerVal8 = Engine.GetGlobalModel()
	registerVal7 = Engine.GetModel(registerVal8, "demo.clipState")
	local registerVal9 = Engine.GetGlobalModel()
	registerVal8 = Engine.GetModel(registerVal9, "demo.timeScale")
	local registerVal10 = Engine.GetGlobalModel()
	registerVal9 = Engine.GetModel(registerVal10, "demo.cameraMode")
	local registerVal11 = Engine.GetGlobalModel()
	registerVal10 = Engine.GetModel(registerVal11, "demo.freeCameraMode")
	local registerVal12 = Engine.GetGlobalModel()
	registerVal11 = Engine.GetModel(registerVal12, "demo.keyframeForJumpBack")
	local registerVal13 = Engine.GetGlobalModel()
	registerVal12 = Engine.GetModel(registerVal13, "demo.keyframeForJumpForward")
	local registerVal14 = Engine.GetGlobalModel()
	registerVal13 = Engine.GetModel(registerVal14, "demo.dollyCamMarkerForJumpBack")
	local registerVal15 = Engine.GetGlobalModel()
	registerVal14 = Engine.GetModel(registerVal15, "demo.dollyCamMarkerForJumpForward")
	local registerVal16 = Engine.GetGlobalModel()
	registerVal15 = Engine.GetModel(registerVal16, "demo.dollyCamMarkerCount")
	local registerVal17 = Engine.GetGlobalModel()
	registerVal16 = Engine.GetModel(registerVal17, "demo.editingDollyCameraMarker")
	registerVal17 = Engine.GetModelValue(registerVal16)
	local registerVal19 = Engine.GetGlobalModel()
	local registerVal18 = Engine.GetModel(registerVal19, "demo.currentDollyCamMarkerTimeScaleMode")
	registerVal19 = Engine.GetModelValue(registerVal18)
	local registerVal21 = Engine.GetGlobalModel()
	local registerVal20 = Engine.GetModel(registerVal21, "demo.isRepositioningDollyCamMarker")
	registerVal21 = Engine.GetModelValue(registerVal20)
	local registerVal23 = Engine.GetGlobalModel()
	local registerVal22 = Engine.GetModel(registerVal23, "demo.lightmanMarkerCount")
	local registerVal24 = Engine.GetGlobalModel()
	registerVal23 = Engine.GetModel(registerVal24, "demo.editingLightmanMarker")
	registerVal24 = Engine.GetModelValue(registerVal23)
	local registerVal26 = Engine.GetGlobalModel()
	local registerVal25 = Engine.GetModel(registerVal26, "demo.currentLightmanMarkerLightMode")
	registerVal26 = Engine.GetModelValue(registerVal25)
	local registerVal28 = Engine.GetGlobalModel()
	local registerVal27 = Engine.GetModel(registerVal28, "demo.isRepositioningLightmanMarker")
	registerVal28 = Engine.GetModelValue(registerVal27)
	local registerVal30 = Engine.GetGlobalModel()
	local registerVal29 = Engine.GetModel(registerVal30, "demo.isCreatingHighlightReel")
	registerVal30 = Engine.GetModelValue(registerVal29)
	local registerVal32 = Engine.GetGlobalModel()
	local registerVal31 = Engine.GetModel(registerVal32, "demo.networkProfiling")
	registerVal32 = Engine.GetModelValue(registerVal31)
	local function __FUNC_33D30_(arg0)
		if 6.000000 <= arg0 then
			return "theater_fastforward_3"
		else
			if 4.000000 <= arg0 then
				return "theater_fastforward_2"
			else
				if 2.000000 <= arg0 then
					return "theater_fastforward_1"
				else
					return "theater_fastforward"
				end
			end
		end
	end

	local function __FUNC_33E29_(arg0)
		if arg0 == Enum.demoDollyCameraTimeScaleMode.DEMO_DOLLYCAM_TIMESCALE_MODE_FIXED then
			return "theater_draw_straight"
		else
			if arg0 == Enum.demoDollyCameraTimeScaleMode.DEMO_DOLLYCAM_TIMESCALE_MODE_LINEAR then
				return "theater_draw_angle"
			else
				return "theater_draw"
			end
		end
	end

	local function __FUNC_33F9A_(arg0)
		if arg0 == Enum.demoDollyCameraTimeScaleMode.DEMO_DOLLYCAM_TIMESCALE_MODE_FIXED then
			return "DEMO_DOLLY_CAMERA_SPEED_MODE_FIXED_HINT"
		else
			if arg0 == Enum.demoDollyCameraTimeScaleMode.DEMO_DOLLYCAM_TIMESCALE_MODE_LINEAR then
				return "DEMO_DOLLY_CAMERA_SPEED_MODE_LINEAR_HINT"
			else
				return "DEMO_DOLLY_CAMERA_SPEED_MODE_MANUAL_HINT"
			end
		end
	end

	local function __FUNC_3414E_(arg0)
		if arg0 == Enum.demoLightmanLightMode.DEMO_LIGHTMAN_LIGHT_MODE_OMNI then
			return "theater_light_omni"
		else
			return "theater_light_spot"
		end
	end

	local function __FUNC_3423C_(arg0)
		if arg0 == Enum.demoLightmanLightMode.DEMO_LIGHTMAN_LIGHT_MODE_OMNI then
			return "DEMO_LIGHTMAN_LIGHT_MODE_OMNI_HINT"
		else
			return "DEMO_LIGHTMAN_LIGHT_MODE_SPOT_HINT"
		end
	end

	local function __FUNC_3434C_(arg0)
		local registerVal1 = Engine.IsDemoClipRecording()
		if registerVal1 then
			return "DEMO_STOP_RECORD_HINT"
		else
			registerVal1 = Engine.IsDemoCameraEditMode()
			if registerVal1 then
				return "DEMO_RECORD_AND_PLAY_DOLLY_CAMERA_HINT"
			else
				registerVal1 = Engine.GetProfileVarInt(arg0, "demo_recordWithAutoPlay")
				if registerVal1 ~= 0.000000 then
					return "DEMO_RECORD_AND_PLAY_HINT"
				else
					return "DEMO_RECORD_HINT"
				end
			end
		end
	end

	local function __FUNC_34517_()
		CoD.DemoUtility.UnpauseIfPaused(arg0)
		Engine.SwitchDemoFreeCameraMode(Enum.demoFreeCameraMode.DEMO_FREECAM_MODE_DOLLY)
	end

	local function __FUNC_3464C_(arg0, arg1, arg2, arg3, arg4)
		if arg1.btnId == "screenshot" then
			Engine.Exec(arg2, "demo_screenshot")
		else
			if arg1.btnId == "record" then
				local registerVal6 = Engine.IsDemoClipRecording()
				if registerVal6 then
					Engine.Exec(arg2, "demo_pausecliprecord")
				else
					registerVal6 = Engine.IsDemoCameraEditMode()
					if registerVal6 then
						__FUNC_34517_()
					end
					registerVal6 = Engine.GetProfileVarInt(arg2, "demo_recordWithAutoPlay")
					if registerVal6 ~= 0.000000 then
						CoD.DemoUtility.UnpauseIfPaused(arg2)
					end
					Engine.Exec(arg2, "demo_startcliprecord")
				else
					if arg1.btnId == "jumpback" then
						DemoJumpBack(arg2)
					else
						if arg1.btnId == "jumpforward" then
							Engine.Exec(arg2, "demo_forward")
						else
							if arg1.btnId == "play" or arg1.btnId == "pause" then
								CoD.DemoUtility.RunPauseCommand(arg2)
							else
								if arg1.btnId == "fastforward" then
									registerVal6 = UpdateDemoFastForward(arg2)
									local registerVal8 = arg1:getModel()
									local registerVal7 = Engine.GetModel(registerVal8, "icon")
									registerVal8 = __FUNC_33D30_(registerVal6)
									Engine.SetModelValue(registerVal7, registerVal8)
									local registerVal10 = arg1:getModel()
									local registerVal9 = Engine.GetModel(registerVal10, "hintText")
									Engine.SetModelValue(registerVal9, Engine.Localize("DEMO_FAST_FORWARD_HINT", CoD.DemoUtility.GetRoundedTimeScale()))
								else
									if arg1.btnId == "options" then
										SetGlobalModelValueTrue("demo.showOptionsSidebar")
										registerVal7 = arg0:getParent()
										OpenPopupWithPriority(registerVal7, "DemoOptionsSidebar", arg2, 100.000000)
									else
										if arg1.btnId == "jumpbackdollycamera" then
											CoD.DemoUtility.SwitchToDollyCamMarker(arg2, Engine.GetModelValue(registerVal13))
										else
											if arg1.btnId == "playdollycamera" then
												__FUNC_34517_()
											else
												if arg1.btnId == "pausedollycamera" then
													Engine.SwitchDemoFreeCameraMode(Enum.demoFreeCameraMode.DEMO_FREECAM_MODE_EDIT)
												else
													if arg1.btnId == "jumpforwarddollycamera" then
														CoD.DemoUtility.SwitchToDollyCamMarker(arg2, Engine.GetModelValue(registerVal14))
													else
														if arg1.btnId == "movedollycameramarker" then
															if registerVal21 then
																DemoPlaceDollyCameraMarker(arg2)
															else
																CoD.DemoUtility.RepositionDollyCamMarker(arg2, Engine.GetHighlightedCameraMarker())
															else
																if arg1.btnId == "deletedollycameramarker" then
																	CoD.DemoUtility.RemoveDollyCamMarker(arg2, Engine.GetHighlightedCameraMarker())
																	CoD.DemoUtility.SetEditingDollyCameraMarker(arg2, false)
																else
																	if arg1.btnId == "deletealldollycameramarkers" then
																		registerVal6 = arg4:getParent()
																		CoD.OverlayUtility.CreateOverlay(arg2, registerVal6, "DemoDeleteAllDollyCameraMarkers")
																	else
																		if arg1.btnId == "movelightmanmarker" then
																			if registerVal28 then
																				DemoPlaceLightmanMarker(arg2)
																			else
																				CoD.DemoUtility.RepositionLightmanMarker(arg2, Engine.GetHighlightedCameraMarker())
																			else
																				if arg1.btnId == "lightmanlightcolor" then
																					registerVal6 = arg4:getParent()
																					OpenPopupWithPriority(registerVal6, "LightmanColorPicker", arg2, 200.000000)
																					registerVal9 = Engine.GetGlobalModel()
																					registerVal8 = Engine.GetModel(registerVal9, "demo.showLightmanColorPicker")
																					Engine.SetModelValue(registerVal8, true)
																				else
																					if arg1.btnId == "deletelightmanmarker" then
																						CoD.DemoUtility.RemoveLightmanMarker(arg2, Engine.GetHighlightedCameraMarker())
																						CoD.DemoUtility.SetEditingLightmanMarker(arg2, false)
																					else
																						if arg1.btnId == "deletealllightmanmarkers" then
																							registerVal6 = arg4:getParent()
																							CoD.OverlayUtility.CreateOverlay(arg2, registerVal6, "DemoDeleteAllLightmanMarkers")
																						end
																					end
																				end
																			end
																		end
																	end
																end
															end
														end
													end
												end
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end

	if registerVal32 == true then
		if registerVal5 == true then
			local registerVal43 = {}
			registerVal43.btnId = "play"
			registerVal43.icon = "theater_play"
			registerVal43.hintText = "DEMO_PLAY_HINT"
			table.insert({}, registerVal43)
		else
			registerVal43 = {}
			registerVal43.btnId = "pause"
			registerVal43.icon = "theater_pause"
			registerVal43.hintText = "DEMO_PAUSE_HINT"
			table.insert({}, registerVal43)
		else
			local registerVal41 = IsDemoClipPreviewRunning()
			if not arg1 or registerVal30 then
				registerVal43 = {}
				registerVal43.btnId = "dummy"
				registerVal43.icon = "theater_move"
				registerVal43.hintText = ""
				registerVal43.disabled = true
				table.insert({}, registerVal43)
			else
				if registerVal17 then
					registerVal43 = {}
					registerVal43.btnId = "movedollycameramarker"
					registerVal43.icon = "theater_move"
					registerVal43.hintText = "DEMO_MOVE_DOLLY_CAMERA_HINT"
					table.insert({}, registerVal43)
					registerVal43 = {}
					registerVal43.btnId = "dollycameraspeedmode"
					local registerVal44 = __FUNC_33E29_(registerVal19)
					registerVal43.icon = registerVal44
					registerVal44 = __FUNC_33F9A_(registerVal19)
					registerVal43.hintText = registerVal44
					if registerVal21 ~= true then
					end
					registerVal43.disabled = true
					table.insert({}, registerVal43)
					registerVal43 = {}
					registerVal43.btnId = "dollycameratimescale"
					registerVal43.icon = nil
					registerVal43.hintText = "DEMO_DOLLY_CAMERA_SPEED_HINT"
					if registerVal19 ~= Enum.demoDollyCameraTimeScaleMode.DEMO_DOLLYCAM_TIMESCALE_MODE_MANUAL and registerVal21 ~= true then
					end
					registerVal43.disabled = true
					table.insert({}, registerVal43)
					registerVal43 = {}
					registerVal43.btnId = "deletedollycameramarker"
					registerVal43.icon = "theater_video_x"
					registerVal43.hintText = "DEMO_DOLLY_CAMERA_DELETE_HINT"
					if registerVal21 ~= true then
					end
					registerVal43.disabled = true
					table.insert({}, registerVal43)
					registerVal43 = {}
					registerVal43.btnId = "deletealldollycameramarkers"
					registerVal43.icon = "theater_video_xx"
					registerVal43.hintText = "DEMO_DOLLY_CAMERA_DELETE_ALL_HINT"
					if registerVal21 ~= true then
					end
					registerVal43.disabled = true
					table.insert({}, registerVal43)
				else
					if registerVal24 then
						registerVal43 = {}
						registerVal43.btnId = "movelightmanmarker"
						registerVal43.icon = "theater_move"
						registerVal43.hintText = "DEMO_MOVE_LIGHT_HINT"
						table.insert({}, registerVal43)
						registerVal43 = {}
						registerVal43.btnId = "lightmanlightmode"
						registerVal44 = __FUNC_3414E_(registerVal26)
						registerVal43.icon = registerVal44
						registerVal44 = __FUNC_3423C_(registerVal26)
						registerVal43.hintText = registerVal44
						if registerVal28 ~= true then
						end
						registerVal43.disabled = true
						table.insert({}, registerVal43)
						registerVal43 = {}
						registerVal43.btnId = "lightmanlightintensity"
						registerVal43.icon = "theater_light_intensity"
						registerVal43.hintText = "DEMO_LIGHT_INTENSITY_HINT"
						if registerVal28 ~= true then
						end
						registerVal43.disabled = true
						table.insert({}, registerVal43)
						registerVal43 = {}
						registerVal43.btnId = "lightmanlightrange"
						registerVal43.icon = "theater_light_range"
						registerVal43.hintText = "DEMO_LIGHT_RANGE_HINT"
						if registerVal28 ~= true then
						end
						registerVal43.disabled = true
						table.insert({}, registerVal43)
						registerVal43 = {}
						registerVal43.btnId = "lightmanlightcolor"
						registerVal43.icon = "theater_light_color"
						registerVal43.hintText = "DEMO_LIGHT_COLOR_HINT"
						if registerVal28 ~= true then
						end
						registerVal43.disabled = true
						table.insert({}, registerVal43)
						registerVal43 = {}
						registerVal43.btnId = "deletelightmanmarker"
						registerVal43.icon = "theater_video_x"
						registerVal43.hintText = "DEMO_LIGHT_DELETE_HINT"
						if registerVal28 ~= true then
						end
						registerVal43.disabled = true
						table.insert({}, registerVal43)
						registerVal43 = {}
						registerVal43.btnId = "deletealllightmanmarkers"
						registerVal43.icon = "theater_video_xx"
						registerVal43.hintText = "DEMO_LIGHT_DELETE_ALL_HINT"
						if registerVal28 ~= true then
						end
						registerVal43.disabled = true
						table.insert({}, registerVal43)
					else
						registerVal41 = IsDemoRestrictedBasicMode()
						if not registerVal41 then
							registerVal41 = IsDemoContextPlaybackMode()
							registerVal41 = IsDemoContextHighlightReelMode()
							if not registerVal41 and not registerVal41 then
								registerVal43 = {}
								registerVal43.btnId = "screenshot"
								registerVal43.icon = "theater_photo"
								registerVal43.hintText = "DEMO_SCREENSHOT_HINT"
								table.insert({}, registerVal43)
								registerVal43 = {}
								registerVal43.btnId = "record"
								registerVal43.icon = "theater_record"
								registerVal44 = __FUNC_3434C_(arg0)
								registerVal43.hintText = registerVal44
								registerVal43.spacerWidth = 10.000000
								table.insert({}, registerVal43)
							else
								registerVal43 = {}
								registerVal43.btnId = "screenshot"
								registerVal43.icon = "theater_photo"
								registerVal43.hintText = "DEMO_SCREENSHOT_HINT"
								registerVal43.spacerWidth = 10.000000
								table.insert({}, registerVal43)
							end
						end
						registerVal43 = {}
						registerVal43.btnId = "jumpback"
						registerVal43.icon = "theater_back"
						registerVal43.hintText = "DEMO_JUMP_BACK_HINT"
						registerVal44 = Engine.GetModelValue(registerVal11)
						if registerVal44 ~= -1.000000 then
						end
						registerVal43.disabled = true
						table.insert({}, registerVal43)
						registerVal41 = IsDemoContextDirectorMode()
						if registerVal41 then
							registerVal44 = Engine.GetModelValue(registerVal13)
							if registerVal44 == -1.000000 then
							end
							local registerVal46 = {}
							registerVal46.btnId = "jumpbackdollycamera"
							registerVal46.icon = "theater_back_active"
							registerVal46.hintText = "DEMO_KEYFRAME_REQUIRED"
							registerVal46.disabled = true
							registerVal46.disabledWithFocus = true
							table.insert({}, registerVal46)
						end
						if registerVal5 == true then
							registerVal43 = {}
							registerVal43.btnId = "play"
							registerVal43.icon = "theater_play"
							registerVal43.hintText = "DEMO_PLAY_HINT"
							table.insert({}, registerVal43)
						else
							registerVal43 = {}
							registerVal43.btnId = "pause"
							registerVal43.icon = "theater_pause"
							registerVal43.hintText = "DEMO_PAUSE_HINT"
							table.insert({}, registerVal43)
						end
						registerVal41 = IsDemoContextDirectorMode()
						if registerVal41 then
							registerVal41 = Engine.IsDemoDollyCamera()
							if registerVal41 then
								registerVal43 = {}
								registerVal43.btnId = "pausedollycamera"
								registerVal43.icon = "theater_video_pause"
								registerVal43.hintText = "DEMO_PAUSE_DOLLY_CAMERA_HINT"
								table.insert({}, registerVal43)
							else
								registerVal43 = Engine.GetModelValue(registerVal15)
								if registerVal43 <= 0.000000 then
								end
								local registerVal45 = {}
								registerVal45.btnId = "playdollycamera"
								registerVal45.icon = "theater_video_play"
								registerVal45.hintText = "DEMO_PLAY_DOLLY_CAMERA_NOMARKERS_HINT"
								registerVal45.disabled = true
								table.insert({}, registerVal45)
							end
						end
						registerVal41 = IsDemoContextPlaybackMode()
						if not registerVal41 then
							registerVal43 = {}
							registerVal43.btnId = "fastforward"
							registerVal44 = __FUNC_33D30_(CoD.DemoUtility.GetRoundedTimeScale())
							registerVal43.icon = registerVal44
							registerVal44 = Engine.Localize("DEMO_FAST_FORWARD_HINT", CoD.DemoUtility.GetRoundedTimeScale())
							registerVal43.hintText = registerVal44
							table.insert({}, registerVal43)
						end
						registerVal41 = IsDemoContextDirectorMode()
						if registerVal41 then
							registerVal44 = Engine.GetModelValue(registerVal14)
							if registerVal44 == -1.000000 then
							end
							registerVal46 = {}
							registerVal46.btnId = "jumpforwarddollycamera"
							registerVal46.icon = "theater_forward_active"
							registerVal46.hintText = "DEMO_KEYFRAME_REQUIRED"
							registerVal46.disabled = true
							registerVal46.disabledWithFocus = true
							table.insert({}, registerVal46)
						end
						registerVal43 = {}
						registerVal43.btnId = "jumpforward"
						registerVal43.icon = "theater_forward"
						registerVal43.hintText = "DEMO_JUMP_FORWARD_HINT"
						registerVal44 = Engine.GetModelValue(registerVal12)
						if registerVal44 ~= -1.000000 then
						end
						registerVal43.disabled = true
						table.insert({}, registerVal43)
						registerVal41 = IsDemoContextPlaybackMode()
						if not registerVal41 then
							registerVal43 = {}
							registerVal43.btnId = "timescale"
							registerVal43.icon = nil
							registerVal43.hintText = "DEMO_TIMESCALE_HINT"
							table.insert({}, registerVal43)
							registerVal41 = IsDemoContextBasicOrHighlightReelMode()
							if registerVal41 then
								registerVal43 = {}
								registerVal43.btnId = "cameramode"
								registerVal43.icon = "theater_video"
								registerVal43.hintText = "DEMO_CHANGE_CAMERA_HINT"
								table.insert({}, registerVal43)
							end
							registerVal41 = IsDemoRestrictedBasicMode()
							registerVal41 = Engine.IsDemoClipPlaying()
							if not registerVal41 and not registerVal41 then
								registerVal43 = {}
								registerVal43.btnId = "options"
								registerVal43.icon = "theater_settings"
								registerVal43.hintText = "DEMO_OPTIONS_HINT"
								table.insert({}, registerVal43)
							end
						end
					end
				end
			end
		end
	end
	registerVal41, registerVal42, registerVal43 = ipairs({})
	for index44,value45 in registerVal41, registerVal42, registerVal43 do
		registerVal46 = {}
		registerVal46.btnId = value45.btnId
		registerVal46.spacerWidth = value45.spacerWidth
		local registerVal49 = Engine.GetGlobalModel()
		local registerVal48 = Engine.CreateModel(registerVal49, "DemoControls")
		local registerVal47 = Engine.CreateModel(registerVal48, ("buttonModel_" .. index44))
		local registerVal50 = {}
		registerVal50.model = registerVal47
		registerVal50.properties = registerVal46
		table.insert(arg1.buttons, registerVal50)
		registerVal49 = Engine.CreateModel(registerVal47, "btnId")
		Engine.SetModelValue(registerVal49, value45.btnId)
		registerVal49 = Engine.CreateModel(registerVal47, "icon")
		Engine.SetModelValue(registerVal49, value45.icon)
		registerVal49 = Engine.CreateModel(registerVal47, "hintText")
		Engine.SetModelValue(registerVal49, Engine.Localize(value45.hintText))
		registerVal49 = Engine.CreateModel(registerVal47, "action")
		Engine.SetModelValue(registerVal49, __FUNC_3464C_)
		if value45.disabled == true then
			registerVal49 = Engine.CreateModel(registerVal47, "disabled")
			Engine.SetModelValue(registerVal49, true)
		else
			registerVal49 = Engine.CreateModel(registerVal47, "disabled")
			Engine.SetModelValue(registerVal49, false)
		end
		if value45.disabledWithFocus == true then
			registerVal49 = Engine.CreateModel(registerVal47, "disabledWithFocus")
			Engine.SetModelValue(registerVal49, true)
		else
			registerVal49 = Engine.CreateModel(registerVal47, "disabledWithFocus")
			Engine.SetModelValue(registerVal49, false)
		end
	end
	local function __FUNC_353C3_()
		arg1:updateDataSource()
	end

	if not arg1.subscribedToModels then
		arg1:subscribeToModel(registerVal4, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal9, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal10, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal11, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal12, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal6, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal7, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal8, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal13, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal14, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal15, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal16, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal18, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal20, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal22, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal23, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal25, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal27, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal29, __FUNC_353C3_, false)
		arg1:subscribeToModel(registerVal31, __FUNC_353C3_, false)
		arg1.subscribedToModels = true
	end
end

registerVal1.prepare = __FUNC_31D59_
local function __FUNC_35412_(arg0)
	return #arg0.buttons
end

registerVal1.getCount = __FUNC_35412_
local function __FUNC_35461_(arg0, arg1, arg2)
	return arg1.buttons[arg2].model
end

registerVal1.getItem = __FUNC_35461_
local function __FUNC_354D4_(arg0, arg1)
	return arg0.buttons[arg1].properties
end

registerVal1.getCustomPropertiesForItem = __FUNC_354D4_
local function __FUNC_3554D_(arg0, arg1, arg2)
	if arg0.buttons[arg1].properties.spacerWidth then
		return arg0.buttons[arg1].properties.spacerWidth
	end
	return 0.000000
end

registerVal1.getSpacerAfterColumn = __FUNC_3554D_
local function __FUNC_3562B_(arg0, arg1, arg2, arg3)
	if arg0.buttons[arg3].properties.btnId == "timescale" then
		return CoD.DemoControlsButtonTimeScale
	else
		if arg0.buttons[arg3].properties.btnId == "dollycameratimescale" then
			return CoD.DemoControlsButtonDollyCameraTimeScale
		else
			if arg0.buttons[arg3].properties.btnId == "cameramode" then
				return CoD.DemoControlsButtonCameraMode
			else
				if arg0.buttons[arg3].properties.btnId == "dollycameraspeedmode" then
					return CoD.DemoControlsButtonDollyCameraSpeedMode
				else
					if arg0.buttons[arg3].properties.btnId == "lightmanlightmode" then
						return CoD.DemoControlsButtonLightmanLightMode
					else
						if arg0.buttons[arg3].properties.btnId == "lightmanlightintensity" or arg0.buttons[arg3].properties.btnId == "lightmanlightrange" then
							return CoD.DemoControlsButtonLightmanLightFloatParam
						end
					end
				end
			end
		end
	end
	return CoD.DemoControlsButton
end

registerVal1.getWidgetTypeForItem = __FUNC_3562B_
DataSources.DemoControlsButtons = registerVal1
local function __FUNC_3597E_(arg0)
	local registerVal5 = {}
	registerVal5.name = "MENU_OFF"
	registerVal5.value = 0.000000
	table.insert({}, registerVal5)
	registerVal5 = {}
	registerVal5.name = "MENU_ON"
	registerVal5.value = 1.000000
	table.insert({}, registerVal5)
	for index4=1.000000, 10.000000, 1.000000 do
		local registerVal8 = string.format("%d", index4)
		local registerVal11 = {}
		registerVal11.name = registerVal8
		registerVal11.value = index4
		table.insert({}, registerVal11)
	end
	local registerVal4 = {}
	registerVal5 = {}
	registerVal5.name = "RecordWithAutoPlay"
	registerVal5.displayText = "DEMO_OPTIONS_RECORD_WITH_AUTO_PLAY"
	registerVal5.hintText = "DEMO_OPTIONS_RECORD_WITH_AUTO_PLAY_HINT"
	registerVal5.profileVar = "demo_recordWithAutoPlay"
	registerVal5.options = {}
	local registerVal6 = {}
	registerVal6.name = "ToggleGameHUD"
	registerVal6.displayText = "DEMO_OPTIONS_TOGGLE_GAME_HUD"
	registerVal6.hintText = "DEMO_OPTIONS_TOGGLE_GAME_HUD_HINT"
	registerVal6.profileVar = "demo_toggleGameHud"
	registerVal6.options = {}
	registerVal6.spacerHeight = 50.000000
	local registerVal7 = {}
	registerVal7.name = "AutoDollyRecord"
	registerVal7.displayText = "DEMO_OPTIONS_AUTO_DOLLY_RECORD"
	registerVal7.hintText = "DEMO_OPTIONS_AUTO_DOLLY_RECORD_HINT"
	registerVal7.profileVar = "demo_autoDollyRecord"
	registerVal7.options = {}
	registerVal8 = {}
	registerVal8.name = "AutoDollyKeyframeInterval"
	registerVal8.displayText = "DEMO_OPTIONS_AUTO_DOLLY_KEYFRAME_INTERVAL"
	registerVal8.hintText = "DEMO_OPTIONS_AUTO_DOLLY_KEYFRAME_INTERVAL_HINT"
	registerVal8.profileVar = "demo_autoDollyKeyframeInterval"
	registerVal8.options = {}
	registerVal4 = {registerVal5, registerVal6, registerVal7, registerVal8}
	local function __FUNC_36088_(arg0, arg1, arg2, arg3, arg4)
		if arg3 then
			Engine.SetProfileVar(arg2, arg3, arg1.value)
			if arg3 == "demo_toggleGameHud" then
				if arg1.value == 1.000000 then
					Engine.ExecNow(arg2, "demo_hidegamehud 0")
				else
					Engine.ExecNow(arg2, "demo_hidegamehud 1")
				else
					if arg3 == "demo_autoDollyRecord" and arg4.occludedMenu and arg4.occludedMenu.Demo then
						UpdateElementState(arg4.occludedMenu.Demo, "DemoPlaybackControlsButtonBar", arg2)
					else
						if arg3 == "demo_recordWithAutoPlay" and arg4.occludedMenu and arg4.occludedMenu.Demo and arg4.occludedMenu.Demo.DemoPlaybackControls and arg4.occludedMenu.Demo.DemoPlaybackControls.ButtonList then
							UpdateDataSource(arg4.occludedMenu.Demo.DemoPlaybackControls, arg4.occludedMenu.Demo.DemoPlaybackControls.ButtonList, arg2)
						end
					end
				end
			end
		end
	end

	registerVal6, registerVal7, registerVal8 = ipairs(registerVal4)
	for index9,value10 in registerVal6, registerVal7, registerVal8 do
		local registerVal13 = {}
		local registerVal14 = {}
		registerVal14.displayText = value10.displayText
		registerVal14.hintText = value10.hintText
		registerVal14.buttonOnly = false
		registerVal14.disabled = false
		local registerVal15 = CoD.OptionsUtility.CreateCustomOptionDataSource(arg0, ("DemoOptionsButtonList_" .. value10.name), value10.options, value10.profileVar, nil, __FUNC_36088_)
		registerVal14.optionsDatasource = registerVal15
		registerVal15 = CoD.OptionsUtility.GetProfileSelection(arg0, value10.options, value10.profileVar)
		registerVal14.currentSelection = registerVal15
		registerVal14.selected = false
		registerVal13.models = registerVal14
		registerVal14 = {}
		registerVal14.hideArrows = false
		registerVal14.disabled = false
		registerVal14.spacerHeight = value10.spacerHeight
		registerVal13.properties = registerVal14
		table.insert({}, registerVal13)
	end
	return {}
end

local function __FUNC_3643A_(arg0, arg1, arg2)
	if arg0.DemoOptionsButtonList[arg1].properties.spacerHeight then
		return arg0.DemoOptionsButtonList[arg1].properties.spacerHeight
	end
	return arg0.spacing
end

registerVal1 = ListHelper_SetupDataSource("DemoOptionsButtonList", __FUNC_3597E_, nil, nil, nil, __FUNC_3643A_)
DataSources.DemoOptionsButtonList = registerVal1
local function __FUNC_3653A_(arg0)
	local function __FUNC_36A09_(arg0, arg1, arg2, arg3, arg4)
		local registerVal6 = CoD.DemoUtility.GetDemoContextMode()
		if registerVal6 == Enum.demoContextMode.DEMO_CONTEXT_MODE_BASIC then
			local registerVal10 = Engine.GetGlobalModel()
			local registerVal8 = Engine.GetModelValue(Engine.GetModel(registerVal10, "demo.cameraMode"))
			CoD.perController[arg2].prevDemoCameraMode = registerVal8
		end
		if arg1.btnId == "basic" then
			if CoD.perController[arg2].prevDemoCameraMode then
				Engine.SwitchDemoCameraMode(CoD.perController[arg2].prevDemoCameraMode)
			else
				Engine.SwitchDemoCameraMode(Enum.demoCameraMode.DEMO_CAMERA_MODE_NONE)
			end
			Engine.SwitchDemoFreeCameraMode(Enum.demoFreeCameraMode.DEMO_FREECAM_MODE_FREEROAM)
			CoD.DemoUtility.SetDemoContextMode(Enum.demoContextMode.DEMO_CONTEXT_MODE_BASIC)
		else
			if arg1.btnId == "director" then
				Engine.SwitchDemoCameraMode(Enum.demoCameraMode.DEMO_CAMERA_MODE_FREECAM)
				Engine.SwitchDemoFreeCameraMode(Enum.demoFreeCameraMode.DEMO_FREECAM_MODE_EDIT)
				CoD.DemoUtility.SetDemoContextMode(Enum.demoContextMode.DEMO_CONTEXT_MODE_DIRECTOR)
			else
				if arg1.btnId == "objectlink" then
					Engine.SwitchDemoCameraMode(Enum.demoCameraMode.DEMO_CAMERA_MODE_FREECAM)
					Engine.SwitchDemoFreeCameraMode(Enum.demoFreeCameraMode.DEMO_FREECAM_MODE_LOCK_ON)
					CoD.DemoUtility.SetDemoContextMode(Enum.demoContextMode.DEMO_CONTEXT_MODE_OBJECT_LINK)
				else
					if arg1.btnId == "lighter" then
						Engine.SwitchDemoCameraMode(Enum.demoCameraMode.DEMO_CAMERA_MODE_FREECAM)
						Engine.SwitchDemoFreeCameraMode(Enum.demoFreeCameraMode.DEMO_FREECAM_MODE_LIGHTMAN)
						CoD.DemoUtility.SetDemoContextMode(Enum.demoContextMode.DEMO_CONTEXT_MODE_LIGHTER)
					else
						if arg1.btnId == "timeline" then
							registerVal8 = arg0:getParent()
							StartMenuOpenManageSegments(registerVal8, arg1, arg2, arg3, arg4)
						end
					end
				end
			end
		end
	end

	local registerVal4 = IsDemoContextHighlightReelMode()
	if not registerVal4 then
		local registerVal6 = {}
		registerVal6.btnId = "basic"
		registerVal6.displayText = "DEMO_MODE_BASIC"
		registerVal6.hintText = "DEMO_MODE_BASIC_HINT"
		registerVal6.icon = "theater_play"
		table.insert({}, registerVal6)
		registerVal6 = {}
		registerVal6.btnId = "director"
		registerVal6.displayText = "DEMO_MODE_DIRECTOR"
		registerVal6.hintText = "DEMO_MODE_DIRECTOR_HINT"
		registerVal6.icon = "theater_video"
		table.insert({}, registerVal6)
		registerVal6 = {}
		registerVal6.btnId = "objectlink"
		registerVal6.displayText = "DEMO_MODE_OBJECT_LINK"
		registerVal6.hintText = "DEMO_MODE_OBJECT_LINK_HINT"
		registerVal6.icon = "theater_link"
		table.insert({}, registerVal6)
		registerVal6 = {}
		registerVal6.btnId = "lighter"
		registerVal6.displayText = "DEMO_MODE_LIGHTER"
		registerVal6.hintText = "DEMO_MODE_LIGHTER_HINT"
		registerVal6.icon = "theater_bulb"
		table.insert({}, registerVal6)
	end
	registerVal6 = {}
	registerVal6.btnId = "timeline"
	registerVal6.displayText = "DEMO_MODE_TIMELINE_EDITOR"
	registerVal6.hintText = "DEMO_MODE_TIMELINE_EDITOR_HINT"
	registerVal6.icon = "theater_timeline"
	table.insert({}, registerVal6)
	registerVal4, registerVal5, registerVal6 = ipairs({})
	for index7,value8 in registerVal4, registerVal5, registerVal6 do
		local registerVal11 = {}
		local registerVal12 = {}
		local registerVal13 = Engine.Localize(value8.displayText)
		registerVal12.displayText = registerVal13
		registerVal13 = Engine.Localize(value8.hintText)
		registerVal12.hintText = registerVal13
		registerVal12.icon = value8.icon
		registerVal12.action = __FUNC_36A09_
		registerVal11.models = registerVal12
		registerVal12 = {}
		registerVal12.btnId = value8.btnId
		registerVal11.properties = registerVal12
		table.insert({}, registerVal11)
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("DemoChooseModeButtonList", __FUNC_3653A_)
DataSources.DemoChooseModeButtonList = registerVal1
local function __FUNC_371A8_(arg0)
	local registerVal3 = CoD.DemoUtility.Timeline_GetHighlightedSegmentModel()
	local function __FUNC_37814_(arg0, arg1, arg2, arg3, arg4)
		if registerVal3 then
			local registerVal8 = Engine.GetModelValue(Engine.GetModel(registerVal3, "segmentNumber"))
		end
		if arg1.btnId == "preview" then
			Engine.Exec(arg2, ("demo_previewsegment " .. (registerVal8 - 1.000000)))
			GoBack(arg0.occludedMenu, arg2)
		else
			if arg1.btnId == "delete" then
				CoD.OverlayUtility.CreateOverlay(arg2, arg0, "DemoDeleteSegment")
			else
				if arg1.btnId == "rename" then
					OpenDemoKeyboard(arg0, arg1, arg2, "segmentName", (registerVal8 - 1.000000))
				else
					if arg1.btnId == "saveclip" then
						StartMenuUploadClip(arg0, arg1, arg2, arg3, arg4)
					else
						if arg1.btnId == "mergeall" then
							CoD.OverlayUtility.CreateOverlay(arg2, arg0, "DemoMergeAllSegments")
						else
							if arg1.btnId == "deleteall" then
								CoD.OverlayUtility.CreateOverlay(arg2, arg0, "DemoDeleteAllSegments")
							end
						end
					end
				end
			end
		end
	end

	local registerVal5 = Engine.GetModelValue(Engine.GetModel(registerVal3, "disabled"))
	if registerVal3 ~= nil and registerVal5 == false then
		local registerVal8 = {}
		registerVal8.btnId = "preview"
		registerVal8.displayText = "DEMO_VIEW_SHOT"
		registerVal8.hintText = "DEMO_VIEW_SHOT_HINT"
		registerVal8.icon = "theater_view"
		table.insert({}, registerVal8)
		registerVal8 = {}
		registerVal8.btnId = "delete"
		registerVal8.displayText = "DEMO_DELETE_SHOT"
		registerVal8.hintText = "DEMO_DELETE_SHOT_HINT"
		registerVal8.icon = "theater_delete"
		table.insert({}, registerVal8)
		registerVal8 = {}
		registerVal8.btnId = "rename"
		registerVal8.displayText = "DEMO_RENAME_SHOT"
		registerVal8.hintText = "DEMO_RENAME_SHOT_HINT"
		registerVal8.icon = "theater_rename"
		registerVal8.spacerHeight = 16.000000
		table.insert({}, registerVal8)
	end
	local registerVal7 = {}
	registerVal7.btnId = "saveclip"
	registerVal7.displayText = "DEMO_SAVE_CLIP"
	registerVal7.hintText = "DEMO_SAVE_CLIP_HINT"
	registerVal7.icon = "theater_save"
	table.insert({}, registerVal7)
	registerVal5 = Engine.CanMergeSegments()
	if registerVal5 == true then
		registerVal7 = {}
		registerVal7.btnId = "mergeall"
		registerVal7.displayText = "DEMO_MERGE_ALL_SHOTS"
		registerVal7.hintText = "DEMO_MERGE_ALL_SHOTS_HINT"
		registerVal7.icon = "theater_merge"
		table.insert({}, registerVal7)
	end
	registerVal7 = {}
	registerVal7.btnId = "deleteall"
	registerVal7.displayText = "DEMO_DELETE_ALL_SHOTS"
	registerVal7.hintText = "DEMO_DELETE_ALL_SHOTS_HINT"
	registerVal7.icon = "theater_delete_all"
	table.insert({}, registerVal7)
	registerVal5, registerVal6, registerVal7 = ipairs({})
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal12 = {}
		local registerVal13 = {}
		local registerVal14 = Engine.Localize(value9.displayText)
		registerVal13.displayText = registerVal14
		registerVal14 = Engine.Localize(value9.hintText)
		registerVal13.hintText = registerVal14
		registerVal13.icon = value9.icon
		registerVal13.action = __FUNC_37814_
		registerVal12.models = registerVal13
		registerVal13 = {}
		registerVal13.btnId = value9.btnId
		registerVal13.spacerHeight = value9.spacerHeight
		registerVal12.properties = registerVal13
		table.insert({}, registerVal12)
	end
	return {}
end

local function __FUNC_37BCE_(arg0, arg1, arg2)
	if arg0.DemoFilmOptionsButtonList[arg1].properties.spacerHeight then
		return arg0.DemoFilmOptionsButtonList[arg1].properties.spacerHeight
	end
	return arg0.spacing
end

registerVal1 = ListHelper_SetupDataSource("DemoFilmOptionsButtonList", __FUNC_371A8_, nil, nil, nil, __FUNC_37BCE_)
DataSources.DemoFilmOptionsButtonList = registerVal1
registerVal1 = {}
local function __FUNC_37CA2_(arg0, arg1, arg2)
	arg1.segments = {}
	local registerVal5 = Engine.GetGlobalModel()
	local registerVal4 = Engine.GetModel(registerVal5, "DemoSegments.refresh")
	for index5=1.000000, 20.000000, 1.000000 do
		local registerVal10 = CoD.DemoUtility.SetupDemoSegmentModel((index5 - 1.000000))
		local registerVal13 = {}
		registerVal13.model = registerVal10
		table.insert(arg1.segments, registerVal13)
	end
	local function __FUNC_37E7D_()
		arg1:updateDataSource()
	end

	arg1:subscribeToModel(registerVal4, __FUNC_37E7D_, false)
end

registerVal1.prepare = __FUNC_37CA2_
local function __FUNC_37ECE_(arg0)
	return #arg0.segments
end

registerVal1.getCount = __FUNC_37ECE_
local function __FUNC_37F1E_(arg0, arg1, arg2)
	return arg1.segments[arg2].model
end

registerVal1.getItem = __FUNC_37F1E_
local function __FUNC_37F91_(arg0, arg1)
	return arg0.segments[arg1]
end

registerVal1.getCustomPropertiesForItem = __FUNC_37F91_
DataSources.DemoSegments = registerVal1
local function __FUNC_37FEA_(arg0)
	local registerVal2 = Engine.CurrentSessionMode()
	if registerVal2 ~= Enum.eModes.MODE_ZOMBIES then
	end
	local function __FUNC_39BFA_(arg0, arg1, arg2, arg3)
		CoD.DemoUtility.RebuildHighlightReelTimeline(arg1)
	end

	local registerVal7 = {}
	registerVal7.name = "MENU_DEMO_HIGHLIGHT_REEL_PLAYER_SETTINGS_ONLY_ME"
	registerVal7.value = Enum.demoHighlightReelPlayerFilter.DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_ONLY_ME
	table.insert({}, registerVal7)
	registerVal7 = {}
	registerVal7.name = "MENU_DEMO_HIGHLIGHT_REEL_PLAYER_SETTINGS_FRIENDS"
	registerVal7.value = Enum.demoHighlightReelPlayerFilter.DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_FRIENDS
	table.insert({}, registerVal7)
	registerVal7 = {}
	registerVal7.name = "MENU_DEMO_HIGHLIGHT_REEL_PLAYER_SETTINGS_SELF_AND_FRIENDS"
	registerVal7.value = Enum.demoHighlightReelPlayerFilter.DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_ME_AND_FRIENDS
	table.insert({}, registerVal7)
	registerVal7 = {}
	registerVal7.name = "MENU_DEMO_HIGHLIGHT_REEL_PLAYER_SETTINGS_FRIENDLY_TEAM"
	registerVal7.value = Enum.demoHighlightReelPlayerFilter.DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_ONLY_FRIENDLY_TEAM
	table.insert({}, registerVal7)
	registerVal7 = {}
	registerVal7.name = "MENU_DEMO_HIGHLIGHT_REEL_PLAYER_SETTINGS_ENEMY_TEAM"
	registerVal7.value = Enum.demoHighlightReelPlayerFilter.DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_ONLY_ENEMY_TEAM
	table.insert({}, registerVal7)
	registerVal7 = {}
	registerVal7.name = "MENU_DEMO_HIGHLIGHT_REEL_PLAYER_SETTINGS_EVERYONE"
	registerVal7.value = Enum.demoHighlightReelPlayerFilter.DEMO_HIGHLIGHT_REEL_PLAYER_FILTER_EVERYONE
	table.insert({}, registerVal7)
	local registerVal8 = {}
	registerVal8.name = "MENU_DEMO_HIGHLIGHT_REEL_STYLE_SETTINGS_BEST_MOMENTS"
	registerVal8.value = Enum.demoHighlightReelStylesFilter.DEMO_HIGHLIGHT_REEL_STYLES_FILTER_BEST_MOMENTS
	table.insert({}, registerVal8)
	if true then
		registerVal8 = {}
		registerVal8.name = "MENU_DEMO_HIGHLIGHT_REEL_STYLE_SETTINGS_ZM_RAMPAGER"
		registerVal8.value = Enum.demoHighlightReelStylesFilter.DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_RAMPAGER
		table.insert({}, registerVal8)
		registerVal8 = {}
		registerVal8.name = "MENU_DEMO_HIGHLIGHT_REEL_STYLE_SETTINGS_ZM_SAVIOR_AND_SINNER"
		registerVal8.value = Enum.demoHighlightReelStylesFilter.DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_SAVIOR_AND_SINNER
		table.insert({}, registerVal8)
		registerVal8 = {}
		registerVal8.name = "MENU_DEMO_HIGHLIGHT_REEL_STYLE_SETTINGS_ZM_TEAM_PLAYER"
		registerVal8.value = Enum.demoHighlightReelStylesFilter.DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_TEAM_PLAYER
		table.insert({}, registerVal8)
		registerVal8 = {}
		registerVal8.name = "MENU_DEMO_HIGHLIGHT_REEL_STYLE_SETTINGS_ZM_BIG_SPENDER"
		registerVal8.value = Enum.demoHighlightReelStylesFilter.DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_BIG_SPENDER
		table.insert({}, registerVal8)
		registerVal8 = {}
		registerVal8.name = "MENU_DEMO_HIGHLIGHT_REEL_STYLE_SETTINGS_ZM_HANDYMAN"
		registerVal8.value = Enum.demoHighlightReelStylesFilter.DEMO_HIGHLIGHT_REEL_STYLES_FILTER_ZM_HANDYMAN
		table.insert({}, registerVal8)
	else
		registerVal8 = {}
		registerVal8.name = "MENU_DEMO_HIGHLIGHT_REEL_STYLE_SETTINGS_EXPLOSIVE_AND_PROJECTILE"
		registerVal8.value = Enum.demoHighlightReelStylesFilter.DEMO_HIGHLIGHT_REEL_STYLES_FILTER_EXPLOSIVE_AND_PROJECTILE_KILLS
		table.insert({}, registerVal8)
		registerVal8 = {}
		registerVal8.name = "MENU_DEMO_HIGHLIGHT_REEL_STYLE_SETTINGS_VEHICLE"
		registerVal8.value = Enum.demoHighlightReelStylesFilter.DEMO_HIGHLIGHT_REEL_STYLES_FILTER_VEHICLE_KILLS
		table.insert({}, registerVal8)
		registerVal8 = {}
		registerVal8.name = "MENU_DEMO_HIGHLIGHT_REEL_STYLE_SETTINGS_GUN_KILLS_ONLY"
		registerVal8.value = Enum.demoHighlightReelStylesFilter.DEMO_HIGHLIGHT_REEL_STYLES_FILTER_GUN_KILLS_ONLY
		table.insert({}, registerVal8)
		registerVal8 = {}
		registerVal8.name = "MENU_DEMO_HIGHLIGHT_REEL_STYLE_SETTINGS_GUN_KILL_AND_EVENTS"
		registerVal8.value = Enum.demoHighlightReelStylesFilter.DEMO_HIGHLIGHT_REEL_STYLES_FILTER_GUN_KILLS_AND_EVENTS
		table.insert({}, registerVal8)
	end
	local registerVal9 = {}
	registerVal9.name = "5"
	registerVal9.value = 5.000000
	table.insert({}, registerVal9)
	registerVal9 = {}
	registerVal9.name = "10"
	registerVal9.value = 10.000000
	table.insert({}, registerVal9)
	registerVal9 = {}
	registerVal9.name = "20"
	registerVal9.value = 20.000000
	table.insert({}, registerVal9)
	local registerVal10 = {}
	registerVal10.name = "MENU_DEMO_HIGHLIGHT_REEL_STARS_ONE"
	registerVal10.value = 1.000000
	table.insert({}, registerVal10)
	registerVal10 = {}
	registerVal10.name = "MENU_DEMO_HIGHLIGHT_REEL_STARS_TWO"
	registerVal10.value = 2.000000
	table.insert({}, registerVal10)
	registerVal10 = {}
	registerVal10.name = "MENU_DEMO_HIGHLIGHT_REEL_STARS_THREE"
	registerVal10.value = 3.000000
	table.insert({}, registerVal10)
	registerVal10 = {}
	registerVal10.name = "MENU_DEMO_HIGHLIGHT_REEL_STARS_FOUR"
	registerVal10.value = 4.000000
	table.insert({}, registerVal10)
	registerVal10 = {}
	registerVal10.name = "MENU_DEMO_HIGHLIGHT_REEL_STARS_FIVE"
	registerVal10.value = 5.000000
	table.insert({}, registerVal10)
	local registerVal11 = {}
	registerVal11.name = "MENU_DEMO_TRANSITION_CUT"
	registerVal11.value = Enum.demoHighlightReelTransitionFilter.DEMO_HIGHLIGHT_REEL_TRANSITION_FILTER_NONE
	table.insert({}, registerVal11)
	registerVal11 = {}
	registerVal11.name = "MENU_DEMO_TRANSITION_FADE"
	registerVal11.value = Enum.demoHighlightReelTransitionFilter.DEMO_HIGHLIGHT_REEL_TRANSITION_FILTER_FADE
	table.insert({}, registerVal11)
	registerVal11 = {}
	registerVal11.name = "MENU_RANDOM"
	registerVal11.value = Enum.demoHighlightReelTransitionFilter.DEMO_HIGHLIGHT_REEL_TRANSITION_FILTER_RANDOM
	table.insert({}, registerVal11)
	registerVal9 = {}
	registerVal10 = {}
	registerVal10.name = "PlayerFilter"
	registerVal10.displayText = "MENU_DEMO_HIGHLIGHT_REEL_PLAYER_SETTINGS"
	registerVal10.hintText = "MENU_DEMO_HIGHLIGHT_REEL_PLAYER_SETTINGS_DESC"
	registerVal10.dvarName = "demo_highlightReelPlayerFilter"
	registerVal10.options = {}
	registerVal11 = {}
	registerVal11.name = "StylesFilter"
	registerVal11.displayText = "MENU_DEMO_HIGHLIGHT_REEL_STYLE_SETTINGS"
	registerVal11.hintText = "MENU_DEMO_HIGHLIGHT_REEL_STYLE_SETTINGS_DESC"
	registerVal11.dvarName = "demo_highlightReelStylesFilter"
	registerVal11.options = {}
	local registerVal12 = {}
	registerVal12.name = "NumberOfSegmentsFilter"
	registerVal12.displayText = "MENU_DEMO_HIGHLIGHT_REEL_NUMBER_OF_SEGMENTS"
	registerVal12.hintText = "MENU_DEMO_HIGHLIGHT_REEL_NUMBER_OF_SEGMENTS_DESC"
	registerVal12.dvarName = "demo_highlightReelNumberOfSegments"
	registerVal12.options = {}
	local registerVal13 = {}
	registerVal13.name = "StarsFilter"
	registerVal13.displayText = "MENU_DEMO_HIGHLIGHT_REEL_STARS"
	registerVal13.hintText = "MENU_DEMO_HIGHLIGHT_REEL_STARS_DESC"
	registerVal13.dvarName = "demo_highlightReelMinimumStarsFilter"
	registerVal13.options = {}
	local registerVal14 = {}
	registerVal14.name = "TransitionFilter"
	registerVal14.displayText = "MENU_DEMO_HIGHLIGHT_REEL_TRANSITION_SETTINGS"
	registerVal14.hintText = "MENU_DEMO_HIGHLIGHT_REEL_TRANSITION_SETTINGS_DESC"
	registerVal14.dvarName = "demo_highlightReelTransitionFilter"
	registerVal14.options = {}
	registerVal9 = {registerVal10, registerVal11, registerVal12, registerVal13, registerVal14}
	if true == false then
		registerVal13 = {}
		registerVal13.name = "MENU_NO"
		registerVal13.value = Enum.demoHighlightReelGameResultFilter.DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_OFF
		table.insert({}, registerVal13)
		registerVal13 = {}
		registerVal13.name = "MENU_DEMO_HIGHLIGHT_REEL_GAME_RESULT_FINAL"
		registerVal13.value = Enum.demoHighlightReelGameResultFilter.DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_FINAL_RESULT
		table.insert({}, registerVal13)
		registerVal13 = {}
		registerVal13.name = "MENU_DEMO_HIGHLIGHT_REEL_GAME_RESULT_WITH_EVENTS"
		registerVal13.value = Enum.demoHighlightReelGameResultFilter.DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_WITH_EVENTS
		table.insert({}, registerVal13)
		registerVal13 = {}
		registerVal13.name = "MENU_DEMO_HIGHLIGHT_REEL_GAME_RESULT_ALL"
		registerVal13.value = Enum.demoHighlightReelGameResultFilter.DEMO_HIGHLIGHT_REEL_GAME_RESULT_FILTER_ALL_RESULTS
		table.insert({}, registerVal13)
		registerVal13 = {}
		registerVal13.name = "GameResultFilter"
		registerVal13.displayText = "MENU_DEMO_HIGHLIGHT_REEL_GAME_RESULT_SETTINGS"
		registerVal13.hintText = "MENU_DEMO_HIGHLIGHT_REEL_GAME_RESULT_SETTINGS_DESC"
		registerVal13.dvarName = "demo_highlightReelGameResultFilter"
		registerVal13.options = {}
		table.insert(registerVal9, registerVal13)
	end
	registerVal10, registerVal11, registerVal12 = ipairs(registerVal9)
	for index13,value14 in registerVal10, registerVal11, registerVal12 do
		local registerVal17 = {}
		local registerVal18 = {}
		registerVal18.displayText = value14.displayText
		registerVal18.hintText = value14.hintText
		registerVal18.buttonOnly = false
		registerVal18.disabled = false
		local registerVal19 = CoD.OptionsUtility.CreateCustomOptionDataSource(arg0, ("DemoHighlightReelSettingsButtonList_" .. value14.name), value14.options, value14.dvarName, __FUNC_39BFA_, CoD.DemoUtility.Options_ItemSelected, CoD.DemoUtility.Options_RevertItemSelected)
		registerVal18.optionsDatasource = registerVal19
		registerVal19 = CoD.DemoUtility.Options_GetProfileSelection(arg0, value14.options, value14.dvarName)
		registerVal18.currentSelection = registerVal19
		registerVal18.selected = false
		registerVal17.models = registerVal18
		registerVal18 = {}
		registerVal18.hideArrows = false
		registerVal18.disabled = false
		registerVal17.properties = registerVal18
		table.insert({}, registerVal17)
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("DemoHighlightReelSettingsButtonList", __FUNC_37FEA_)
DataSources.DemoHighlightReelSettingsButtonList = registerVal1
registerVal1 = {}
local function __FUNC_39C90_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	registerVal1 = Engine.GetModelForController(registerVal1)
	return Engine.CreateModel(registerVal1, "playerAbilities.playerGadget3")
end

registerVal1.getModel = __FUNC_39C90_
DataSources.HeroWeapon = registerVal1
registerVal1 = {}
local function __FUNC_39D9D_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	registerVal1 = Engine.GetModelForController(registerVal1)
	return Engine.CreateModel(registerVal1, "currentWeapon")
end

registerVal1.getModel = __FUNC_39D9D_
DataSources.CurrentWeapon = registerVal1
registerVal1 = {}
local function __FUNC_39E99_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	registerVal1 = Engine.GetModelForController(registerVal1)
	return Engine.CreateModel(registerVal1, "currentPrimaryOffhand")
end

registerVal1.getModel = __FUNC_39E99_
DataSources.CurrentPrimaryOffhand = registerVal1
registerVal1 = {}
local function __FUNC_39F9D_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	registerVal1 = Engine.GetModelForController(registerVal1)
	return Engine.CreateModel(registerVal1, "currentSecondaryOffhand")
end

registerVal1.getModel = __FUNC_39F9D_
DataSources.CurrentSecondaryOffhand = registerVal1
registerVal1 = {}
local function __FUNC_3A0A3_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	registerVal1 = Engine.GetModelForController(registerVal1)
	local registerVal2 = Engine.CreateModel(registerVal1, "hudItems")
	local registerVal3 = IsLuaCodeVersionAtLeast(17.000000)
	if not registerVal3 then
		local registerVal4 = Engine.CreateModel(registerVal2, "colorBlindSensitiveFriendlyColor")
		Engine.SetModelValue(registerVal4, CoD.ConvertColor(CoD.ExplodeColor(ColorSet.FriendlyBlue)))
		registerVal4 = Engine.CreateModel(registerVal2, "colorBlindSensitiveEnemyColor")
		Engine.SetModelValue(registerVal4, CoD.ConvertColor(CoD.ExplodeColor(ColorSet.EnemyOrange)))
		registerVal4 = Engine.CreateModel(registerVal2, "colorBlindSensitiveEnemyScorestreakTargetColor")
		Engine.SetModelValue(registerVal4, CoD.ConvertColor(CoD.ExplodeColor(ColorSet.EnemyScorestreakTarget)))
	end
	return Engine.CreateModel(registerVal1, "hudItems")
end

registerVal1.getModel = __FUNC_3A0A3_
DataSources.HUDItems = registerVal1
registerVal1 = {}
local function __FUNC_3A45C_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	registerVal1 = Engine.GetModelForController(registerVal1)
	return Engine.CreateModel(registerVal1, "interactivePrompt")
end

registerVal1.getModel = __FUNC_3A45C_
DataSources.InteractivePrompt = registerVal1
registerVal1 = {}
local function __FUNC_3A55D_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	registerVal1 = Engine.GetModelForController(registerVal1)
	return Engine.CreateModel(registerVal1, "killstreakRewards")
end

registerVal1.getModel = __FUNC_3A55D_
DataSources.KillstreakReward = registerVal1
registerVal1 = {}
local function __FUNC_3A65D_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	registerVal1 = Engine.GetModelForController(registerVal1)
	return Engine.CreateModel(registerVal1, "playerCallout")
end

registerVal1.getModel = __FUNC_3A65D_
DataSources.PlayerCallout = registerVal1
registerVal1 = {}
local function __FUNC_3A759_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	registerVal1 = Engine.GetModelForController(registerVal1)
	return Engine.CreateModel(registerVal1, "playerAbilities")
end

registerVal1.getModel = __FUNC_3A759_
DataSources.PlayerAbilities = registerVal1
registerVal1 = {}
local function __FUNC_3A857_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	registerVal1 = Engine.GetModelForController(registerVal1)
	return Engine.CreateModel(registerVal1, "perks")
end

registerVal1.getModel = __FUNC_3A857_
DataSources.Perks = registerVal1
registerVal1 = {}
registerVal1.prepared = false
local function __FUNC_3A949_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.CreateModel(registerVal4, "CTF")
	registerVal4 = Engine.CreateModel(registerVal3, "friendlyFlagCarrier")
	local registerVal5 = Engine.CreateModel(registerVal3, "enemyFlagCarrier")
end

registerVal1.prepare = __FUNC_3A949_
local function __FUNC_3AA64_(arg0)
	if not DataSources.CTF.prepared then
		DataSources.CTF.prepare(arg0)
	end
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	registerVal1 = Engine.GetModelForController(registerVal1)
	return Engine.CreateModel(registerVal1, "CTF")
end

registerVal1.getModel = __FUNC_3AA64_
DataSources.CTF = registerVal1
registerVal1 = {}
local function __FUNC_3ABD7_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	return Engine.CreateModel(registerVal2, "ballGametype")
end

registerVal1.getModel = __FUNC_3ABD7_
DataSources.Ball = registerVal1
registerVal1 = {}
local function __FUNC_3AC8E_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	return Engine.CreateModel(registerVal2, "escortGametype")
end

registerVal1.getModel = __FUNC_3AC8E_
DataSources.Escort = registerVal1
registerVal1 = {}
registerVal1.prepared = false
registerVal1.factionSubscription = {}
local function __FUNC_3AD48_(arg0, arg1, arg2)
	if not DataSources.Factions.prepared then
		DataSources.Factions.prepared = {}
	end
	if not DataSources.Factions.factionSubscription[arg0] then
		local registerVal4 = LUI.UIElement.new()
		DataSources.Factions.factionSubscription[arg0] = registerVal4
	end
	local registerVal3 = Engine.GetModelForController(arg0)
	registerVal4 = Engine.CreateModel(registerVal3, "factions")
	local registerVal5 = Engine.CreateModel(registerVal4, "isCoDCaster")
	local registerVal6 = Engine.CreateModel(registerVal4, "playerFactionTeamEnum")
	local registerVal7 = Engine.CreateModel(registerVal4, "playerFactionName")
	local registerVal8 = Engine.CreateModel(registerVal4, "playerFactionDisplayName")
	local registerVal9 = Engine.CreateModel(registerVal4, "playerFactionIcon")
	local registerVal10 = Engine.CreateModel(registerVal4, "playerFactionColor")
	local registerVal11 = Engine.CreateModel(registerVal4, "playerFactionFlagColor")
	local registerVal12 = Engine.CreateModel(registerVal4, "enemyFactionTeamEnum")
	local registerVal13 = Engine.CreateModel(registerVal4, "enemyFactionName")
	local registerVal14 = Engine.CreateModel(registerVal4, "enemyFactionDisplayName")
	local registerVal15 = Engine.CreateModel(registerVal4, "enemyFactionIcon")
	local registerVal16 = Engine.CreateModel(registerVal4, "enemyFactionColor")
	local registerVal17 = Engine.CreateModel(registerVal4, "enemyFactionFlagColor")
	DataSources.Factions.factionSubscription[arg0]:unsubscribeFromAllModels()
	local function __FUNC_3BF2E_(arg1)
		local registerVal1 = Engine.GetModelValue(arg1)
		if registerVal1 then
			local registerVal2 = CoD.IsShoutcaster(arg0)
			if registerVal2 then
			end
			Engine.SetModelValue(registerVal9, CoD.GetTeamFactionIcon(Enum.team_t.TEAM_ALLIES))
			Engine.SetModelValue(registerVal8, CoD.GetTeamNameCaps(Enum.team_t.TEAM_ALLIES))
			Engine.SetModelValue(registerVal10, CoD.GetTeamFactionColor(Enum.team_t.TEAM_ALLIES))
			registerVal2 = CoD.GetColorBlindColorForPlayer(arg0, "FriendlyBlue")
			local registerVal3 = string.format("%d %d %d", (registerVal2.r * 255.000000), (registerVal2.g * 255.000000), (registerVal2.b * 255.000000))
			local registerVal4 = CoD.IsShoutcaster(arg0)
			if registerVal4 then
				registerVal4 = CoD.GetTeamFactionColor(Enum.team_t.TEAM_ALLIES)
				local registerVal5 = CoD.GetTeamFactionColorEffect(Enum.team_t.TEAM_ALLIES)
				local registerVal6 = CoD.GetTeamFactionColorObituaryFont(Enum.team_t.TEAM_ALLIES)
				local registerVal7 = CoDShared.IsGametypeTeamBased()
				if not registerVal7 then
				end
				CoD.UpdateColorSet("CodCasterFriendly", registerVal3)
				CoD.UpdateColorSet("CodCasterFriendlyEffect", registerVal3)
				CoD.UpdateColorSet("CodCasterFriendlyObituaryFont", registerVal3)
				Engine.SetupCompassColors(arg0)
			end
			Engine.SetModelValue(registerVal11, registerVal3)
		end
	end

	DataSources.Factions.factionSubscription[arg0]:subscribeToModel(registerVal6, __FUNC_3BF2E_)
	local function __FUNC_3C499_(arg1)
		local registerVal1 = Engine.GetModelValue(arg1)
		if registerVal1 then
			local registerVal2 = CoD.IsShoutcaster(arg0)
			if registerVal2 then
			end
			Engine.SetModelValue(registerVal15, CoD.GetTeamFactionIcon(Enum.team_t.TEAM_AXIS))
			Engine.SetModelValue(registerVal14, CoD.GetTeamNameCaps(Enum.team_t.TEAM_AXIS))
			Engine.SetModelValue(registerVal16, CoD.GetTeamFactionColor(Enum.team_t.TEAM_AXIS))
			registerVal2 = CoD.GetColorBlindColorForPlayer(arg0, "EnemyOrange")
			local registerVal3 = string.format("%d %d %d", (registerVal2.r * 255.000000), (registerVal2.g * 255.000000), (registerVal2.b * 255.000000))
			local registerVal4 = CoD.IsShoutcaster(arg0)
			if registerVal4 then
				registerVal4 = CoD.GetTeamFactionColor(Enum.team_t.TEAM_AXIS)
				local registerVal5 = CoD.GetTeamFactionColorEffect(Enum.team_t.TEAM_AXIS)
				local registerVal6 = CoD.GetTeamFactionColorObituaryFont(Enum.team_t.TEAM_AXIS)
				local registerVal7 = CoDShared.IsGametypeTeamBased()
				if not registerVal7 then
				end
				CoD.UpdateColorSet("CodCasterEnemy", registerVal3)
				CoD.UpdateColorSet("CodCasterEnemyEffect", registerVal3)
				CoD.UpdateColorSet("CodCasterFriendlyObituaryFont", registerVal3)
				Engine.SetupCompassColors(arg0)
			end
			Engine.SetModelValue(registerVal17, registerVal3)
		end
	end

	DataSources.Factions.factionSubscription[arg0]:subscribeToModel(registerVal12, __FUNC_3C499_)
	local registerVal18 = {}
	local registerVal19 = CoD.GetTeamNameCaps(Enum.team_t.TEAM_ALLIES)
	registerVal18.name = registerVal19
	registerVal19 = CoD.GetTeamFactionIcon(Enum.team_t.TEAM_ALLIES)
	registerVal18.icon = registerVal19
	registerVal19 = CoD.GetTeamFactionColor(Enum.team_t.TEAM_ALLIES)
	registerVal18.color = registerVal19
	registerVal19 = CoD.GetTeamFactionColorEffect(Enum.team_t.TEAM_ALLIES)
	registerVal18.colorEffect = registerVal19
	registerVal19 = CoD.GetTeamFactionColorObituaryFont(Enum.team_t.TEAM_ALLIES)
	registerVal18.colorObituaryFont = registerVal19
	registerVal19 = {}
	local registerVal20 = CoD.GetTeamNameCaps(Enum.team_t.TEAM_AXIS)
	registerVal19.name = registerVal20
	registerVal20 = CoD.GetTeamFactionIcon(Enum.team_t.TEAM_AXIS)
	registerVal19.icon = registerVal20
	registerVal20 = CoD.GetTeamFactionColor(Enum.team_t.TEAM_AXIS)
	registerVal19.color = registerVal20
	registerVal20 = CoD.GetTeamFactionColorEffect(Enum.team_t.TEAM_AXIS)
	registerVal19.colorEffect = registerVal20
	registerVal20 = CoD.GetTeamFactionColorObituaryFont(Enum.team_t.TEAM_AXIS)
	registerVal19.colorObituaryFont = registerVal20
	registerVal20 = CoD.IsShoutcaster(arg0)
	registerVal20 = CoD.ShoutcasterProfileVarBool(arg0, "shoutcaster_flip_scorepanel")
	if registerVal20 and registerVal20 then
		registerVal20 = {}
		local registerVal21 = CoD.GetTeamNameCaps(Enum.team_t.TEAM_ALLIES)
		registerVal20.name = registerVal21
		registerVal21 = CoD.GetTeamFactionIcon(Enum.team_t.TEAM_ALLIES)
		registerVal20.icon = registerVal21
		registerVal21 = CoD.GetTeamFactionColor(Enum.team_t.TEAM_ALLIES)
		registerVal20.color = registerVal21
		registerVal21 = CoD.GetTeamFactionColorEffect(Enum.team_t.TEAM_ALLIES)
		registerVal20.colorEffect = registerVal21
		registerVal21 = CoD.GetTeamFactionColorObituaryFont(Enum.team_t.TEAM_ALLIES)
		registerVal20.colorObituaryFont = registerVal21
		registerVal20 = {}
		registerVal21 = CoD.GetTeamNameCaps(Enum.team_t.TEAM_AXIS)
		registerVal20.name = registerVal21
		registerVal21 = CoD.GetTeamFactionIcon(Enum.team_t.TEAM_AXIS)
		registerVal20.icon = registerVal21
		registerVal21 = CoD.GetTeamFactionColor(Enum.team_t.TEAM_AXIS)
		registerVal20.color = registerVal21
		registerVal21 = CoD.GetTeamFactionColorEffect(Enum.team_t.TEAM_AXIS)
		registerVal20.colorEffect = registerVal21
		registerVal21 = CoD.GetTeamFactionColorObituaryFont(Enum.team_t.TEAM_AXIS)
		registerVal20.colorObituaryFont = registerVal21
	end
	registerVal21 = Engine.CreateModel(registerVal4, "axisFactionDisplayName")
	Engine.SetModelValue(registerVal21, registerVal20.name)
	registerVal21 = Engine.CreateModel(registerVal4, "axisFactionIcon")
	Engine.SetModelValue(registerVal21, registerVal20.icon)
	registerVal21 = Engine.CreateModel(registerVal4, "axisFactionColor")
	Engine.SetModelValue(registerVal21, registerVal20.color)
	registerVal21 = Engine.CreateModel(registerVal4, "alliesFactionDisplayName")
	Engine.SetModelValue(registerVal21, registerVal20.name)
	registerVal21 = Engine.CreateModel(registerVal4, "alliesFactionIcon")
	Engine.SetModelValue(registerVal21, registerVal20.icon)
	registerVal21 = Engine.CreateModel(registerVal4, "alliesFactionColor")
	Engine.SetModelValue(registerVal21, registerVal20.color)
	registerVal20 = CoD.IsShoutcaster(arg0)
	if registerVal20 then
		CoD.UpdateColorSet("CodCasterFactionAllies", registerVal20.color)
		CoD.UpdateColorSet("CodCasterFactionAxis", registerVal20.color)
		CoD.UpdateColorSet("CodCasterFactionAlliesEffect", registerVal20.colorEffect)
		CoD.UpdateColorSet("CodCasterFactionAxisEffect", registerVal20.colorEffect)
		CoD.UpdateColorSet("CodCasterFactionAlliesObituaryFont", registerVal20.colorObituaryFont)
		CoD.UpdateColorSet("CodCasterFactionAxisObituaryFont", registerVal20.colorObituaryFont)
		Engine.SetupCompassColors(arg0)
	end
	registerVal20 = Engine.GetModel(registerVal3, "team")
	if registerVal20 then
		local function __FUNC_3C9FC_(arg1)
			DataSources.Factions.prepared[arg0] = false
			DataSources.Factions.prepare(arg0)
		end

		DataSources.Factions.factionSubscription[arg0]:subscribeToModel(registerVal20, __FUNC_3C9FC_, false)
	end
	registerVal21 = Engine.GetModel(registerVal3, "CodCaster.profileSettingsUpdated")
	if registerVal21 then
		local function __FUNC_3CABC_(arg1)
			DataSources.Factions.prepared[arg0] = false
			DataSources.Factions.prepare(arg0)
		end

		DataSources.Factions.factionSubscription[arg0]:subscribeToModel(registerVal21, __FUNC_3CABC_, false)
	end
	local registerVal22 = Engine.GetModel(registerVal3, "profile.colorblindMode")
	if registerVal22 then
		local function __FUNC_3CB7C_(arg1)
			DataSources.Factions.prepared[arg0] = false
			DataSources.Factions.prepare(arg0)
		end

		DataSources.Factions.factionSubscription[arg0]:subscribeToModel(registerVal22, __FUNC_3CB7C_, false)
	end
	DataSources.Factions.prepared[arg0] = true
end

registerVal1.prepare = __FUNC_3AD48_
local function __FUNC_3CC3C_(arg0)
	if arg0 or not DataSources.Factions.prepared[arg0] then
		DataSources.Factions.prepare(arg0)
	end
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	registerVal1 = Engine.GetModelForController(registerVal1)
	return Engine.CreateModel(registerVal1, "factions")
end

registerVal1.getModel = __FUNC_3CC3C_
DataSources.Factions = registerVal1
registerVal1 = {}
local function __FUNC_3CDF6_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "factions")
	registerVal4 = Engine.GetModelForController(arg0)
	if not DataSources.FactionsGlobal.factionSubscription then
		local registerVal6 = LUI.UIElement.new()
		DataSources.FactionsGlobal.factionSubscription = registerVal6
	end
	DataSources.FactionsGlobal.factionSubscription:unsubscribeFromAllModels()
	local registerVal5 = {}
	registerVal6 = CoD.GetTeamNameCaps(Enum.team_t.TEAM_ALLIES)
	registerVal5.name = registerVal6
	registerVal6 = CoD.GetTeamFactionIcon(Enum.team_t.TEAM_ALLIES)
	registerVal5.icon = registerVal6
	registerVal6 = CoD.GetTeamFactionColor(Enum.team_t.TEAM_ALLIES)
	registerVal5.color = registerVal6
	registerVal6 = {}
	local registerVal7 = CoD.GetTeamNameCaps(Enum.team_t.TEAM_AXIS)
	registerVal6.name = registerVal7
	registerVal7 = CoD.GetTeamFactionIcon(Enum.team_t.TEAM_AXIS)
	registerVal6.icon = registerVal7
	registerVal7 = CoD.GetTeamFactionColor(Enum.team_t.TEAM_AXIS)
	registerVal6.color = registerVal7
	registerVal7 = CoD.IsShoutcaster(arg0)
	registerVal7 = CoD.ShoutcasterProfileVarBool(arg0, "shoutcaster_flip_scorepanel")
	if registerVal7 and registerVal7 then
		registerVal7 = {}
		local registerVal8 = CoD.GetTeamNameCaps(Enum.team_t.TEAM_ALLIES)
		registerVal7.name = registerVal8
		registerVal8 = CoD.GetTeamFactionIcon(Enum.team_t.TEAM_ALLIES)
		registerVal7.icon = registerVal8
		registerVal8 = CoD.GetTeamFactionColor(Enum.team_t.TEAM_ALLIES)
		registerVal7.color = registerVal8
		registerVal7 = {}
		registerVal8 = CoD.GetTeamNameCaps(Enum.team_t.TEAM_AXIS)
		registerVal7.name = registerVal8
		registerVal8 = CoD.GetTeamFactionIcon(Enum.team_t.TEAM_AXIS)
		registerVal7.icon = registerVal8
		registerVal8 = CoD.GetTeamFactionColor(Enum.team_t.TEAM_AXIS)
		registerVal7.color = registerVal8
	end
	registerVal8 = Engine.CreateModel(registerVal3, "axisFactionDisplayName")
	Engine.SetModelValue(registerVal8, registerVal7.name)
	registerVal8 = Engine.CreateModel(registerVal3, "axisFactionIcon")
	Engine.SetModelValue(registerVal8, registerVal7.icon)
	registerVal8 = Engine.CreateModel(registerVal3, "axisFactionColor")
	Engine.SetModelValue(registerVal8, registerVal7.color)
	registerVal8 = Engine.CreateModel(registerVal3, "alliesFactionDisplayName")
	Engine.SetModelValue(registerVal8, registerVal7.name)
	registerVal8 = Engine.CreateModel(registerVal3, "alliesFactionIcon")
	Engine.SetModelValue(registerVal8, registerVal7.icon)
	registerVal8 = Engine.CreateModel(registerVal3, "alliesFactionColor")
	Engine.SetModelValue(registerVal8, registerVal7.color)
	registerVal7 = Engine.GetModel(registerVal4, "team")
	if registerVal7 then
		local function __FUNC_3D7C1_(arg1)
			DataSources.FactionsGlobal.prepared = false
			DataSources.FactionsGlobal.prepare(arg0)
		end

		DataSources.FactionsGlobal.factionSubscription:subscribeToModel(registerVal7, __FUNC_3D7C1_, false)
	end
	registerVal8 = Engine.GetModel(registerVal4, "CodCaster.profileSettingsUpdated")
	if registerVal8 then
		local function __FUNC_3D876_(arg1)
			DataSources.FactionsGlobal.prepared = false
			DataSources.FactionsGlobal.prepare(arg0)
		end

		DataSources.FactionsGlobal.factionSubscription:subscribeToModel(registerVal8, __FUNC_3D876_, false)
	end
	local registerVal9 = Engine.GetModel(registerVal4, "profile.colorblindMode")
	if registerVal9 then
		local function __FUNC_3D92A_(arg1)
			DataSources.FactionsGlobal.prepared = false
			DataSources.FactionsGlobal.prepare(arg0)
		end

		DataSources.FactionsGlobal.factionSubscription:subscribeToModel(registerVal9, __FUNC_3D92A_, false)
	end
	DataSources.FactionsGlobal.prepared = true
end

registerVal1.prepare = __FUNC_3CDF6_
local function __FUNC_3D9DE_(arg0)
	if not DataSources.FactionsGlobal.prepared then
		DataSources.FactionsGlobal.prepare(arg0)
	end
	local registerVal2 = Engine.GetGlobalModel()
	return Engine.CreateModel(registerVal2, "factions")
end

registerVal1.getModel = __FUNC_3D9DE_
DataSources.FactionsGlobal = registerVal1
registerVal1 = {}
local function __FUNC_3DB1F_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	return Engine.CreateModel(registerVal2, "netstats")
end

registerVal1.getModel = __FUNC_3DB1F_
DataSources.NetStats = registerVal1
registerVal1 = {}
local function __FUNC_3DBC7_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	registerVal1 = Engine.GetModelForController(registerVal1)
	return Engine.CreateModel(registerVal1, "groups")
end

registerVal1.getModel = __FUNC_3DBC7_
DataSources.Groups = registerVal1
local function __FUNC_3DCBA_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	local registerVal6 = Engine.Localize("GROUPS_MY_GROUPS_CAPS")
	registerVal5.tabName = registerVal6
	registerVal5.tabWidget = "CoD.MyGroupsTab"
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "mygroups"
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal6 = Engine.Localize("GROUPS_FIND_GROUPS_CAPS")
	registerVal5.tabName = registerVal6
	registerVal5.tabWidget = "CoD.FindGroupsTab"
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "findgroups"
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderr
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("GroupsMainTabModel", __FUNC_3DCBA_, true)
DataSources.GroupsMainTabList = registerVal1
local function __FUNC_3DFD4_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	local registerVal6 = Engine.Localize("GROUPS_GROUP_EMBLEMS_CAPS")
	registerVal5.tabName = registerVal6
	registerVal5.tabWidget = "CoD.GroupEmblemsTab"
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "groupemblems"
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal6 = Engine.Localize("GROUPS_MY_EMBLEMS_CAPS")
	registerVal5.tabName = registerVal6
	registerVal5.tabWidget = "CoD.GroupMyEmblemsTab"
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "groupmyemblems"
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderr
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("GroupsEmblemTabModel", __FUNC_3DFD4_, true)
DataSources.GroupsEmblemTabList = registerVal1
registerVal1 = {}
local function __FUNC_3E303_(arg0, arg1, arg2)
	arg1.commonGroups = {}
	local registerVal3 = arg1:getParent()
	registerVal3 = arg1:getParent()
	registerVal3 = registerVal3:getModel(arg0, "xuid")
	if arg1 or not registerVal3 then
		return 
	end
	local registerVal4 = Engine.GetModelForController(arg0)
	registerVal3 = Engine.CreateModel(registerVal4, "groups")
	registerVal4 = arg1:getParent()
	local registerVal5 = registerVal4:getModel()
	local registerVal6 = CoD.SafeGetModelValue(registerVal5, "xuid")
	local registerVal7 = Engine.GetGroupList(arg0, Enum.GroupBufferType.GROUP_BUFFER_TYPE_SELF)
	local registerVal8 = Engine.GetXUID64(arg0)
	local registerVal9 = CoD.SafeGetModelValue(registerVal5, "quickjoinListMember")
	local registerVal10 = Engine.GetModel(registerVal3, "lastSelectedFriendXuid")
	if not registerVal10 then
		registerVal10 = Engine.CreateModel(registerVal3, "lastSelectedFriendXuid")
		Engine.SetModelValue(registerVal10, Engine.StringToXUIDDecimal("0"))
	end
	if registerVal7 and #registerVal10 ~= 0.000000 and registerVal8 == registerVal6 or not registerVal9 then
		return 
	end
	if arg1.subscriptionForSearchGroups then
		arg1:removeSubscription(arg1.subscriptionForSearchGroups)
	end
	registerVal10 = Engine.CreateModel(registerVal3, "eventUpdate")
	arg1.groupsEventModel = registerVal10
	local function __FUNC_3EE80_()
		local registerVal0 = Engine.GetModelValue(Engine.GetModel(registerVal3, "eventName"))
		if registerVal0 == "search_groups_task_complete" or registerVal0 == "groupsFetched" then
			if arg1.searchingForGroups then
				arg1.searchingForGroups = false
				arg1:updateDataSource()
			end
		end
	end

	registerVal10 = arg1:subscribeToModel(arg1.groupsEventModel, __FUNC_3EE80_, false)
	arg1.subscriptionForSearchGroups = registerVal10
	registerVal10 = Engine.GetModelValue(Engine.GetModel(registerVal3, "lastSelectedFriendXuid"))
	if registerVal10 ~= registerVal6 and not arg1.searchingForGroups then
		ClearLastGroupSearchResults(self, element, arg0)
		local registerVal13 = Engine.GetModelForController(arg0)
		local registerVal12 = Engine.CreateModel(registerVal13, "Social.selectedFriendXUID")
		Engine.SetModelValue(registerVal12, registerVal6)
		SearchGroupsBySearchType(self, element, arg0, Enum.GroupSearchType.GROUP_SEARCH_TYPE_SELECTED_FRIEND)
		registerVal12 = Engine.GetModel(registerVal3, "lastSelectedFriendXuid")
		Engine.SetModelValue(registerVal12, registerVal6)
		arg1.searchingForGroups = true
		return 
	end
	local registerVal11 = Engine.GetTotalGroupsCount(arg1.controller, Enum.GroupBufferType.GROUP_BUFFER_TYPE_SEARCH)
	registerVal12, registerVal13, registerVal14 = ipairs(registerVal7)
	for index15,value16 in registerVal12, registerVal13, registerVal14 do
		for index17=1.000000, registerVal11, 1.000000 do
			local registerVal21 = Engine.GetGroupData(arg0, Enum.GroupBufferType.GROUP_BUFFER_TYPE_SEARCH, index17)
			if registerVal21 and value16.groupId == registerVal21.groupId then
				local registerVal24 = {}
				registerVal24.groupName = value16.name
				registerVal24.groupId = value16.groupId
				registerVal24.primaryGroup = false
				table.insert(arg1.commonGroups, registerVal24)
			end
		end
	end
	registerVal13, registerVal14, registerVal15 = ipairs(arg1.commonGroups)
	for index16,value17 in registerVal13, registerVal14, registerVal15 do
		local registerVal19 = Engine.GetPrimaryGroup(arg0)
		if value17.groupId == registerVal19 then
		end
	end
	if 0.000000 < index16 then
		registerVal13 = LUI.ShallowCopy(arg1.commonGroups[index16])
		registerVal13.primaryGroup = true
		table.remove(arg1.commonGroups, index16)
		table.insert(arg1.commonGroups, 1.000000, registerVal13)
	end
	registerVal13 = Engine.CreateModel(registerVal3, "commonGroups")
	for index14=1.000000, #arg1.commonGroups, 1.000000 do
		registerVal19 = Engine.CreateModel(registerVal13, ("listItem_" .. index14))
		arg1.commonGroups[index14].model = registerVal19
		local registerVal18, registerVal19, registerVal20 = pairs(arg1.commonGroups[index14])
		if ("listItem_" .. index14) ~= "model" then
			registerVal24 = Engine.CreateModel(arg1.commonGroups[index14].model, ("listItem_" .. index14))
			Engine.SetModelValue(registerVal24, index14)
		end
	end
	registerVal14 = IsMainModeInvalid()
	if registerVal14 then
		arg1.vCount = 8.000000
	else
		arg1.vCount = 2.000000
	end
	arg1.resetToFirst = true
	local registerVal16 = {}
	registerVal16.controller = arg0
	registerVal4:updateState(registerVal16)
end

registerVal1.prepare = __FUNC_3E303_
local function __FUNC_3EFD8_(arg0)
	return #arg0.commonGroups
end

registerVal1.getCount = __FUNC_3EFD8_
local function __FUNC_3F02E_(arg0, arg1, arg2)
	return arg1.commonGroups[arg2].model
end

registerVal1.getItem = __FUNC_3F02E_
DataSources.LobbyCommonGroupsList = registerVal1
registerVal1 = {}
local function __FUNC_3F0A5_(arg0, arg1, arg2)
	arg1.controller = arg0
	arg1.numElementsInList = arg1.vCount
	local registerVal3 = Engine.GetGroupInvitesList(arg0)
	local registerVal5 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal5, "groups")
	registerVal5 = Engine.CreateModel(registerVal4, "eventUpdate")
	local registerVal6 = Engine.CreateModel(registerVal4, "invites")
	local registerVal7 = {}
	local registerVal8 = Engine.StringToXUIDDecimal("0")
	registerVal7.groupId = registerVal8
	registerVal7.bufferType = Enum.GroupBufferType.GROUP_BUFFER_TYPE_INVALID
	registerVal7.name = ""
	registerVal7.description = ""
	registerVal7.message = ""
	registerVal7.privacy = Enum.GroupPrivacy.GROUP_PRIVACY_PUBLIC
	registerVal7.privacyString = ""
	registerVal7.joinApprovalType = Enum.GroupJoinApprovalType.GROUP_JOIN_APPROVAL_OFF
	registerVal7.creationTimeStamp = ""
	registerVal7.owner = ""
	registerVal7.ownerXuid = 0.000000
	registerVal7.memberCount = 0.000000
	registerVal7.groupBufferType = Enum.GroupBufferType.GROUP_BUFFER_TYPE_SEARCH
	registerVal7.onlineCount = 0.000000
	registerVal7.inTitleCount = 0.000000
	registerVal7.lbDef = ""
	registerVal7.lbTimeFrame = 0.000000
	registerVal7.lbHardcore = false
	registerVal7.lbInitialized = false
	registerVal7.loading = true
	registerVal7.sentByGamertag = ""
	registerVal8 = Engine.StringToXUIDDecimal("0")
	registerVal7.sentByXuid = registerVal8
	arg1.emptyGroupInviteInfo = registerVal7
	if not arg1.initialized then
		arg1.invites = {}
		for index7=1.000000, arg1.numElementsInList, 1.000000 do
			arg1.invites[index7] = {}
			local registerVal12 = Engine.CreateModel(registerVal6, ("listItem_" .. index7))
			arg1.invites[index7].model = registerVal12
			local registerVal11, registerVal12, registerVal13 = pairs(arg1.emptyGroupInviteInfo)
			for index14,value15 in registerVal11, registerVal12, registerVal13 do
				local registerVal17 = Engine.CreateModel(arg1.invites[index7].model, index14)
				Engine.SetModelValue(registerVal17, value15)
			end
		end
		arg1.initialized = true
	end
	local function __FUNC_3F8A0_(arg0, arg2)
		local registerVal2 = Engine.GetGroupInviteData(arg0, arg2)
		if registerVal2 then
			registerVal2.loading = false
		else
		end
		local registerVal4, registerVal5, registerVal6 = pairs(arg1.emptyGroupInviteInfo)
		for index7,value8 in registerVal4, registerVal5, registerVal6 do
			local registerVal10 = Engine.CreateModel(arg1.invites[((arg2 % arg1.numElementsInList) + 1.000000)].model, index7)
			Engine.SetModelValue(registerVal10, value8)
		end
		return arg1.invites[((arg2 % arg1.numElementsInList) + 1.000000)].model
	end

	arg1.getModelForAbsoluteIndex = __FUNC_3F8A0_
	if arg1.updateSubscription then
		arg1:removeSubscription(arg1.updateSubscription)
	end
	registerVal7 = Engine.CreateModel(registerVal4, "eventUpdate")
	arg1.groupsEventModel = registerVal7
	local function __FUNC_3FA94_()
		local registerVal0 = Engine.GetModelValue(Engine.GetModel(registerVal4, "eventName"))
		if registerVal0 == "refreshInvites" or registerVal0 == "fetch_profiles_task_complete" then
			arg1:updateDataSource(true, true)
			local registerVal1 = Engine.GetTotalGroupInvitesCount(arg1.controller)
			registerVal1 = Engine.GetModelValue(Engine.GetModel(registerVal4, "inviteRemoved"))
			if 0.000000 < registerVal1 and registerVal1 then
				arg1:setActiveItem(arg1:getFirstSelectableItem())
			end
			local registerVal2 = Engine.GetModel(registerVal4, "inviteRemoved")
			Engine.SetModelValue(registerVal2, false)
			arg1:updateLayout()
		end
	end

	registerVal7 = arg1:subscribeToModel(arg1.groupsEventModel, __FUNC_3FA94_, false)
	arg1.updateSubscription = registerVal7
end

registerVal1.prepare = __FUNC_3F0A5_
local function __FUNC_3FD2B_(arg0)
	return Engine.GetTotalGroupInvitesCount(arg0.controller)
end

registerVal1.getCount = __FUNC_3FD2B_
local function __FUNC_3FDBF_(arg0, arg1, arg2)
	return arg1.getModelForAbsoluteIndex(arg0, arg2)
end

registerVal1.getItem = __FUNC_3FDBF_
DataSources.GroupsInvitesList = registerVal1
local function __FUNC_3FE26_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.GetModelValue(Engine.CreateModel(registerVal2, "Social.selectedFriendXUID"))
	local registerVal4 = Engine.GetModelValue(Engine.CreateModel(registerVal2, "Social.selectedFriendGamertag"))
	local registerVal5 = Engine.GetXUID64(arg0)
	if registerVal3 ~= registerVal5 then
	end
	local registerVal7 = Engine.GetModelValue(Engine.CreateModel(registerVal2, "Social.selectedFriendInTitle"))
	if registerVal3 == nil then
		return {}
	end
	local registerVal9 = Engine.GetPlayerInfo(arg0, registerVal3)
	if true ~= false then
		local registerVal10 = Engine.LobbyIsPlayerInLobby(Enum.LobbyType.LOBBY_TYPE_PRIVATE, registerVal3)
		local registerVal11 = Engine.LobbyIsPlayerInLobby(Enum.LobbyType.LOBBY_TYPE_GAME, registerVal3)
		local registerVal12 = Engine.IsPlayerMuted(arg0, Enum.LobbyType.LOBBY_TYPE_PRIVATE, registerVal3)
		local registerVal15 = {}
		registerVal15.text = "GROUPS_COMBAT_RECORD_CAPS"
		registerVal15.id = "combatRecord"
		registerVal15.disabled = false
		registerVal15.action = PromoteToLeader
		local registerVal16 = {}
		registerVal16.controller = arg0
		registerVal16.xuid = registerVal3
		registerVal15.params = registerVal16
		registerVal15.lastInGroup = false
		table.insert({}, registerVal15)
		registerVal15 = {}
		registerVal15.text = "GROUPS_VIEW_PROFILE_CAPS"
		registerVal15.id = "platformProfile"
		registerVal15.disabled = false
		registerVal15.action = OpenPlatformProfile
		registerVal16 = {}
		registerVal16.controller = arg0
		registerVal16.gamertag = registerVal4
		registerVal16.xuid = registerVal3
		registerVal15.params = registerVal16
		registerVal15.lastInGroup = true
		table.insert({}, registerVal15)
		local registerVal13 = Engine.IsFriendFromXUID(arg0, registerVal3)
		if not registerVal13 then
			registerVal15 = {}
			registerVal15.text = "GROUPS_SEND_FRIEND_REQUEST_CAPS"
			registerVal15.id = "sendFriendRequest"
			registerVal15.disabled = false
			registerVal15.action = OpenPlatformProfile
			registerVal16 = {}
			registerVal16.controller = arg0
			registerVal16.gamertag = registerVal4
			registerVal16.xuid = registerVal3
			registerVal15.params = registerVal16
			registerVal15.lastInGroup = true
			table.insert({}, registerVal15)
		end
		registerVal15 = {}
		registerVal15.text = "GROUPS_REPORT_PLAYER_CAPS"
		registerVal15.id = "reportPlayer"
		registerVal15.disabled = false
		registerVal15.action = nil
		registerVal15.params = nil
		registerVal15.lastInGroup = false
		table.insert({}, registerVal15)
		if not {} or registerVal11 then
			if registerVal12 then
				registerVal15 = {}
				registerVal15.text = "GROUPS_UNMUTE_PLAYER_CAPS"
				registerVal15.id = "unmutePlayer"
				registerVal15.disabled = false
				registerVal15.action = UnMutePlayer
				registerVal16 = {}
				registerVal16.controller = arg0
				registerVal16.xuid = registerVal3
				registerVal15.params = registerVal16
				registerVal15.lastInGroup = true
				table.insert({}, registerVal15)
			else
				registerVal15 = {}
				registerVal15.text = "GROUPS_MUTE_PLAYER_CAPS"
				registerVal15.id = "mutePlayer"
				registerVal15.disabled = false
				registerVal15.action = MutePlayer
				registerVal16 = {}
				registerVal16.controller = arg0
				registerVal16.xuid = registerVal3
				registerVal15.params = registerVal16
				registerVal15.lastInGroup = true
				table.insert({}, registerVal15)
			end
		end
		registerVal11, registerVal12, registerVal13 = ipairs({})
		for index14,value15 in registerVal11, registerVal12, registerVal13 do
			local registerVal18 = {}
			local registerVal19 = {}
			local registerVal20 = Engine.Localize(value15.text)
			registerVal19.displayText = registerVal20
			registerVal19.customId = value15.customId
			registerVal18.models = registerVal19
			registerVal19 = {}
			registerVal19.disabled = value15.disabled
			registerVal19.action = value15.action
			registerVal19.actionParam = value15.params
			registerVal19.isLastButtonInGroup = value15.lastInGroup
			registerVal18.properties = registerVal19
			table.insert({}, registerVal18)
		end
		return {}
	end

local function __FUNC_40739_(arg0, arg1, arg2)
end

local function __FUNC_40764_(arg0, arg1, arg2)
	if arg0.GroupsMemberDetailsButtons[arg1].properties.isLastButtonInGroup then
		return 9.000000
	end
end

registerVal1 = ListHelper_SetupDataSource("GroupsMemberDetailsButtons", __FUNC_3FE26_, nil, nil, __FUNC_40739_, __FUNC_40764_)
DataSources.GroupsMemberDetailsButtons = registerVal1
local function __FUNC_4082A_(arg0)
	local registerVal4 = {}
	registerVal4.text = "GROUPS_FAVORITES"
	registerVal4.displayImage = "t7_icon_menu_simple_groups_favorites"
	registerVal4.hintText = "MENU_GROUPS_SHOWCASE_FAVORITE_DESC"
	registerVal4.id = "favorites"
	registerVal4.tabWidget = "CoD.FileshareMixedCategoryContentList"
	registerVal4.disabled = false
	registerVal4.action = nil
	local registerVal5 = {}
	registerVal5.controller = arg0
	registerVal4.params = registerVal5
	registerVal4.lastInGroup = false
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal4.text = "GROUPS_RECENT"
	registerVal4.displayImage = "uie_t7_icon_menu_simple_media_recent"
	registerVal4.hintText = "MENU_GROUPS_SHOWCASE_RECENT_DESC"
	registerVal4.id = "recent"
	registerVal4.tabWidget = "CoD.FileshareMixedCategoryContentList"
	registerVal4.disabled = false
	registerVal4.action = nil
	registerVal5 = {}
	registerVal5.controller = arg0
	registerVal4.params = registerVal5
	registerVal4.lastInGroup = false
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal4.text = "GROUPS_PAINT_JOBS"
	registerVal4.displayImage = "uie_t7_mp_icon_header_paintshop"
	registerVal4.hintText = "MENU_GROUPS_SHOWCASE_PAINTJOBS_DESC"
	registerVal4.id = "paintjob"
	registerVal4.tabWidget = "CoD.FileshareCategoryContentList"
	registerVal4.disabled = false
	registerVal4.action = nil
	registerVal5 = {}
	registerVal5.controller = arg0
	registerVal4.params = registerVal5
	registerVal4.lastInGroup = false
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal4.text = "GROUPS_VARIANTS"
	registerVal4.displayImage = "uie_t7_mp_icon_header_gunsmith"
	registerVal4.hintText = "MENU_GROUPS_SHOWCASE_VARIANTS_DESC"
	registerVal4.id = "variant"
	registerVal4.tabWidget = "CoD.FileshareCategoryContentList"
	registerVal4.disabled = false
	registerVal4.action = nil
	registerVal5 = {}
	registerVal5.controller = arg0
	registerVal4.params = registerVal5
	registerVal4.lastInGroup = false
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal4.text = "GROUPS_EMBLEMS"
	registerVal4.displayImage = "uie_t7_mp_icon_header_emblem"
	registerVal4.hintText = "MENU_GROUPS_SHOWCASE_EMBLEMS_DESC"
	registerVal4.id = "emblem"
	registerVal4.tabWidget = "CoD.FileshareCategoryContentList"
	registerVal4.disabled = false
	registerVal4.action = nil
	registerVal5 = {}
	registerVal5.controller = arg0
	registerVal4.params = registerVal5
	registerVal4.lastInGroup = false
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal4.text = "GROUPS_SCREENSHOTS"
	registerVal4.displayImage = "uie_t7_mp_icon_header_screenshot"
	registerVal4.hintText = "MENU_GROUPS_SHOWCASE_SCREENSHOTS_DESC"
	registerVal4.id = "screenshot"
	registerVal4.tabWidget = "CoD.FileshareScreenshotsContentList"
	registerVal4.disabled = false
	registerVal4.action = nil
	registerVal5 = {}
	registerVal5.controller = arg0
	registerVal4.params = registerVal5
	registerVal4.lastInGroup = false
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal4.text = "GROUPS_CLIPS"
	registerVal4.displayImage = "t7_icon_menu_simple_clips"
	registerVal4.hintText = "MENU_GROUPS_SHOWCASE_CLIPS_DESC"
	registerVal4.id = "clip"
	registerVal4.tabWidget = "CoD.FileshareCategoryContentList"
	registerVal4.disabled = false
	registerVal4.action = nil
	registerVal5 = {}
	registerVal5.controller = arg0
	registerVal4.params = registerVal5
	registerVal4.lastInGroup = false
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal4.text = "GROUPS_CUSTOM_GAMES"
	registerVal4.displayImage = "uie_t7_mp_icon_header_customgames"
	registerVal4.hintText = "MENU_GROUPS_SHOWCASE_CUSTOMGAMES_DESC"
	registerVal4.id = "customgame"
	registerVal4.tabWidget = "CoD.FileshareCategoryContentList"
	registerVal4.disabled = false
	registerVal4.action = nil
	registerVal5 = {}
	registerVal5.controller = arg0
	registerVal4.params = registerVal5
	registerVal4.lastInGroup = true
	table.insert({}, registerVal4)
	local registerVal3, registerVal4, registerVal5 = ipairs({})
	for index6,value7 in registerVal3, registerVal4, registerVal5 do
		local registerVal10 = {}
		local registerVal11 = {}
		local registerVal12 = Engine.Localize(value7.text)
		registerVal11.displayText = registerVal12
		registerVal11.displayImage = value7.displayImage
		registerVal11.hintText = value7.hintText
		registerVal11.customId = value7.customId
		registerVal11.category = value7.id
		registerVal11.tabWidget = value7.tabWidget
		registerVal10.models = registerVal11
		registerVal11 = {}
		registerVal11.disabled = value7.disabled
		registerVal11.action = value7.action
		registerVal11.actionParam = value7.params
		registerVal11.isLastButtonInGroup = value7.lastInGroup
		registerVal10.properties = registerVal11
		table.insert({}, registerVal10)
	end
	return {}
end

local function __FUNC_411B7_(arg0, arg1, arg2)
end

local function __FUNC_411E0_(arg0, arg1, arg2)
	if arg0.GroupsShowcaseButtons[arg1].properties.isLastButtonInGroup then
		return 9.000000
	end
end

registerVal1 = ListHelper_SetupDataSource("GroupsShowcaseButtons", __FUNC_4082A_, nil, nil, __FUNC_411B7_, __FUNC_411E0_)
DataSources.GroupsShowcaseButtons = registerVal1
registerVal1 = {}
local function __FUNC_412A1_(arg0, arg1, arg2)
	arg1.buttons = {}
	local registerVal9 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.GetGroupList(arg0, Enum.GroupBufferType.GROUP_BUFFER_TYPE_SELF, Engine.GetModelValue(Engine.GetModel(registerVal9, "Social.selectedFriendXUID")))
	arg1.groups = registerVal4
	for index4=1.000000, #arg1.groups, 1.000000 do
		registerVal9 = Engine.GroupAdminHasPrivilege(arg0, arg1.groups[index4].groupId, Enum.GroupAdminPrivilege.GROUP_ADMIN_PRIVILEGE_INVITE_PLAYERS)
		if registerVal9 then
			local registerVal11 = {}
			registerVal11.displayText = arg1.groups[index4].name
			registerVal11.action = InviteToGroup
			registerVal11.btnType = "group"
			registerVal11.disabled = true
			registerVal11.groupId = arg1.groups[index4].groupId
			registerVal11.groupBufferType = arg1.groups[index4].bufferType
			registerVal11.name = arg1.groups[index4].name
			registerVal11.clanTag = arg1.groups[index4].clanTag
			registerVal11.description = arg1.groups[index4].description
			registerVal11.message = arg1.groups[index4].message
			registerVal11.privacy = arg1.groups[index4].privacy
			registerVal11.creationTimestamp = arg1.groups[index4].creationTimestamp
			registerVal11.owner = arg1.groups[index4].owner
			registerVal11.ownerXuid = arg1.groups[index4].ownerXuid
			registerVal11.memberStatus = arg1.groups[index4].memberStatus
			registerVal11.memberStatusText = arg1.groups[index4].memberStatusText
			registerVal11.memberCount = arg1.groups[index4].memberCount
			registerVal11.onlineCount = arg1.groups[index4].onlineCount
			registerVal11.inTitleCount = arg1.groups[index4].inTitleCount
			registerVal11.lbIndex = arg1.groups[index4].lbIndex
			registerVal11.lbSortColumn = arg1.groups[index4].lbSortColumn
			registerVal11.lbTimeFrame = arg1.groups[index4].lbTimeFrame
			registerVal11.lbHardcore = arg1.groups[index4].lbHardcore
			registerVal11.lbInitialized = arg1.groups[index4].lbInitialized
			table.insert({}, registerVal11)
		end
	end
	registerVal4 = Engine.GetModelForController(arg0)
	local registerVal5 = Engine.CreateModel(registerVal4, "groups")
	local registerVal6 = Engine.CreateModel(registerVal5, "mainButtons")
	local registerVal7, registerVal8, registerVal9 = ipairs({})
	for index10,value11 in registerVal7, registerVal8, registerVal9 do
		local registerVal12 = Engine.CreateModel(registerVal6, ("buttonModel_" .. index10))
		local registerVal15 = {}
		registerVal15.model = registerVal12
		registerVal15.type = value11.btnType
		registerVal15.groupId = value11.groupId
		registerVal15.groupBufferType = value11.groupBufferType
		table.insert(arg1.buttons, registerVal15)
		local registerVal14 = Engine.CreateModel(registerVal12, "displayText")
		Engine.SetModelValue(registerVal14, value11.displayText)
		registerVal14 = Engine.CreateModel(registerVal12, "action")
		Engine.SetModelValue(registerVal14, value11.action)
		registerVal14 = Engine.CreateModel(registerVal12, "type")
		Engine.SetModelValue(registerVal14, value11.btnType)
		registerVal14 = Engine.CreateModel(registerVal12, "groupId")
		Engine.SetModelValue(registerVal14, value11.groupId)
		registerVal14 = Engine.CreateModel(registerVal12, "groupBufferType")
		Engine.SetModelValue(registerVal14, value11.groupBufferType)
		registerVal14 = Engine.CreateModel(registerVal12, "name")
		Engine.SetModelValue(registerVal14, value11.name)
		registerVal14 = Engine.CreateModel(registerVal12, "clanTag")
		Engine.SetModelValue(registerVal14, value11.clanTag)
		registerVal14 = Engine.CreateModel(registerVal12, "description")
		Engine.SetModelValue(registerVal14, value11.description)
		registerVal14 = Engine.CreateModel(registerVal12, "message")
		Engine.SetModelValue(registerVal14, value11.message)
		registerVal14 = Engine.CreateModel(registerVal12, "privacy")
		Engine.SetModelValue(registerVal14, value11.privacy)
		registerVal14 = Engine.CreateModel(registerVal12, "creationTimestamp")
		Engine.SetModelValue(registerVal14, value11.creationTimestamp)
		registerVal14 = Engine.CreateModel(registerVal12, "owner")
		Engine.SetModelValue(registerVal14, value11.owner)
		registerVal14 = Engine.CreateModel(registerVal12, "ownerXuid")
		Engine.SetModelValue(registerVal14, value11.ownerXuid)
		registerVal14 = Engine.CreateModel(registerVal12, "memberStatus")
		Engine.SetModelValue(registerVal14, value11.memberStatus)
		registerVal14 = Engine.CreateModel(registerVal12, "memberStatusText")
		Engine.SetModelValue(registerVal14, value11.memberStatusText)
		registerVal14 = Engine.GetModelForController(arg0)
		local registerVal13 = Engine.GetModel(registerVal14, "Social.selectedFriendXUID")
		if registerVal13 then
			registerVal15 = Engine.GetModelValue(registerVal13)
			local registerVal16 = Engine.HasGroupInviteBeenSent(arg0, value11.groupId, registerVal15)
		end
		registerVal16 = Engine.CreateModel(registerVal12, "inviteSent")
		Engine.SetModelValue(registerVal16, registerVal16)
		value11.inviteSent = registerVal16
		registerVal16 = Engine.CreateModel(registerVal12, "memberCount")
		Engine.SetModelValue(registerVal16, value11.memberCount)
		registerVal16 = Engine.CreateModel(registerVal12, "onlineCount")
		Engine.SetModelValue(registerVal16, value11.onlineCount)
		registerVal16 = Engine.CreateModel(registerVal12, "inTitleCount")
		Engine.SetModelValue(registerVal16, value11.inTitleCount)
		registerVal16 = Engine.CreateModel(registerVal12, "lbIndex")
		Engine.SetModelValue(registerVal16, value11.lbIndex)
		registerVal16 = Engine.CreateModel(registerVal12, "lbSortColumn")
		Engine.SetModelValue(registerVal16, value11.lbSortColumn)
		registerVal16 = Engine.CreateModel(registerVal12, "lbTimeFrame")
		Engine.SetModelValue(registerVal16, value11.lbTimeFrame)
		registerVal16 = Engine.CreateModel(registerVal12, "lbHardcore")
		Engine.SetModelValue(registerVal16, value11.lbHardcore)
		registerVal16 = Engine.CreateModel(registerVal12, "lbInitialized")
		Engine.SetModelValue(registerVal16, value11.lbInitialized)
	end
	local registerVal10 = Engine.GetModelForController(arg0)
	registerVal9 = Engine.GetModel(registerVal10, "groups.eventUpdate")
	local function __FUNC_42126_()
		local registerVal2 = Engine.GetModelForController(arg0)
		local registerVal0 = Engine.GetModelValue(Engine.GetModel(registerVal2, "groups.eventName"))
		if registerVal0 == "refreshOutgoingInvites" then
			arg1:updateDataSource()
		end
	end

	arg1:subscribeToModel(registerVal9, __FUNC_42126_, false)
end

registerVal1.prepare = __FUNC_412A1_
local function __FUNC_42254_(arg0, arg1)
	return arg0.buttons[arg1]
end

registerVal1.getCustomPropertiesForItem = __FUNC_42254_
local function __FUNC_422AD_(arg0)
	return #arg0.buttons
end

registerVal1.getCount = __FUNC_422AD_
local function __FUNC_422FD_(arg0, arg1, arg2)
	return arg1.buttons[arg2].model
end

registerVal1.getItem = __FUNC_422FD_
DataSources.GroupsInviteButtonList = registerVal1
registerVal1 = {}
local function __FUNC_42370_(arg0, arg1, arg2)
	arg1.buttons = {}
	arg1.controller = arg0
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal5 = Engine.CreateModel(registerVal4, "groups")
	local registerVal6 = Engine.CreateModel(registerVal5, "groupCount_self")
	arg1.groupCountModel = registerVal6
	registerVal6 = Engine.CreateModel(registerVal5, "selfGroupsList")
	local registerVal7 = Engine.GetGroupList(arg0, Enum.GroupBufferType.GROUP_BUFFER_TYPE_SELF)
	if arg1 or #arg0 == 0.000000 then
		local registerVal8 = HasFriends(arg0)
		if registerVal8 then
			arg1.selfGroupsCount = 0.000000
			Engine.SearchGroups(arg0, Enum.GroupSearchType.GROUP_SEARCH_TYPE_FRIENDS)
			DataSources.FindGroupsButtonList.prepare(arg0, arg1, arg2)
		else
		else
			arg1.selfGroupsCount = #DataSources.FindGroupsButtonList.prepare
			local function __FUNC_429D4_(arg0, arg1)
				if arg0.name >= arg1.name then
				end
				return true
			end

			table.sort(registerVal7, __FUNC_429D4_)
			local registerVal9, registerVal10, registerVal11 = ipairs(registerVal7)
			for index12,value13 in registerVal9, registerVal10, registerVal11 do
				local registerVal15 = Engine.GetPrimaryGroup(arg0)
				if value13.groupId == registerVal15 then
				end
			end
			if 0.000000 < index12 then
				registerVal9 = LUI.ShallowCopy(registerVal7[index12])
				table.remove(registerVal7, index12)
				table.insert(registerVal7, 1.000000, registerVal9)
			end
			registerVal9, registerVal10, registerVal11 = ipairs(registerVal7)
			for index12,value13 in registerVal9, registerVal10, registerVal11 do
				local registerVal14 = Engine.CreateModel(registerVal6, ("listItem_" .. index12))
				registerVal15, registerVal16, registerVal17 = pairs(value13)
				for index18,value19 in registerVal15, registerVal16, registerVal17 do
					local registerVal21 = Engine.CreateModel(registerVal14, index18)
					Engine.SetModelValue(registerVal21, value19)
				end
				registerVal16 = Engine.CreateModel(registerVal14, "action")
				Engine.SetModelValue(registerVal16, OpenGroupHeadquarters)
				registerVal17 = {}
				registerVal17.model = registerVal14
				table.insert(arg1.buttons, registerVal17)
			end
		end
	end
	local function __FUNC_42A3A_()
		arg1:updateDataSource()
	end

	arg1:subscribeToModel(arg1.groupCountModel, __FUNC_42A3A_, false)
end

registerVal1.prepare = __FUNC_42370_
local function __FUNC_42A8A_(arg0)
	local registerVal1 = HasFriends(arg0.controller)
	if arg0.selfGroupsCount == 0.000000 and registerVal1 then
		registerVal1 = Engine.GetTotalGroupsCount(arg0.controller, Enum.GroupBufferType.GROUP_BUFFER_TYPE_SEARCH)
		if 6.000000 < registerVal1 then
		end
		return 6.000000
	end
	return #arg0.buttons
end

registerVal1.getCount = __FUNC_42A8A_
local function __FUNC_42C16_(arg0, arg1, arg2)
	local registerVal3 = HasFriends(arg0)
	if arg1.selfGroupsCount == 0.000000 and registerVal3 then
		return arg1.getModelForAbsoluteIndex(arg0, arg2)
	end
	if 0.000000 < #arg1.buttons and arg2 <= #arg1.buttons then
		return arg1.buttons[arg2].model
	end
	return nil
end

registerVal1.getItem = __FUNC_42C16_
DataSources.GroupsMainButtonList = registerVal1
local function __FUNC_42D58_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.image = "t7_icon_menu_simple_groups_friends"
	registerVal5.displayText = "GROUPS_FRIENDS_GROUPS"
	registerVal5.category = "friends"
	registerVal5.frameWidget = "CoD.FindGroupsTabFriendsGroupsFrame"
	registerVal4.models = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.image = "t7_icon_menu_simple_groups_popular"
	registerVal5.displayText = "GROUPS_POPULAR_GROUPS"
	registerVal5.category = "popular"
	registerVal5.frameWidget = "CoD.FindGroupsTabPopularGroupsFrame"
	registerVal4.models = registerVal5
	table.insert({}, registerVal4)
	registerVal5 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.GetModelValue(Engine.CreateModel(registerVal5, "groups.searchResultsVisible"))
	if registerVal3 then
	end
	local registerVal6 = Engine.GetModelForController(arg0)
	registerVal4 = Engine.GetModelValue(Engine.CreateModel(registerVal6, "groups.searchPlayerResultsVisible"))
	if registerVal4 then
	end
	registerVal6 = {}
	local registerVal7 = {}
	registerVal7.image = "t7_icon_menu_simple_groups_search"
	registerVal7.displayText = "GROUPS_SEARCH_GROUPS"
	registerVal7.category = "params"
	registerVal7.frameWidget = "CoD.FindGroupsTabSearchGroupsResultsFrame"
	registerVal6.models = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.image = "t7_icon_menu_simple_groups_search_player"
	registerVal7.displayText = "GROUPS_SEARCH_PLAYER"
	registerVal7.category = "playerSearch"
	registerVal7.frameWidget = "CoD.FindGroupsTabSearchPlayerResultsFrame"
	registerVal6.models = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.image = "t7_icon_menu_simple_groups_create"
	registerVal7.displayText = "GROUPS_CREATE_GROUP_CAPS"
	registerVal7.category = "create"
	registerVal7.frameWidget = "CoD.FindGroupsTabCreateGroupsFrame"
	registerVal7.action = CreateNewGroupFlow
	registerVal6.models = registerVal7
	table.insert({}, registerVal6)
	return {}
end

local function __FUNC_433A9_(arg0, arg1, arg2)
	if not arg1.subscription then
		local registerVal6 = Engine.GetModelForController(arg0)
		local registerVal5 = Engine.GetModel(registerVal6, "groups.searchResultsVisible")
		local function __FUNC_4356F_(arg0)
			arg1:updateDataSource()
		end

		local registerVal3 = arg1:subscribeToModel(registerVal5, __FUNC_4356F_, false)
		arg1.subscription = registerVal3
	end
	if not arg1.playerSearchSubscription then
		registerVal6 = Engine.GetModelForController(arg0)
		registerVal5 = Engine.GetModel(registerVal6, "groups.searchPlayerResultsVisible")
		local function __FUNC_435BE_(arg0)
			arg1:updateDataSource()
		end

		registerVal3 = arg1:subscribeToModel(registerVal5, __FUNC_435BE_, false)
		arg1.playerSearchSubscription = registerVal3
	end
end

local function __FUNC_4360E_(arg0, arg1, arg2)
	if arg1 == 4.000000 then
		return 10.000000
	end
	return 0.000000
end

registerVal1 = ListHelper_SetupDataSource("FindGroupsCategoryList", __FUNC_42D58_, true, nil, __FUNC_433A9_, __FUNC_4360E_)
DataSources.FindGroupsCategoryList = registerVal1
registerVal1 = {}
local function __FUNC_4365F_(arg0, arg1, arg2)
	arg1.controller = arg0
	arg1.numElementsInList = arg1.vCount
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal3, "groups")
	local registerVal5 = Engine.CreateModel(registerVal4, "findGroupsList")
	local registerVal6 = {}
	local registerVal7 = Engine.StringToXUIDDecimal("0")
	registerVal6.groupId = registerVal7
	registerVal6.bufferType = Enum.GroupBufferType.GROUP_BUFFER_TYPE_INVALID
	registerVal6.name = ""
	registerVal6.description = ""
	registerVal6.message = ""
	registerVal6.privacy = Enum.GroupPrivacy.GROUP_PRIVACY_PUBLIC
	registerVal6.privacyString = ""
	registerVal6.joinApprovalType = Enum.GroupJoinApprovalType.GROUP_JOIN_APPROVAL_OFF
	registerVal6.creationTimeStamp = ""
	registerVal6.owner = ""
	registerVal6.ownerXuid = 0.000000
	registerVal6.memberCount = 0.000000
	registerVal6.groupBufferType = Enum.GroupBufferType.GROUP_BUFFER_TYPE_SEARCH
	registerVal6.onlineCount = 0.000000
	registerVal6.inTitleCount = 0.000000
	registerVal6.lbDef = ""
	registerVal6.lbTimeFrame = 0.000000
	registerVal6.lbHardcore = false
	registerVal6.lbInitialized = false
	registerVal6.action = ProcessJoinSelectedGroup
	registerVal6.loading = true
	registerVal6.isPrimaryGroup = false
	arg1.emptyGroupInfo = registerVal6
	if not arg1.initialized then
		arg1.groups = {}
		for index6=1.000000, arg1.numElementsInList, 1.000000 do
			arg1.groups[index6] = {}
			local registerVal11 = Engine.CreateModel(registerVal5, ("listItem_" .. index6))
			arg1.groups[index6].model = registerVal11
			local registerVal10, registerVal11, registerVal12 = pairs(arg1.emptyGroupInfo)
			for index13,value14 in registerVal10, registerVal11, registerVal12 do
				local registerVal16 = Engine.CreateModel(arg1.groups[index6].model, index13)
				Engine.SetModelValue(registerVal16, value14)
			end
		end
		arg1.initialized = true
	end
	local function __FUNC_43E16_(arg0, arg2)
		local registerVal2 = Engine.GetGroupData(arg0, Enum.GroupBufferType.GROUP_BUFFER_TYPE_SEARCH, arg2)
		if registerVal2 then
			registerVal2.loading = false
		else
		end
		arg1.emptyGroupInfo.isPrimaryGroup = false
		local registerVal4, registerVal5, registerVal6 = pairs(arg1.emptyGroupInfo)
		for index7,value8 in registerVal4, registerVal5, registerVal6 do
			local registerVal10 = Engine.CreateModel(arg1.groups[((arg2 % arg1.numElementsInList) + 1.000000)].model, index7)
			Engine.SetModelValue(registerVal10, value8)
		end
		return arg1.groups[((arg2 % arg1.numElementsInList) + 1.000000)].model
	end

	arg1.getModelForAbsoluteIndex = __FUNC_43E16_
	if arg1.updateSubscription then
		arg1:removeSubscription(arg1.updateSubscription)
	end
	registerVal6 = Engine.CreateModel(registerVal4, "eventUpdate")
	arg1.groupsEventModel = registerVal6
	local function __FUNC_4407C_()
		local registerVal0 = Engine.GetModelValue(Engine.GetModel(registerVal4, "eventName"))
		if registerVal0 == "fetch_profiles_task_complete" then
			arg1:updateDataSource(true, true)
			arg1:updateLayout()
		end
	end

	registerVal6 = arg1:subscribeToModel(arg1.groupsEventModel, __FUNC_4407C_, false)
	arg1.updateSubscription = registerVal6
end

registerVal1.prepare = __FUNC_4365F_
local function __FUNC_441A2_(arg0)
	return Engine.GetTotalGroupsCount(arg0.controller, Enum.GroupBufferType.GROUP_BUFFER_TYPE_SEARCH)
end

registerVal1.getCount = __FUNC_441A2_
local function __FUNC_44296_(arg0, arg1, arg2)
	return arg1.getModelForAbsoluteIndex(arg0, arg2)
end

registerVal1.getItem = __FUNC_44296_
DataSources.FindGroupsButtonList = registerVal1
local function __FUNC_442FE_(arg0)
	local registerVal2 = IsGroupOwner(arg0)
	if not registerVal2 then
		registerVal2 = IsGroupAdmin(arg0)
	end
	local registerVal5 = {}
	local registerVal6 = {}
	registerVal6.tabIcon = CoD.buttonStrings.shoulderl
	registerVal5.models = registerVal6
	registerVal6 = {}
	registerVal6.m_mouseDisabled = true
	registerVal5.properties = registerVal6
	table.insert({}, registerVal5)
	registerVal5 = {}
	registerVal6 = {}
	local registerVal7 = Engine.Localize("GROUPS_OVERVIEW_CAPS")
	registerVal6.tabName = registerVal7
	registerVal6.tabWidget = "CoD.OverviewTab"
	registerVal5.models = registerVal6
	registerVal6 = {}
	registerVal6.tabId = "overview"
	registerVal5.properties = registerVal6
	table.insert({}, registerVal5)
	registerVal5 = {}
	registerVal6 = {}
	registerVal7 = Engine.Localize("GROUPS_ROSTER_CAPS")
	registerVal6.tabName = registerVal7
	registerVal6.tabWidget = "CoD.RosterTab"
	registerVal5.models = registerVal6
	registerVal6 = {}
	registerVal6.tabId = "roster"
	registerVal5.properties = registerVal6
	table.insert({}, registerVal5)
	registerVal5 = {}
	registerVal6 = {}
	registerVal7 = Engine.Localize("GROUPS_LEADERBOARD_CAPS")
	registerVal6.tabName = registerVal7
	registerVal6.tabWidget = "CoD.LeaderboardTab"
	registerVal5.models = registerVal6
	registerVal6 = {}
	registerVal6.tabId = "leaderboard"
	registerVal5.properties = registerVal6
	table.insert({}, registerVal5)
	registerVal5 = {}
	registerVal6 = {}
	registerVal7 = Engine.Localize("GROUPS_SHOWCASE_CAPS")
	registerVal6.tabName = registerVal7
	registerVal6.tabWidget = "CoD.ShowcaseTab"
	registerVal5.models = registerVal6
	registerVal6 = {}
	registerVal6.tabId = "showcase"
	registerVal5.properties = registerVal6
	table.insert({}, registerVal5)
	if registerVal2 then
		registerVal5 = {}
		registerVal6 = {}
		registerVal7 = Engine.Localize("GROUPS_ADMIN_CAPS")
		registerVal6.tabName = registerVal7
		registerVal6.tabWidget = "CoD.AdminTab"
		registerVal5.models = registerVal6
		registerVal6 = {}
		registerVal6.tabId = "admin"
		registerVal5.properties = registerVal6
		table.insert({}, registerVal5)
	end
	registerVal5 = {}
	registerVal6 = {}
	registerVal6.tabIcon = CoD.buttonStrings.shoulderr
	registerVal5.models = registerVal6
	registerVal6 = {}
	registerVal6.m_mouseDisabled = true
	registerVal5.properties = registerVal6
	table.insert({}, registerVal5)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("GroupsHeadquartersTabModel", __FUNC_442FE_, true)
DataSources.GroupsHeadquartersTabList = registerVal1
local function __FUNC_44829_(arg0)
	local registerVal2 = IsGroupMember(arg0)
	local registerVal3 = IsGroupOwner(arg0)
	local function __FUNC_44BED_(arg0, arg1, arg2)
		local registerVal3 = GoBack(arg0, arg2)
		local registerVal7 = Engine.GetModelForController(arg2)
		local registerVal5 = Engine.GetModelValue(Engine.GetModel(registerVal7, "groups.grouphqtabname"))
		if registerVal5 == "overview" then
		end
		ProcessLeaveSelectedGroup(registerVal3, arg1, arg2, false)
	end

	local function __FUNC_44D50_(arg0, arg1, arg2, arg3, arg4)
		local registerVal5 = GoBack(arg0, arg2)
		ShowReportGroupDialog(arg0, arg1, arg2, arg3, registerVal5)
	end

	if registerVal2 and not registerVal3 then
		local registerVal8 = {}
		local registerVal9 = {}
		local registerVal10 = Engine.Localize("GROUPS_LEAVE_GROUP_CAPS")
		registerVal9.displayText = registerVal10
		registerVal9.icon = "t7_mp_icon_groups_remove"
		registerVal9.action = __FUNC_44BED_
		registerVal10 = Engine.Localize("GROUPS_LEAVE_GROUP_DESC")
		registerVal9.hintText = registerVal10
		registerVal8.models = registerVal9
		table.insert({}, registerVal8)
	end
	if registerVal2 then
		registerVal8 = {}
		registerVal9 = {}
		registerVal10 = Engine.Localize("GROUPS_SET_AS_PRIMARY_GROUP_CAPS")
		registerVal9.displayText = registerVal10
		registerVal9.icon = "t7_mp_icon_groups_primary"
		registerVal9.action = SetPrimaryGroup
		registerVal10 = Engine.Localize("GROUPS_SET_AS_PRIMARY_GROUP_DESC")
		registerVal9.hintText = registerVal10
		registerVal8.models = registerVal9
		table.insert({}, registerVal8)
	end
	registerVal8 = {}
	registerVal9 = {}
	registerVal10 = LocalizeToUpperString("MENU_REPORT_GROUP")
	registerVal9.displayText = registerVal10
	registerVal9.icon = "uie_t7_icon_error_overlays"
	registerVal9.action = __FUNC_44D50_
	registerVal10 = Engine.Localize("MENU_REPORT_GROUP_HINT")
	registerVal9.hintText = registerVal10
	registerVal8.models = registerVal9
	table.insert({}, registerVal8)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("GroupHeadquartersOverviewButtonListModel", __FUNC_44829_)
DataSources.GroupHeadquartersOverviewButtonList = registerVal1
local function __FUNC_44DD7_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	local registerVal6 = Engine.Localize("MPUI_PLAYER_DETAILS")
	registerVal5.displayText = registerVal6
	registerVal5.icon = "t7_icon_menu_simple_media_manager"
	registerVal6 = Engine.Localize("MENU_GROUP_INVITES_PLAYER_DETAILS_DESC")
	registerVal5.hintText = registerVal6
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.action = GroupInvitesOpenPlayerDetails
	registerVal6 = {}
	registerVal6.controller = arg0
	registerVal6.gamertag = sentByGamertag
	registerVal6.xuid = sentByXuid
	registerVal5.actionParam = registerVal6
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("GroupInvitesOverviewButtonList", __FUNC_44DD7_)
DataSources.GroupInvitesOverviewButtonList = registerVal1
local function __FUNC_45052_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.displayText = "GROUPS_EDIT_LEADERBOARD"
	registerVal5.icon = "t7_icon_menu_simple_rename"
	local registerVal6 = Engine.Localize("GROUPS_EDIT_LEADERBOARD_HINT_TEXT")
	registerVal5.hintText = registerVal6
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.action = EditGroupLeaderboard
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.displayText = "GROUPS_REMOVE_LEADERBOARD"
	registerVal5.icon = "t7_mp_icon_groups_remove"
	registerVal6 = Engine.Localize("GROUPS_REMOVE_LEADERBOARD_HINT_TEXT")
	registerVal5.hintText = registerVal6
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.action = RemoveGroupLeaderboard
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("GroupHeadquartersAdminOptionsListModel", __FUNC_45052_)
DataSources.GroupLeaderboardOptionsList = registerVal1
local function __FUNC_452FE_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.GetModelValue(Engine.CreateModel(registerVal2, "Social.selectedFriendXUID"))
	local registerVal4 = Engine.GetModelValue(Engine.CreateModel(registerVal2, "Social.selectedFriendGamertag"))
	local registerVal5 = Engine.GetXUID64(arg0)
	if registerVal3 ~= registerVal5 then
	end
	local registerVal7 = Engine.GetModelValue(Engine.CreateModel(registerVal2, "Social.selectedFriendInTitle"))
	if registerVal3 == nil then
		return {}
	end
	local registerVal8 = HasAdminPrivilege(arg0, Enum.GroupAdminPrivilege.GROUP_ADMIN_PRIVILEGE_MANAGE_ADMINS)
	if registerVal8 then
		registerVal8 = IsGroupAdmin(arg0, registerVal3)
		if not registerVal8 then
			local registerVal10 = {}
			local registerVal11 = {}
			registerVal11.displayText = "GROUPS_PROMOTE_TO_ADMIN_CAPS"
			registerVal11.icon = "t7_mp_icon_groups_primary"
			local registerVal12 = Engine.Localize("GROUPS_PROMOTE_TO_ADMIN_DESC")
			registerVal11.hintText = registerVal12
			registerVal10.models = registerVal11
			registerVal11 = {}
			registerVal11.action = PromoteSelectedGroupMemberToAdmin
			registerVal12 = {}
			registerVal12.controller = arg0
			registerVal12.gamertag = registerVal4
			registerVal12.xuid = registerVal3
			registerVal11.params = registerVal12
			registerVal10.properties = registerVal11
			table.insert({}, registerVal10)
		else
			registerVal8 = IsGroupAdmin(arg0, registerVal3)
			if registerVal8 then
				registerVal10 = {}
				registerVal11 = {}
				registerVal11.displayText = "GROUPS_DEMOTE_ADMIN_CAPS"
				registerVal11.icon = "t7_mp_icon_groups_remove"
				registerVal12 = Engine.Localize("GROUPS_DEMOTE_ADMIN_DESC")
				registerVal11.hintText = registerVal12
				registerVal10.models = registerVal11
				registerVal11 = {}
				registerVal11.action = DemoteAdminToRegularMember
				registerVal12 = {}
				registerVal12.controller = arg0
				registerVal12.gamertag = registerVal4
				registerVal12.xuid = registerVal3
				registerVal11.params = registerVal12
				registerVal10.properties = registerVal11
				table.insert({}, registerVal10)
			end
		end
	end
	registerVal8 = HasAdminPrivilege(arg0, Enum.GroupAdminPrivilege.GROUP_ADMIN_PRIVILEGE_REMOVE_MEMBERS)
	if registerVal8 then
		registerVal10 = {}
		registerVal11 = {}
		registerVal11.displayText = "GROUPS_REMOVE_FROM_GROUP_CAPS"
		registerVal11.icon = "t7_mp_icon_groups_remove"
		registerVal12 = Engine.Localize("GROUPS_REMOVE_FROM_GROUP_DESC")
		registerVal11.hintText = registerVal12
		registerVal10.models = registerVal11
		registerVal11 = {}
		registerVal11.action = RemoveFromGroup
		registerVal12 = {}
		registerVal12.controller = arg0
		registerVal12.gamertag = registerVal4
		registerVal12.xuid = registerVal3
		registerVal11.params = registerVal12
		registerVal10.properties = registerVal11
		table.insert({}, registerVal10)
	end
	registerVal8 = HasAdminPrivilege(arg0, Enum.GroupAdminPrivilege.GROUP_ADMIN_PRIVILEGE_BAN_MEMBERS)
	if registerVal8 then
		registerVal10 = {}
		registerVal11 = {}
		registerVal11.displayText = "GROUPS_BAN_FROM_GROUP_CAPS"
		registerVal11.icon = "t7_mp_icon_groups_ban"
		registerVal12 = Engine.Localize("GROUPS_BAN_FROM_GROUP_DESC")
		registerVal11.hintText = registerVal12
		registerVal10.models = registerVal11
		registerVal11 = {}
		registerVal11.action = BanFromGroup
		registerVal12 = {}
		registerVal12.controller = arg0
		registerVal12.gamertag = registerVal4
		registerVal12.xuid = registerVal3
		registerVal11.params = registerVal12
		registerVal10.properties = registerVal11
		table.insert({}, registerVal10)
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("GroupHeadquartersAdminOptionsListModel", __FUNC_452FE_)
DataSources.GroupHeadquartersAdminOptionsList = registerVal1
local function __FUNC_45B27_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	local registerVal6 = Engine.Localize("GROUPS_JOIN_REQUESTS")
	registerVal5.displayText = registerVal6
	registerVal5.action = CoD.NullFunction
	registerVal6 = HasAdminPrivilege(arg0, Enum.GroupAdminPrivilege.GROUP_ADMIN_PRIVILEGE_APPROVE_JOIN_REQUESTS)
	registerVal5.disabled = (not registerVal6)
	registerVal5.frameWidget = "CoD.AdminTabGroupApplicationsFrame"
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.disabledAllowNav = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal6 = Engine.Localize("GROUPS_ADMIN_SETTINGS")
	registerVal5.displayText = registerVal6
	registerVal5.action = CoD.NullFunction
	registerVal6 = HasAdminPrivilege(arg0, Enum.GroupAdminPrivilege.GROUP_ADMIN_PRIVILEGE_MANAGE_ADMINS)
	registerVal5.disabled = (not registerVal6)
	registerVal5.frameWidget = "CoD.AdminTabGroupAdminsFrame"
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.disabledAllowNav = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal6 = Engine.Localize("GROUPS_BANNED_MEMBERS")
	registerVal5.displayText = registerVal6
	registerVal5.action = CoD.NullFunction
	registerVal6 = HasAdminPrivilege(arg0, Enum.GroupAdminPrivilege.GROUP_ADMIN_PRIVILEGE_BAN_MEMBERS)
	registerVal5.disabled = (not registerVal6)
	registerVal5.frameWidget = "CoD.AdminTabGroupBannedMembersFrame"
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.disabledAllowNav = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	local registerVal3 = HasAdminPrivilege(arg0, Enum.GroupAdminPrivilege.GROUP_ADMIN_PRIVILEGE_EDIT_GROUP_MESSAGE)
	registerVal3 = HasAdminPrivilege(arg0, Enum.GroupAdminPrivilege.GROUP_ADMIN_PRIVILEGE_EDIT_GROUP_DESCRIPTION)
	registerVal3 = HasAdminPrivilege(arg0, Enum.GroupAdminPrivilege.GROUP_ADMIN_PRIVILEGE_EDIT_GROUP_EMBLEM)
	if not registerVal3 and not {} or registerVal3 then
	end
	registerVal5 = {}
	registerVal6 = {}
	local registerVal7 = Engine.Localize("GROUPS_EDIT_GROUP_OVERVIEW")
	registerVal6.displayText = registerVal7
	registerVal6.action = CoD.NullFunction
	registerVal6.disabled = (not CoD.NullFunction)
	registerVal6.frameWidget = "CoD.AdminTabGroupOverviewFrame"
	registerVal5.models = registerVal6
	registerVal6 = {}
	registerVal6.disabledAllowNav = true
	registerVal5.properties = registerVal6
	table.insert({}, registerVal5)
	registerVal5 = {}
	registerVal6 = {}
	registerVal7 = Engine.Localize("GROUPS_CHANGE_GROUP_TYPE")
	registerVal6.displayText = registerVal7
	registerVal6.action = CoD.NullFunction
	registerVal7 = HasAdminPrivilege(arg0, Enum.GroupAdminPrivilege.GROUP_ADMIN_PRIVILEGE_EDIT_GROUP_TYPE)
	registerVal6.disabled = (not registerVal7)
	registerVal6.frameWidget = "CoD.AdminTabGroupPrivacyFrame"
	registerVal5.models = registerVal6
	registerVal6 = {}
	registerVal6.disabledAllowNav = true
	registerVal5.properties = registerVal6
	table.insert({}, registerVal5)
	registerVal5 = {}
	registerVal6 = {}
	registerVal7 = Engine.Localize("GROUPS_EDIT_GROUP_NAME")
	registerVal6.displayText = registerVal7
	registerVal6.action = EditSelectedGroupName
	registerVal7 = HasAdminPrivilege(arg0, Enum.GroupAdminPrivilege.GROUP_ADMIN_PRIVILEGE_EDIT_GROUP_NAME)
	registerVal6.disabled = (not registerVal7)
	registerVal6.frameWidget = "CoD.AdminTabGroupNameFrame"
	registerVal5.models = registerVal6
	registerVal6 = {}
	registerVal6.disabledAllowNav = true
	registerVal5.properties = registerVal6
	table.insert({}, registerVal5)
	registerVal3 = IsGroupOwner(arg0)
	if registerVal3 then
		registerVal5 = {}
		registerVal6 = {}
		registerVal7 = Engine.Localize("GROUPS_TRANSFER_OWNERSHIP")
		registerVal6.displayText = registerVal7
		registerVal6.action = CoD.NullFunction
		registerVal6.frameWidget = "CoD.AdminTabGroupAdminsTransferOwnershipFrame"
		registerVal5.models = registerVal6
		table.insert({}, registerVal5)
		registerVal5 = {}
		registerVal6 = {}
		registerVal7 = Engine.Localize("GROUPS_DELETE_GROUP")
		registerVal6.displayText = registerVal7
		registerVal6.action = ProcessLeaveSelectedGroup
		registerVal6.frameWidget = "CoD.AdminTabGroupDeleteFrame"
		registerVal5.models = registerVal6
		table.insert({}, registerVal5)
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("GroupHeadquartersAdminButtonListModel", __FUNC_45B27_)
DataSources.GroupHeadquartersAdminButtonList = registerVal1
registerVal1 = {}
local function __FUNC_4654F_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	return CoD.perController[registerVal1].selectedGroup
end

registerVal1.getModel = __FUNC_4654F_
DataSources.SelectedGroup = registerVal1
registerVal1 = {}
local function __FUNC_4662D_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	registerVal1 = Engine.GetModelForController(registerVal1)
	local registerVal2 = Engine.CreateModel(registerVal1, "groups")
	return Engine.CreateModel(registerVal2, "createGroup")
end

registerVal1.getModel = __FUNC_4662D_
DataSources.CreateGroup = registerVal1
local function __FUNC_46753_(arg0)
	local registerVal1 = {}
	local registerVal2 = {}
	registerVal2.name = "GROUPS_PRIVACY_PUBLIC"
	registerVal2.value = Enum.GroupPrivacy.GROUP_PRIVACY_PUBLIC
	local registerVal3 = {}
	registerVal3.name = "GROUPS_PRIVACY_PRIVATE"
	registerVal3.value = Enum.GroupPrivacy.GROUP_PRIVACY_PRIVATE
	registerVal1 = {registerVal2, registerVal3}
	local registerVal4 = Engine.GetModel(CoD.perController[arg0].selectedGroup, "privacy")
	if CoD.perController[arg0].selectedGroup and registerVal4 then
		registerVal4 = Engine.GetModelValue(Engine.GetModel(CoD.perController[arg0].selectedGroup, "privacy"))
	end
	registerVal4, registerVal5, registerVal6 = ipairs(registerVal1)
	for index7,value8 in registerVal4, registerVal5, registerVal6 do
		local registerVal11 = {}
		local registerVal12 = {}
		registerVal12.text = registerVal1[index7].name
		registerVal12.value = registerVal1[index7].value
		registerVal11.models = registerVal12
		registerVal12 = {}
		registerVal12.title = registerVal1[index7].name
		registerVal12.value = registerVal1[index7].value
		registerVal12.action = GroupChangePrivacy
		if registerVal4 ~= registerVal1[index7].value then
		end
		registerVal12.selectIndex = true
		if #true > 2.000000 then
		end
		registerVal12.loopEdges = true
		registerVal11.properties = registerVal12
		table.insert({}, registerVal11)
	end
	{}[1.000000].properties.first = true
	{}[#{}[1.000000].properties].properties.last = true
	return {}
end

registerVal1 = ListHelper_SetupDataSource("GroupPrivacyModes", __FUNC_46753_, nil, nil, nil)
DataSources.GroupPrivacyModes = registerVal1
local function __FUNC_46C33_(arg0)
	local registerVal1 = {}
	local registerVal2 = {}
	registerVal2.name = "GROUPS_PRIVACY_PUBLIC"
	registerVal2.value = Enum.GroupPrivacy.GROUP_PRIVACY_PUBLIC
	local registerVal3 = {}
	registerVal3.name = "GROUPS_PRIVACY_PRIVATE"
	registerVal3.value = Enum.GroupPrivacy.GROUP_PRIVACY_PRIVATE
	registerVal1 = {registerVal2, registerVal3}
	registerVal3, registerVal4, registerVal5 = ipairs(registerVal1)
	for index6,value7 in registerVal3, registerVal4, registerVal5 do
		local registerVal10 = {}
		local registerVal11 = {}
		registerVal11.text = registerVal1[index6].name
		registerVal11.value = registerVal1[index6].value
		registerVal10.models = registerVal11
		registerVal11 = {}
		registerVal11.title = registerVal1[index6].name
		registerVal11.value = registerVal1[index6].value
		registerVal11.action = GroupChangeSearchParamGroupType
		local registerVal14 = Engine.GetModelForController(arg0)
		local registerVal12 = Engine.GetModelValue(Engine.GetModel(registerVal14, "groups.searchGroupsGroupType"))
		if registerVal12 ~= registerVal1[index6].value then
		end
		registerVal11.selectIndex = true
		if #true > 2.000000 then
		end
		registerVal11.loopEdges = true
		registerVal10.properties = registerVal11
		table.insert({}, registerVal10)
	end
	{}[1.000000].properties.first = true
	{}[#{}[1.000000].properties].properties.last = true
	return {}
end

registerVal1 = ListHelper_SetupDataSource("GroupsSearchGroupType", __FUNC_46C33_, nil, nil, nil)
DataSources.GroupsSearchGroupType = registerVal1
local function __FUNC_47071_(arg0)
	local registerVal1 = {}
	local registerVal2 = {}
	registerVal2.name = "GROUPS_SEARCH_SIZE_RANGE_ANY"
	registerVal2.value = Enum.GroupSearchSizeRangeIndex.GROUP_SEARCH_SIZE_RANGE_INDEX_ANY
	local registerVal3 = {}
	registerVal3.name = "GROUPS_SEARCH_SIZE_RANGE_1"
	registerVal3.value = Enum.GroupSearchSizeRangeIndex.GROUP_SEARCH_SIZE_RANGE_INDEX_1
	local registerVal4 = {}
	registerVal4.name = "GROUPS_SEARCH_SIZE_RANGE_2"
	registerVal4.value = Enum.GroupSearchSizeRangeIndex.GROUP_SEARCH_SIZE_RANGE_INDEX_2
	local registerVal5 = {}
	registerVal5.name = "GROUPS_SEARCH_SIZE_RANGE_3"
	registerVal5.value = Enum.GroupSearchSizeRangeIndex.GROUP_SEARCH_SIZE_RANGE_INDEX_3
	local registerVal6 = {}
	registerVal6.name = "GROUPS_SEARCH_SIZE_RANGE_4"
	registerVal6.value = Enum.GroupSearchSizeRangeIndex.GROUP_SEARCH_SIZE_RANGE_INDEX_4
	registerVal1 = {registerVal2, registerVal3, registerVal4, registerVal5, registerVal6}
	registerVal3, registerVal4, registerVal5 = ipairs(registerVal1)
	for index6,value7 in registerVal3, registerVal4, registerVal5 do
		local registerVal10 = {}
		local registerVal11 = {}
		registerVal11.text = registerVal1[index6].name
		registerVal11.value = registerVal1[index6].value
		registerVal10.models = registerVal11
		registerVal11 = {}
		registerVal11.title = registerVal1[index6].name
		registerVal11.value = registerVal1[index6].value
		registerVal11.action = GroupChangeSearchParamGroupSize
		local registerVal14 = Engine.GetModelForController(arg0)
		local registerVal12 = Engine.GetModelValue(Engine.GetModel(registerVal14, "groups.searchGroupsGroupSize"))
		if registerVal12 ~= registerVal1[index6].value then
		end
		registerVal11.selectIndex = true
		registerVal10.properties = registerVal11
		table.insert({}, registerVal10)
	end
	{}[1.000000].properties.first = true
	{}[#{}[1.000000].properties].properties.last = true
	return {}
end

registerVal1 = ListHelper_SetupDataSource("GroupsSearchGroupSize", __FUNC_47071_, nil, nil, nil)
DataSources.GroupsSearchGroupSize = registerVal1
local function __FUNC_4760F_(arg0)
	local registerVal1 = {}
	local registerVal2 = {}
	registerVal2.name = "GROUPS_JOIN_APPROVAL_OFF"
	registerVal2.value = Enum.GroupJoinApprovalType.GROUP_JOIN_APPROVAL_OFF
	local registerVal3 = {}
	registerVal3.name = "GROUPS_JOIN_APPROVAL_ON"
	registerVal3.value = Enum.GroupJoinApprovalType.GROUP_JOIN_APPROVAL_ON
	registerVal1 = {registerVal2, registerVal3}
	registerVal3, registerVal4, registerVal5 = ipairs(registerVal1)
	for index6,value7 in registerVal3, registerVal4, registerVal5 do
		local registerVal10 = {}
		local registerVal11 = {}
		registerVal11.text = registerVal1[index6].name
		registerVal11.value = registerVal1[index6].value
		registerVal11.selectIndex = 1.000000
		registerVal10.models = registerVal11
		registerVal11 = {}
		registerVal11.title = registerVal1[index6].name
		registerVal11.value = registerVal1[index6].value
		registerVal11.action = GroupChangeJoinApprovalType
		local registerVal12 = Engine.GetSelectedGroupJoinApprovalType()
		if registerVal12 ~= registerVal1[index6].value then
		end
		registerVal11.selectIndex = true
		if #true > 2.000000 then
		end
		registerVal11.loopEdges = true
		registerVal10.properties = registerVal11
		table.insert({}, registerVal10)
	end
	{}[1.000000].properties.first = true
	{}[#{}[1.000000].properties].properties.last = true
	return {}
end

registerVal1 = ListHelper_SetupDataSource("GroupJoinApprovalTypes", __FUNC_4760F_, nil, nil, nil)
DataSources.GroupJoinApprovalTypes = registerVal1
registerVal1 = {}
local function __FUNC_479EA_(arg0, arg1, arg2)
	arg1.buttons = {}
	local registerVal5 = Engine.GetModelForController(arg0)
	local registerVal6 = Engine.GetModel(registerVal5, "groups.leaderboardmaker.state")
	local registerVal7 = Engine.GetModelValue(registerVal6)
	local registerVal9 = Engine.GetModelForController(arg0)
	local registerVal8 = Engine.GetModel(registerVal9, "groups.selectedGroup")
	registerVal9 = Engine.GetModelValue(Engine.GetModel(registerVal8, "lbDef"))
	local registerVal10 = Engine.GetModelValue(Engine.GetModel(registerVal8, "lbHardcore"))
	local registerVal11 = Engine.GetModelValue(Engine.GetModel(registerVal8, "lbArena"))
	local registerVal12 = Engine.GetModelValue(Engine.GetModel(registerVal8, "lbSortType"))
	local registerVal13 = Engine.GetModelValue(Engine.GetModel(registerVal8, "lbTimeFrame"))
	local registerVal14 = Engine.GetModelValue(Engine.GetModel(registerVal8, "lbInitialized"))
	if registerVal10 then
		local registerVal15 = string.gsub(registerVal9, "_HC", "")
	end
	if registerVal11 then
		registerVal15 = string.gsub(registerVal15, "_ARENA", "")
	end
	local registerVal16 = Engine.GetModelValue(Engine.GetModel(registerVal5, "groups.leaderboardmaker.lbDefOriginal"))
	if registerVal16 ~= "" and CoD.LeaderboardUtility.leaderboardInfo[registerVal16] then
	end
	arg1.leaderboardMakerStateModel = registerVal6
	if registerVal7 ~= nil then
		if registerVal7 == "ChooseBaseLeaderboard" then
			local function __FUNC_48E86_(arg0)
				if arg0 ~= "prop" and arg0 ~= "sas" and arg0 ~= "sniperonly" and arg0 ~= "infect" then
				end
				return true
			end

			local registerVal21, registerVal22, registerVal23 = pairs(CoD.LeaderboardUtility.leaderboardTab.core.leaderboardList)
			for index24,value25 in registerVal21, registerVal22, registerVal23 do
				local registerVal27 = CoD.IsHiddenDLC(CoD.LeaderboardUtility.leaderboardInfo[value25].dlcBit)
				registerVal27 = __FUNC_48E86_(CoD.LeaderboardUtility.leaderboardInfo[value25].gameType)
				if not registerVal27 and not registerVal27 then
					local registerVal29 = {}
					local registerVal30 = {}
					registerVal30.titleText = "GROUPS_LBMAKER_CHOOSE_BASE_LEADERBOARD_TITLE"
					local registerVal31 = LocalizeToUpperString(CoD.LeaderboardUtility.leaderboardInfo[value25].title)
					registerVal30.displayText = registerVal31
					registerVal31 = Engine.Localize(("GROUPS_LBMAKER_" .. CoD.LeaderboardUtility.leaderboardInfo[value25].gameType .. "_HINT_TEXT"))
					registerVal30.hintText = registerVal31
					registerVal30.action = ProcessChooseBaseLeaderboard
					registerVal30.icon = CoD.LeaderboardUtility.leaderboardInfo[value25].icon
					registerVal30.lbDef = (value25 .. CoD.LeaderboardUtility.leaderboardTab.core.leaderboardSuffix)
					registerVal29.models = registerVal30
					registerVal30 = {}
					if (value25 .. CoD.LeaderboardUtility.leaderboardTab.core.leaderboardSuffix) ~= registerVal15 then
					end
					registerVal30.showSelectedIcon = true
					registerVal29.properties = registerVal30
					table.insert({}, registerVal29)
				end
			end
		else
			if registerVal7 == "ChooseTimeFrame" then
				for index17=1.000000, #CoD.Leaderboard_MP.LeaderboardTimeFrames, 1.000000 do
					local registerVal24 = {}
					local registerVal25 = {}
					registerVal25.titleText = "GROUPS_LBMAKER_CHOOSE_TIME_FRAME_TITLE"
					registerVal25.displayText = CoD.Leaderboard_MP.LeaderboardTimeFrames[index17].stringRef
					registerVal25.action = ProcessChooseTimeFrame
					local registerVal26 = Engine.Localize(CoD.Leaderboard_MP.LeaderboardTimeFrames[index17].lbMakerHint)
					registerVal25.hintText = registerVal26
					registerVal25.icon = CoD.LeaderboardUtility.leaderboardInfo[registerVal16].icon
					registerVal25.baseLeaderboard = ""
					registerVal25.timeFrame = CoD.Leaderboard_MP.LeaderboardTimeFrames[index17].stringRef
					registerVal24.models = registerVal25
					registerVal25 = {}
					if CoD.Leaderboard_MP.LeaderboardTimeFrames[index17].value == registerVal13 then
					else
					end
					registerVal25.showSelectedIcon = true
					registerVal25.value = CoD.Leaderboard_MP.LeaderboardTimeFrames[index17].value
					registerVal24.properties = registerVal25
					table.insert({}, registerVal24)
				end
			else
				if registerVal7 == "ChooseDefaultSort" then
					if CoD.LeaderboardUtility.sortColumns[registerVal16] then
						local registerVal17, registerVal18, registerVal19 = ipairs(CoD.LeaderboardUtility.sortColumns[registerVal16])
						for index20,value21 in registerVal17, registerVal18, registerVal19 do
							if value21.lbSortType == "" then
								if registerVal16 == "LB_MP_GB_SCORE" then
								else
								end
							end
							registerVal25 = {}
							registerVal26 = {}
							registerVal26.titleText = "GROUPS_LBMAKER_CHOOSE_DEFAULT_SORT_TITLE"
							registerVal26.displayText = value21.columnStr
							registerVal26.action = ProcessChooseDefaultSort
							registerVal27 = Engine.Localize("GROUPS_LBMAKER_SPM_HINT_TEXT")
							registerVal26.hintText = registerVal27
							registerVal26.icon = CoD.LeaderboardUtility.leaderboardInfo[registerVal16].icon
							registerVal26.baseLeaderboard = ""
							registerVal25.models = registerVal26
							registerVal26 = {}
							if value21.lbSortType == registerVal12 then
							else
							end
							registerVal26.showSelectedIcon = true
							registerVal26.value = value21.lbSortType
							registerVal25.properties = registerVal26
							table.insert({}, registerVal25)
						end
					else
						if registerVal7 == "ChooseHardcore" then
							registerVal19 = {}
							local registerVal20 = {}
							registerVal20.titleText = "GROUPS_LBMAKER_CHOOSE_HARDCORE"
							registerVal20.displayText = "GROUPS_CORE_CAPS"
							registerVal20.action = ProcessChooseHardcoreAndArena
							registerVal21 = Engine.Localize("GROUPS_CORE_DESC")
							registerVal20.hintText = registerVal21
							registerVal20.icon = CoD.LeaderboardUtility.leaderboardInfo[registerVal16].icon
							registerVal20.baseLeaderboard = ""
							registerVal20.timeFrame = ""
							registerVal19.models = registerVal20
							registerVal20 = {}
							if not registerVal10 then
							else
							end
							registerVal20.showSelectedIcon = true
							registerVal20.disabled = false
							registerVal20.value = ""
							registerVal19.properties = registerVal20
							table.insert({}, registerVal19)
							registerVal18, registerVal19, registerVal20 = ipairs(CoD.LeaderboardUtility.leaderboardListHardcore)
							if "GROUPS_CORE_DESC" == registerVal16 then
							end
							registerVal20 = {}
							registerVal21 = {}
							registerVal21.titleText = "GROUPS_LBMAKER_CHOOSE_HARDCORE"
							registerVal21.displayText = "GROUPS_HARDCORE_CAPS"
							registerVal21.action = ProcessChooseHardcoreAndArena
							registerVal22 = Engine.Localize("GROUPS_HARDCORE_DESC")
							registerVal21.hintText = registerVal22
							registerVal21.icon = CoD.LeaderboardUtility.leaderboardInfo[registerVal16].icon
							registerVal21.baseLeaderboard = ""
							registerVal21.timeFrame = ""
							registerVal20.models = registerVal21
							registerVal21 = {}
							registerVal21.showSelectedIcon = (not (registerVal10 or registerVal11))
							registerVal21.disabled = false
							registerVal21.value = "HC"
							registerVal20.properties = registerVal21
							table.insert({}, registerVal20)
							registerVal19, registerVal20, registerVal21 = ipairs(CoD.LeaderboardUtility.leaderboardListArena)
							for index22,value23 in registerVal19, registerVal20, registerVal21 do
								if value23 == (registerVal16 .. "_ARENA") then
								end
							end
							registerVal21 = {}
							registerVal22 = {}
							registerVal22.titleText = "GROUPS_LBMAKER_CHOOSE_HARDCORE"
							registerVal22.displayText = "MENU_ARENA_CAPS"
							registerVal22.action = ProcessChooseHardcoreAndArena
							registerVal23 = Engine.Localize("MENU_ARENA_OVERVIEW_DESC")
							registerVal22.hintText = registerVal23
							registerVal22.icon = CoD.LeaderboardUtility.leaderboardInfo[registerVal16].icon
							registerVal22.baseLeaderboard = ""
							registerVal22.timeFrame = ""
							registerVal21.models = registerVal22
							registerVal22 = {}
							if not registerVal10 then
							else
							end
							registerVal22.showSelectedIcon = true
							registerVal22.disabled = false
							registerVal22.value = "ARENA"
							registerVal21.properties = registerVal22
							table.insert({}, registerVal21)
						end
					end
				end
			end
		end
	end
	registerVal17, registerVal18, registerVal19 = ipairs({})
	for index20,value21 in registerVal17, registerVal18, registerVal19 do
		registerVal25 = Engine.GetModel(registerVal5, "groups.leaderboardmaker")
		registerVal24 = Engine.CreateModel(registerVal25, ("buttonModel_" .. index20))
		registerVal27 = {}
		registerVal27.model = registerVal24
		registerVal27.properties = value21.properties
		table.insert(arg1.buttons, registerVal27)
		registerVal26 = Engine.CreateModel(registerVal24, "titleText")
		Engine.SetModelValue(registerVal26, Engine.Localize(value21.models.titleText))
		registerVal26 = Engine.CreateModel(registerVal24, "displayText")
		Engine.SetModelValue(registerVal26, Engine.Localize(value21.models.displayText))
		registerVal26 = Engine.CreateModel(registerVal24, "hintText")
		Engine.SetModelValue(registerVal26, value21.models.hintText)
		registerVal26 = Engine.CreateModel(registerVal24, "action")
		Engine.SetModelValue(registerVal26, value21.models.action)
		registerVal26 = Engine.CreateModel(registerVal24, "icon")
		Engine.SetModelValue(registerVal26, value21.models.icon)
		registerVal26 = Engine.CreateModel(registerVal24, "lbDef")
		Engine.SetModelValue(registerVal26, value21.models.lbDef)
		registerVal26 = Engine.CreateModel(registerVal24, "sortColumn")
		Engine.SetModelValue(registerVal26, value21.models.sortColumn)
		registerVal26 = Engine.CreateModel(registerVal24, "timeFrame")
		Engine.SetModelValue(registerVal26, value21.models.timeFrame)
	end
	if not arg1.makerSubscription then
		local function __FUNC_48F1B_()
			arg1:updateDataSource()
		end

		registerVal17 = arg1:subscribeToModel(arg1.leaderboardMakerStateModel, __FUNC_48F1B_, false)
		arg1.makerSubscription = registerVal17
	end
end

registerVal1.prepare = __FUNC_479EA_
local function __FUNC_48F6A_(arg0)
	return #arg0.buttons
end

registerVal1.getCount = __FUNC_48F6A_
local function __FUNC_48FB9_(arg0, arg1)
	return arg0.buttons[arg1].properties
end

registerVal1.getCustomPropertiesForItem = __FUNC_48FB9_
local function __FUNC_49031_(arg0, arg1, arg2)
	return arg1.buttons[arg2].model
end

registerVal1.getItem = __FUNC_49031_
DataSources.LeaderboardMakerButtonList = registerVal1
registerVal1 = {}
local function __FUNC_490A4_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "leaderboard")
	Engine.CreateModel(registerVal1, "controller")
	Engine.CreateModel(registerVal1, "error")
	Engine.CreateModel(registerVal1, "isUpdating")
	Engine.CreateModel(registerVal1, "numResults")
	Engine.CreateModel(registerVal1, "totalResults")
	return registerVal1
end

registerVal1.getModel = __FUNC_490A4_
DataSources.Leaderboard = registerVal1
registerVal1 = {}
local function __FUNC_4923F_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	local registerVal2 = Engine.GetGlobalModel()
	registerVal1 = Engine.CreateModel(registerVal2, "leaderboard")
	registerVal2 = Engine.CreateModel(registerVal1, "header")
	local registerVal10 = Engine.GetLeaderboardHeaders(registerVal1)
	if registerVal10 == nil then
		local registerVal12 = Engine.CreateModel(registerVal2, "baseLeaderboard")
		Engine.SetModelValue(registerVal12, "")
		registerVal12 = Engine.CreateModel(registerVal2, "timeFrame")
		Engine.SetModelValue(registerVal12, "")
		registerVal12 = Engine.CreateModel(registerVal2, "position")
		Engine.SetModelValue(registerVal12, "")
		registerVal12 = Engine.CreateModel(registerVal2, "rank")
		Engine.SetModelValue(registerVal12, "")
		registerVal12 = Engine.CreateModel(registerVal2, "name")
		Engine.SetModelValue(registerVal12, "")
		registerVal12 = Engine.CreateModel(registerVal2, "column0")
		Engine.SetModelValue(registerVal12, "")
		registerVal12 = Engine.CreateModel(registerVal2, "column1")
		Engine.SetModelValue(registerVal12, "")
		registerVal12 = Engine.CreateModel(registerVal2, "column2")
		Engine.SetModelValue(registerVal12, "")
		registerVal12 = Engine.CreateModel(registerVal2, "column3")
		Engine.SetModelValue(registerVal12, "")
		registerVal12 = Engine.CreateModel(registerVal2, "column4")
		Engine.SetModelValue(registerVal12, "")
		registerVal12 = Engine.CreateModel(registerVal2, "numDataColumns")
		Engine.SetModelValue(registerVal12, 0.000000)
		return registerVal2
	end
	registerVal12 = tonumber(registerVal10.lbheaders.count)
	if 3.000000 < registerVal12 then
	else
	end
	for index13=1.000000, (3.000000 - 1.000000), 1.000000 do
		{}[index13] = registerVal10.lbheaders[1.000000]
	end
	for index13=1.000000, 5.000000, 1.000000 do
		if index13 <= (5.000000 - 0.000000) then
			{}[(index13 + (3.000000 - 1.000000))] = ""
		else
			{}[(index13 + (3.000000 - 1.000000))] = registerVal10.lbheaders[(1.000000 + 1.000000)]
		end
	end
	local registerVal16 = Engine.CreateModel(registerVal2, "baseLeaderboard")
	Engine.SetModelValue(registerVal16, "")
	registerVal16 = Engine.CreateModel(registerVal2, "timeFrame")
	Engine.SetModelValue(registerVal16, "")
	registerVal16 = Engine.CreateModel(registerVal2, "position")
	Engine.SetModelValue(registerVal16, {}[1.000000])
	registerVal16 = Engine.CreateModel(registerVal2, "rank")
	Engine.SetModelValue(registerVal16, Engine.Localize("MENU_LB_LEVEL"))
	registerVal16 = Engine.CreateModel(registerVal2, "name")
	Engine.SetModelValue(registerVal16, {}[2.000000])
	registerVal16 = Engine.CreateModel(registerVal2, "column0")
	Engine.SetModelValue(registerVal16, {}[3.000000])
	registerVal16 = Engine.CreateModel(registerVal2, "column1")
	Engine.SetModelValue(registerVal16, {}[4.000000])
	registerVal16 = Engine.CreateModel(registerVal2, "column2")
	Engine.SetModelValue(registerVal16, {}[5.000000])
	registerVal16 = Engine.CreateModel(registerVal2, "column3")
	Engine.SetModelValue(registerVal16, {}[6.000000])
	registerVal16 = Engine.CreateModel(registerVal2, "column4")
	Engine.SetModelValue(registerVal16, {}[7.000000])
	registerVal16 = Engine.CreateModel(registerVal2, "numDataColumns")
	Engine.SetModelValue(registerVal16, 0.000000)
	return registerVal2
end

registerVal1.getModel = __FUNC_4923F_
DataSources.LeaderboardHeader = registerVal1
registerVal1 = {}
local function __FUNC_49A95_(arg0, arg1, arg2)
	arg1.buttons = {}
	local registerVal4 = IsCustomLeaderboard(arg0)
	local registerVal5 = CoD.GetCombatRecordMode()
	CoD.perController[arg0].leaderboardTopOrBottom = nil
	local registerVal8 = Engine.GetGlobalModel()
	local registerVal7 = Engine.CreateModel(registerVal8, "leaderboard")
	registerVal8 = Engine.CreateModel(registerVal7, "rows")
	arg1.rootModel = registerVal8
	local registerVal9 = string.format("%d %d %d", (CoD.BOIIOrange.r * 255.000000), (CoD.BOIIOrange.g * 255.000000), (CoD.BOIIOrange.b * 255.000000))
	local registerVal10 = string.format("%d %d %d", (CoD.white.r * 255.000000), (CoD.white.g * 255.000000), (CoD.white.b * 255.000000))
	local registerVal11 = string.format("%d %d %d", (CoD.playerYellow.r * 255.000000), (CoD.playerYellow.g * 255.000000), (CoD.playerYellow.b * 255.000000))
	local registerVal12 = Engine.GetXUID64(arg0)
	local registerVal13 = Engine.GetLeaderboardData(arg0, registerVal5)
	local registerVal14 = Engine.GetLeaderboardHeaders(arg0)
	for index18=1.000000, #, 1.000000 do
		if registerVal12 == registerVal13[index18].xuid then
		end
		local registerVal31 = {}
		registerVal31.position = 0.000000
		registerVal31.positionUI = 0.000000
		registerVal31.gamertag = ""
		registerVal31.rank = 0.000000
		registerVal31.rankIcon = ""
		registerVal31.rankString = ""
		registerVal31.plevel = 0.000000
		registerVal31.paragonRank = 0.000000
		registerVal31.paragonIconId = CoD.PrestigeUtility.INVALID_PARAGON_ICON_ID
		registerVal31.colData = {}
		registerVal31.colColor = {}
		registerVal31.statData = {}
		registerVal31.statColor = {}
		registerVal31.statLabel = {}
		for index32=#{}, 1.000000, -1.000000 do
			if registerVal13[index18][index32].rankCol then
				registerVal31.position = registerVal13[index18][index32].col
				registerVal31.positionUI = registerVal31.position
			else
				if registerVal13[index18][index32].gamertagCol then
					registerVal31.gamertag = registerVal13[index18][index32].col
				else
					if registerVal13[index18][index32].type == LuaEnums.LBCOL_TYPE.LBCOL_TYPE_PRESTIGE then
						local registerVal36 = tonumber(registerVal13[index18][index32].col)
						local registerVal37, registerVal38, registerVal39 = LuaUtils.ConvertFromPrestigeMerged(registerVal36)
						registerVal31.paragonIconId = registerVal39
						registerVal31.paragonRank = registerVal38
						registerVal31.plevel = registerVal37
					else
						registerVal36 = IsFreerunLeaderboard(arg0)
						if registerVal13[index18][index32].type == LuaEnums.LBCOL_TYPE.LBCOL_TYPE_LEVELXP and not registerVal36 then
							registerVal36 = tonumber(registerVal13[index18][index32].col)
							registerVal31.rank = registerVal36
						else
							registerVal36 = IsFreerunLeaderboard(arg0)
							if index32 == 3.000000 and registerVal36 then
								registerVal37 = NumberAsTime(registerVal13[index18][index32].col)
								registerVal13[index18][index32].col = registerVal37
							end
							table.insert(registerVal31.colData, registerVal13[index18][index32].col)
							table.insert(registerVal31.colColor, registerVal11)
						end
					end
				end
			end
		end
		local registerVal32 = CoD.GetRankName((registerVal31.rank - 1.000000), registerVal31.plevel, registerVal5)
		registerVal31.rankString = registerVal32
		registerVal32 = CoD.GetRankOrParagonIcon((registerVal31.rank - 1.000000), registerVal31.plevel, registerVal31.paragonIconId, registerVal5)
		registerVal31.rankIcon = registerVal32
		registerVal32 = IsGameModeParagonCapable(registerVal5)
		local registerVal33 = Engine.GetPrestigeCap(registerVal5)
		if registerVal32 and registerVal31.plevel == registerVal33 then
			registerVal32 = tonumber(Engine.GetParagonRankDisplayLevel(registerVal31.paragonRank, registerVal5))
			registerVal31.rank = registerVal32
			registerVal32 = string.format("%d %d %d", (ColorSet.ParagonRank.r * 255.000000), (ColorSet.ParagonRank.g * 255.000000), (ColorSet.ParagonRank.b * 255.000000))
		end
		registerVal31.colColor[#registerVal31.colData] = registerVal9
		for index34=0.000000, (3.000000 - 1.000000), 1.000000 do
			if registerVal14.lbcolumnids[(index34 + 3.000000)] == 65534.000000 then
				if registerVal14.lbcolumnnames[(index34 + 3.000000)] == "Score Per Minute" or registerVal14.lbcolumnnames[(index34 + 3.000000)] == "Points Per Game" then
					if registerVal31.colData[(#registerVal31.colData - index34)] == "-1" then
						registerVal31.positionUI = "-"
						registerVal31.colData[(#registerVal31.colData - index34)] = "-"
					end
				end
			end
			table.insert(registerVal31.statData, registerVal31.colData[(#registerVal31.colData - index34)])
			table.insert(registerVal31.statColor, registerVal31.colColor[(#registerVal31.colData - index34)])
			table.insert(registerVal31.statLabel, registerVal14.lbheaders[(index34 + 3.000000)])
		end
		for index34=1.000000, (5.000000 - #registerVal31.colData), 1.000000 do
			table.insert(registerVal31.colData, "")
			table.insert(registerVal31.colColor, registerVal11)
		end
		if CoD.perController[arg0].pivotPosition then
			local registerVal35 = tonumber(registerVal31.position)
			if registerVal35 ~= CoD.perController[arg0].pivotPosition then
			end
		else
			if registerVal12 ~= registerVal13[index18].xuid then
			end
		end
		if CoD.perController[arg0].leaderboardPlayerFilter == Enum.LbFilter.LB_FILTER_NONE or CoD.perController[arg0].leaderboardPlayerFilter == Enum.LbFilter.LB_FILTER_GROUP_MEMBERS then
			registerVal36 = tonumber(registerVal31.position)
		end
		if registerVal4 == true then
		end
		registerVal39 = {}
		local registerVal40 = {}
		registerVal40.position = registerVal31.position
		registerVal40.positionUI = index18
		registerVal40.name = registerVal31.gamertag
		registerVal40.rank = registerVal31.rank
		registerVal40.rankColor = registerVal32
		registerVal40.rankIcon = registerVal31.rankIcon
		registerVal40.rankString = registerVal31.rankString
		registerVal40.plevel = registerVal31.plevel
		registerVal40.column0 = registerVal31.colData[5.000000]
		registerVal40.column0color = registerVal31.colColor[5.000000]
		registerVal40.column1 = registerVal31.colData[4.000000]
		registerVal40.column1color = registerVal31.colColor[4.000000]
		registerVal40.column2 = registerVal31.colData[3.000000]
		registerVal40.column2color = registerVal31.colColor[3.000000]
		registerVal40.column3 = registerVal31.colData[2.000000]
		registerVal40.column3color = registerVal31.colColor[2.000000]
		registerVal40.column4 = registerVal31.colData[1.000000]
		registerVal40.column4color = registerVal31.colColor[1.000000]
		registerVal40.stat0 = registerVal31.statData[1.000000]
		registerVal40.stat0color = registerVal31.statColor[1.000000]
		registerVal40.stat0label = registerVal31.statLabel[1.000000]
		registerVal40.stat1 = registerVal31.statData[2.000000]
		registerVal40.stat1color = registerVal31.statColor[2.000000]
		registerVal40.stat1label = registerVal31.statLabel[2.000000]
		registerVal40.stat2 = registerVal31.statData[3.000000]
		registerVal40.stat2color = registerVal31.statColor[3.000000]
		registerVal40.stat2label = registerVal31.statLabel[3.000000]
		registerVal40.rowColor = registerVal11
		registerVal40.xuid = registerVal13[index18].xuid
		registerVal40.backgroundId = 0.000000
		registerVal40.counterPosition = registerVal36
		registerVal39.model = registerVal40
		registerVal40 = {}
		registerVal40.selectIndex = true
		registerVal39.properties = registerVal40
		table.insert({}, registerVal39)
	end
	local registerVal18, registerVal19, registerVal20 = ipairs({})
	for index21,value22 in registerVal18, registerVal19, registerVal20 do
		local registerVal25 = Engine.CreateModel(registerVal8, ("buttonModel_" .. index21))
		local registerVal28 = {}
		registerVal28.model = registerVal25
		registerVal28.properties = value22.properties
		table.insert(arg1.buttons, registerVal28)
		local registerVal27 = Engine.CreateModel(registerVal25, "position")
		Engine.SetModelValue(registerVal27, value22.model.position)
		registerVal27 = Engine.CreateModel(registerVal25, "positionUI")
		Engine.SetModelValue(registerVal27, value22.model.positionUI)
		registerVal27 = Engine.CreateModel(registerVal25, "rankIcon")
		Engine.SetModelValue(registerVal27, value22.model.rankIcon)
		registerVal27 = Engine.CreateModel(registerVal25, "rank")
		Engine.SetModelValue(registerVal27, value22.model.rank)
		registerVal27 = Engine.CreateModel(registerVal25, "rankColor")
		Engine.SetModelValue(registerVal27, value22.model.rankColor)
		registerVal27 = Engine.CreateModel(registerVal25, "rankString")
		Engine.SetModelValue(registerVal27, value22.model.rankString)
		registerVal27 = Engine.CreateModel(registerVal25, "plevel")
		Engine.SetModelValue(registerVal27, value22.model.plevel)
		registerVal27 = Engine.CreateModel(registerVal25, "name")
		Engine.SetModelValue(registerVal27, value22.model.name)
		registerVal27 = Engine.CreateModel(registerVal25, "column0")
		Engine.SetModelValue(registerVal27, tostring(value22.model.column0))
		registerVal27 = Engine.CreateModel(registerVal25, "column1")
		Engine.SetModelValue(registerVal27, tostring(value22.model.column1))
		registerVal27 = Engine.CreateModel(registerVal25, "column2")
		Engine.SetModelValue(registerVal27, tostring(value22.model.column2))
		registerVal27 = Engine.CreateModel(registerVal25, "column3")
		Engine.SetModelValue(registerVal27, tostring(value22.model.column3))
		registerVal27 = Engine.CreateModel(registerVal25, "column4")
		Engine.SetModelValue(registerVal27, tostring(value22.model.column4))
		registerVal27 = Engine.CreateModel(registerVal25, "column0color")
		Engine.SetModelValue(registerVal27, value22.model.column0color)
		registerVal27 = Engine.CreateModel(registerVal25, "column1color")
		Engine.SetModelValue(registerVal27, value22.model.column1color)
		registerVal27 = Engine.CreateModel(registerVal25, "column2color")
		Engine.SetModelValue(registerVal27, value22.model.column2color)
		registerVal27 = Engine.CreateModel(registerVal25, "column3color")
		Engine.SetModelValue(registerVal27, value22.model.column3color)
		registerVal27 = Engine.CreateModel(registerVal25, "column4color")
		Engine.SetModelValue(registerVal27, value22.model.column4color)
		registerVal27 = Engine.CreateModel(registerVal25, "stat0")
		Engine.SetModelValue(registerVal27, value22.model.stat0)
		registerVal27 = Engine.CreateModel(registerVal25, "stat1")
		Engine.SetModelValue(registerVal27, value22.model.stat1)
		registerVal27 = Engine.CreateModel(registerVal25, "stat2")
		Engine.SetModelValue(registerVal27, value22.model.stat2)
		registerVal27 = Engine.CreateModel(registerVal25, "stat0color")
		Engine.SetModelValue(registerVal27, value22.model.stat0color)
		registerVal27 = Engine.CreateModel(registerVal25, "stat1color")
		Engine.SetModelValue(registerVal27, value22.model.stat1color)
		registerVal27 = Engine.CreateModel(registerVal25, "stat2color")
		Engine.SetModelValue(registerVal27, value22.model.stat2color)
		registerVal27 = Engine.CreateModel(registerVal25, "stat0label")
		Engine.SetModelValue(registerVal27, value22.model.stat0label)
		registerVal27 = Engine.CreateModel(registerVal25, "stat1label")
		Engine.SetModelValue(registerVal27, value22.model.stat1label)
		registerVal27 = Engine.CreateModel(registerVal25, "stat2label")
		Engine.SetModelValue(registerVal27, value22.model.stat2label)
		registerVal27 = Engine.CreateModel(registerVal25, "rowColor")
		Engine.SetModelValue(registerVal27, value22.model.rowColor)
		registerVal27 = Engine.CreateModel(registerVal25, "xuid")
		Engine.SetModelValue(registerVal27, value22.model.xuid)
		registerVal27 = Engine.CreateModel(registerVal25, "backgroundId")
		Engine.SetModelValue(registerVal27, value22.model.backgroundId)
		registerVal27 = Engine.CreateModel(registerVal25, "counterPosition")
		Engine.SetModelValue(registerVal27, value22.model.counterPosition)
	end
	registerVal18 = Engine.CreateModel(registerVal7, "isUpdating")
	arg1.leaderboardIsUpdatingModel = registerVal18
	if arg1.leaderboardIsUpdatingSubscription then
		arg1:removeSubscription(arg1.leaderboardIsUpdatingSubscription)
	end
	local function __FUNC_4B927_(arg0)
		arg1:updateDataSource()
	end

	registerVal18 = arg1:subscribeToModel(arg1.leaderboardIsUpdatingModel, __FUNC_4B927_, false)
	arg1.leaderboardIsUpdatingSubscription = registerVal18
end

registerVal1.prepare = __FUNC_49A95_
local function __FUNC_4B976_(arg0)
	return #arg0.buttons
end

registerVal1.getCount = __FUNC_4B976_
local function __FUNC_4B9C5_(arg0, arg1)
	return arg0.buttons[arg1].properties
end

registerVal1.getCustomPropertiesForItem = __FUNC_4B9C5_
local function __FUNC_4BA3D_(arg0, arg1, arg2)
	return arg1.buttons[arg2].model
end

registerVal1.getItem = __FUNC_4BA3D_
local function __FUNC_4BAB0_(arg0)
	if arg0.rootModel then
		Engine.UnsubscribeAndFreeModel(arg0.rootModel)
		arg0.rootModel = nil
	end
end

registerVal1.cleanup = __FUNC_4BAB0_
DataSources.LeaderboardRows = registerVal1
local function __FUNC_4BB59_(arg0)
	local registerVal3 = Engine.GetGlobalModel()
	local registerVal2 = Engine.GetModel(registerVal3, "combatRecordMode")
	if not registerVal2 then
		return {}
	end
	registerVal3 = Engine.GetModelValue(registerVal2)
	if registerVal3 ~= "doa" then
		local registerVal6 = {}
		local registerVal7 = {}
		registerVal7.tabIcon = CoD.buttonStrings.shoulderl
		registerVal6.models = registerVal7
		registerVal7 = {}
		registerVal7.m_mouseDisabled = true
		registerVal6.properties = registerVal7
		table.insert({}, registerVal6)
	end
	if registerVal3 == "cp" then
		registerVal6 = {}
		registerVal7 = {}
		registerVal7.tabName = "MENU_LB_TAB_TRAINING_SIM_CAPS"
		registerVal7.tabIcon = ""
		registerVal7.tabCategory = "trainingSim"
		registerVal6.models = registerVal7
		registerVal7 = {}
		registerVal7.tabId = "leaderboard_cp_trainingSim"
		registerVal6.properties = registerVal7
		table.insert({}, registerVal6)
	else
		if registerVal3 == "mp" then
			registerVal6 = {}
			registerVal7 = {}
			registerVal7.tabName = "MENU_LB_TAB_CORE_CAPS"
			registerVal7.tabIcon = ""
			registerVal7.tabCategory = "core"
			registerVal6.models = registerVal7
			registerVal7 = {}
			registerVal7.tabId = "leaderboard_mp_core"
			registerVal6.properties = registerVal7
			table.insert({}, registerVal6)
			registerVal6 = {}
			registerVal7 = {}
			registerVal7.tabName = "MENU_LB_TAB_HARDCORE_CAPS"
			registerVal7.tabIcon = ""
			registerVal7.tabCategory = "hardcore"
			registerVal6.models = registerVal7
			registerVal7 = {}
			registerVal7.tabId = "leaderboard_mp_hardcore"
			registerVal6.properties = registerVal7
			table.insert({}, registerVal6)
			registerVal6 = {}
			registerVal7 = {}
			registerVal7.tabName = "MENU_LB_TAB_ARENA_CAPS"
			registerVal7.tabIcon = ""
			registerVal7.tabCategory = "arena"
			registerVal6.models = registerVal7
			registerVal7 = {}
			registerVal7.tabId = "leaderboard_mp_arena"
			registerVal6.properties = registerVal7
			table.insert({}, registerVal6)
			registerVal6 = {}
			registerVal7 = {}
			registerVal7.tabName = "MENU_LB_TAB_FREERUN_CAPS"
			registerVal7.tabIcon = ""
			registerVal7.tabCategory = "freerun"
			registerVal6.models = registerVal7
			registerVal7 = {}
			registerVal7.tabId = "leaderboard_mp_freerun"
			registerVal6.properties = registerVal7
			table.insert({}, registerVal6)
			registerVal6 = {}
			registerVal7 = {}
			registerVal7.tabName = "MENU_LB_TAB_CUSTOM_CAPS"
			registerVal7.tabIcon = ""
			registerVal7.tabCategory = "custom"
			registerVal6.models = registerVal7
			registerVal7 = {}
			registerVal7.tabId = "leaderboard_mp_custom"
			registerVal6.properties = registerVal7
			table.insert({}, registerVal6)
		else
			if registerVal3 == "zm" then
				registerVal6 = {}
				registerVal7 = {}
				registerVal7.tabName = "MENU_LB_TAB_ZMGLOBAL_CAPS"
				registerVal7.tabIcon = ""
				registerVal7.tabCategory = "zm_global"
				registerVal6.models = registerVal7
				registerVal7 = {}
				registerVal7.tabId = "leaderboard_zm_global"
				registerVal6.properties = registerVal7
				table.insert({}, registerVal6)
				registerVal6 = {}
				registerVal7 = {}
				registerVal7.tabName = "MENU_LB_TAB_ZMMAPS_CAPS"
				registerVal7.tabIcon = ""
				registerVal7.tabCategory = "zm_maps"
				registerVal6.models = registerVal7
				registerVal7 = {}
				registerVal7.tabId = "leaderboard_zm_maps"
				registerVal6.properties = registerVal7
				table.insert({}, registerVal6)
			else
				if registerVal3 == "doa" then
					registerVal6 = {}
					registerVal7 = {}
					registerVal7.tabName = "MENU_DOA2_TITLE"
					registerVal7.tabIcon = ""
					registerVal7.tabCategory = "doa"
					registerVal6.models = registerVal7
					registerVal7 = {}
					registerVal7.tabId = "leaderboard_doa"
					registerVal6.properties = registerVal7
					table.insert({}, registerVal6)
				end
			end
		end
	end
	if registerVal3 ~= "doa" then
		registerVal6 = {}
		registerVal7 = {}
		registerVal7.tabIcon = CoD.buttonStrings.shoulderr
		registerVal6.models = registerVal7
		registerVal7 = {}
		registerVal7.m_mouseDisabled = true
		registerVal6.properties = registerVal7
		table.insert({}, registerVal6)
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("LeaderboardTabType", __FUNC_4BB59_)
DataSources.LeaderboardTabType = registerVal1
registerVal1 = {}
local function __FUNC_4C32E_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "leaderboardMenuTitle")
	registerVal2 = Engine.CreateModel(registerVal1, "title")
	local registerVal3 = IsLobbyLeaderboard(arg0)
	if registerVal3 then
		local registerVal5 = Engine.GetGlobalModel()
		registerVal3 = Engine.GetModelValue(Engine.GetModel(registerVal5, "leaderboardDef"))
		Engine.SetModelValue(registerVal2, Engine.Localize(CoD.LeaderboardUtility.leaderboardInfo[registerVal3].title))
		return registerVal1
	end
	local registerVal4 = Engine.GetGlobalModel()
	registerVal3 = Engine.GetModel(registerVal4, "leaderboardCategoryName")
	if not registerVal3 then
		return registerVal1
	end
	registerVal4 = Engine.GetModelValue(registerVal3)
	if not registerVal4 then
		return registerVal1
	end
	Engine.SetModelValue(registerVal2, Engine.Localize("MENU_LEADERBOARD_MENU_HEADER_CAPS", Engine.Localize(CoD.LeaderboardUtility.leaderboardTab[registerVal4].leaderboardHeaderText)))
	return registerVal1
end

registerVal1.getModel = __FUNC_4C32E_
DataSources.LeaderboardMenuTitle = registerVal1
registerVal1 = {}
local function __FUNC_4C710_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	registerVal1 = Engine.GetModelForController(registerVal1)
	return Engine.CreateModel(registerVal1, "teamOperationSystem")
end

registerVal1.getModel = __FUNC_4C710_
DataSources.TeamOperationSystem = registerVal1
registerVal1 = {}
local function __FUNC_4C813_(arg0, arg1, arg2)
end

registerVal1.prepare = __FUNC_4C813_
local function __FUNC_4C83C_(arg0)
	return #DataSources.RaidsPurchases.Items
end

registerVal1.getCount = __FUNC_4C83C_
local function __FUNC_4C8C8_(arg0, arg1, arg2)
	return DataSources.RaidsPurchases.Items[arg2]
end

registerVal1.getItem = __FUNC_4C8C8_
DataSources.RaidsPurchases = registerVal1
registerVal1 = {}
local function __FUNC_4C95C_(arg0)
	return 10.000000
end

registerVal1.getCount = __FUNC_4C95C_
local function __FUNC_4C995_(arg0, arg1, arg2)
	local registerVal3 = {}
	registerVal3.name = "Caezar"
	registerVal3.status = "Online"
	registerVal3.rank = "14"
	registerVal3.emblem = "menu_div_gold"
	registerVal3.rankIcon = "rank_com"
	if (arg2 % 2.000000) == 0.000000 then
		registerVal3.name = ("Bat35" .. arg2)
		registerVal3.emblem = "menu_div_bronze"
	end
	if (arg2 % 3.000000) == 0.000000 then
		registerVal3.name = ("FakeForAll" .. arg2)
		registerVal3.emblem = "menu_div_silver"
		registerVal3.rankIcon = "rank_cpt"
		registerVal3.rank = 19.000000
	end
	if (arg2 % 5.000000) == 0.000000 then
		registerVal3.name = ("SuperGoat" .. arg2)
		registerVal3.emblem = "menu_div_bronze"
		registerVal3.rankIcon = "rank_sgt"
		registerVal3.rank = 34.000000
	end
	if (arg2 % 7.000000) == 0.000000 then
		registerVal3.name = ("SuperGoat" .. arg2)
		registerVal3.emblem = "menu_div_platinum"
		registerVal3.rankIcon = "rank_prestige02"
		registerVal3.rank = 50.000000
	end
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal5 = Engine.CreateModel(registerVal4, ("Friendz." .. arg2))
	local registerVal6, registerVal7, registerVal8 = pairs(registerVal3)
	for index9,value10 in registerVal6, registerVal7, registerVal8 do
		local registerVal11 = Engine.CreateModel(registerVal5, index9)
		Engine.SetModelValue(registerVal11, value10)
	end
	return registerVal5
end

registerVal1.getItem = __FUNC_4C995_
DataSources.Friends = registerVal1
local function __FUNC_4CD07_(arg0)
	local registerVal1 = {}
	local registerVal2 = {}
	local registerVal3 = {}
	registerVal3.tabIcon = CoD.buttonStrings.shoulderl
	registerVal2.models = registerVal3
	registerVal3 = {}
	registerVal3.m_mouseDisabled = true
	registerVal2.properties = registerVal3
	registerVal3 = {}
	local registerVal4 = {}
	local registerVal5 = Engine.Localize("MENU_FRIENDS_CAPS")
	registerVal4.tabName = registerVal5
	registerVal4.tabWidget = "CoD.Friends_FriendsTab"
	registerVal3.models = registerVal4
	registerVal4 = {}
	registerVal4.tabId = "friends"
	registerVal3.properties = registerVal4
	registerVal4 = {}
	registerVal5 = {}
	local registerVal6 = Engine.Localize("MENU_TAB_PLAYERS_CAPS")
	registerVal5.tabName = registerVal6
	registerVal5.tabWidget = "CoD.Friends_RecentPlayersTab"
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "recent"
	registerVal4.properties = registerVal5
	registerVal5 = {}
	registerVal6 = {}
	local registerVal7 = Engine.Localize("GROUPS_CAPS")
	registerVal6.tabName = registerVal7
	registerVal6.tabWidget = "CoD.Friends_GroupsTab"
	registerVal5.models = registerVal6
	registerVal6 = {}
	registerVal6.tabId = "grpmembers"
	registerVal5.properties = registerVal6
	registerVal6 = {}
	registerVal7 = {}
	local registerVal8 = Engine.Localize("MENU_INBOX_CAPS")
	registerVal7.tabName = registerVal8
	registerVal7.tabWidget = "CoD.Friends_InboxTab"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "inbox"
	registerVal6.properties = registerVal7
	registerVal7 = {}
	registerVal8 = {}
	registerVal8.tabIcon = CoD.buttonStrings.shoulderr
	registerVal7.models = registerVal8
	registerVal8 = {}
	registerVal8.m_mouseDisabled = true
	registerVal7.properties = registerVal8
	registerVal1 = {registerVal2, registerVal3, registerVal4, registerVal5, registerVal6, registerVal7}
	registerVal2 = Dvar.ui_execdemo:get()
	if not registerVal1 or CoD.isPC then
		registerVal2 = {}
		registerVal3 = {}
		registerVal4 = {}
		registerVal4.tabIcon = "^BBUTTON_LUI_SHOULDERL^"
		registerVal3.models = registerVal4
		registerVal4 = {}
		registerVal4.m_mouseDisabled = true
		registerVal3.properties = registerVal4
		registerVal4 = {}
		registerVal5 = {}
		registerVal6 = Engine.Localize("MENU_FRIENDS_CAPS")
		registerVal5.tabName = registerVal6
		registerVal5.tabWidget = "CoD.Friends_FriendsTab"
		registerVal4.models = registerVal5
		registerVal5 = {}
		registerVal5.tabId = "friends"
		registerVal4.properties = registerVal5
		registerVal5 = {}
		registerVal6 = {}
		registerVal7 = Engine.Localize("MENU_TAB_PLAYERS_CAPS")
		registerVal6.tabName = registerVal7
		registerVal6.tabWidget = "CoD.Friends_RecentPlayersTab"
		registerVal5.models = registerVal6
		registerVal6 = {}
		registerVal6.tabId = "recent"
		registerVal5.properties = registerVal6
		registerVal6 = {}
		registerVal7 = {}
		registerVal7.tabIcon = "^BBUTTON_LUI_SHOULDERR^"
		registerVal6.models = registerVal7
		registerVal7 = {}
		registerVal7.m_mouseDisabled = true
		registerVal6.properties = registerVal7
		registerVal2 = {registerVal3, registerVal4, registerVal5, registerVal6}
	end
	return registerVal2
end

registerVal1 = ListHelper_SetupDataSource("FriendsMainTabModel", __FUNC_4CD07_)
DataSources.FriendsMainTabList = registerVal1
registerVal1 = {}
local function __FUNC_4D216_(arg0, arg1, arg2)
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.GetModel(registerVal3, "friends")
	local registerVal5 = Engine.GetModel(registerVal4, "tab")
	local registerVal6 = Engine.GetModelValue(registerVal5)
	if friends == registerVal6 then
	else
		if recent == registerVal6 then
		else
			if inbox == registerVal6 then
			else
				if roster == registerVal6 then
				else
					if grpmembers == registerVal6 then
					else
					end
				end
			end
		end
	end
	local registerVal9 = Engine.GetGlobalModel()
	local registerVal8 = Engine.GetModel(registerVal9, "unifiedListRoot")
	arg1.unifiedFriendModel = registerVal8
	registerVal8 = Engine.GetModel(arg1.unifiedFriendModel, "count")
	arg1.unifiedFriendCount = registerVal8
	arg1:unsubscribeFromAllModels()
	local function __FUNC_4D572_(arg0)
		arg1:updateDataSource()
	end

	registerVal8 = arg1:subscribeToModel(arg1.unifiedFriendCount, __FUNC_4D572_, false)
	arg1.countSubscription = registerVal8
end

registerVal1.prepare = __FUNC_4D216_
local function __FUNC_4D5C2_(arg0)
	local registerVal1 = Engine.GetModelValue(arg0.unifiedFriendCount)
	return registerVal1
end

registerVal1.getCount = __FUNC_4D5C2_
local function __FUNC_4D653_(arg0, arg1, arg2)
	return Engine.GetModel(arg1.unifiedFriendModel, ("member" .. (arg2 - 1.000000)))
end

registerVal1.getItem = __FUNC_4D653_
DataSources.LobbyFriends = registerVal1
registerVal1 = {}
local function __FUNC_4D6FF_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	registerVal1 = Engine.GetModelForController(registerVal1)
	local registerVal2 = Engine.CreateModel(registerVal1, "gameScore")
	local registerVal3 = Engine.IsInGame()
	registerVal3 = Engine.GetScoreboardData(registerVal1)
	local registerVal5 = Engine.CreateModel(registerVal2, "alliesScore")
	Engine.SetModelValue(registerVal5, registerVal3.scores.TEAM_ALLIES)
	registerVal5 = Engine.CreateModel(registerVal2, "axisScore")
	Engine.SetModelValue(registerVal5, registerVal3.scores.TEAM_AXIS)
	local registerVal4 = IsTeamBasedOrInfect(registerVal1)
	if not registerVal3 and not registerVal4 then
		registerVal5 = Engine.CreateModel(registerVal2, "firstPlaceXUID")
		Engine.SetModelValue(registerVal5, registerVal3.topScore.topScoreXUID)
		registerVal5 = Engine.CreateModel(registerVal2, "highestScore")
		Engine.SetModelValue(registerVal5, registerVal3.topScore.highestScore)
		registerVal5 = Engine.CreateModel(registerVal2, "highestScoreName")
		Engine.SetModelValue(registerVal5, registerVal3.topScore.highestScoreName)
	end
	return registerVal2
end

registerVal1.getModel = __FUNC_4D6FF_
DataSources.GameScore = registerVal1
registerVal1 = {}
local function __FUNC_4DAD6_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	registerVal1 = Engine.GetModelForController(registerVal1)
	return Engine.CreateModel(registerVal1, "Equipment")
end

registerVal1.getModel = __FUNC_4DAD6_
DataSources.Equipment = registerVal1
registerVal1 = {}
local function __FUNC_4DBCD_(arg0, arg1, arg2)
	local registerVal5 = Engine.GetPrimaryController()
	local registerVal3 = arg1:getModel(registerVal5, "cscDebugMenu")
	arg1.cscDebugMenuModel = registerVal3
	registerVal3 = Engine.GetModel(arg1.cscDebugMenuModel, "cscDebugMenuCount")
	arg1.cscDebugMenuCountModel = registerVal3
	arg1:unsubscribeFromAllModels()
	local function __FUNC_4DD66_()
		arg1:updateDataSource()
	end

	arg1:subscribeToModel(arg1.cscDebugMenuCountModel, __FUNC_4DD66_, false)
end

registerVal1.prepare = __FUNC_4DBCD_
local function __FUNC_4DDB6_(arg0)
	return Engine.GetModelValue(arg0.cscDebugMenuCountModel)
end

registerVal1.getCount = __FUNC_4DDB6_
local function __FUNC_4DE4B_(arg0, arg1, arg2)
	return Engine.GetModel(arg1.cscDebugMenuModel, ("listItem" .. (arg2 - 1.000000)))
end

registerVal1.getItem = __FUNC_4DE4B_
DataSources.ClientscriptDebugMenu = registerVal1
registerVal1 = {}
local function __FUNC_4DEF8_(arg0)
	DataSources.CPMapsList.prepare(arg0, {})
	local registerVal3 = Engine.IsCampaignModeZombies()
	if registerVal3 then
	end
	local function __FUNC_4E3F1_(arg0, arg1)
		if CoD.mapsTable[arg0].unique_id >= CoD.mapsTable[arg1].unique_id then
		end
		return true
	end

	local registerVal4, registerVal5, registerVal6 = LUI.IterateTableBySortedKeys(CoD.mapsTable, __FUNC_4E3F1_, nil)
	for index7,value8 in registerVal4, registerVal5, registerVal6 do
		if value8.session_mode == Enum.eModes.MODE_CAMPAIGN and value8.campaign_mode == Enum.CampaignMode.CAMPAIGNMODE_ZOMBIES and value8.dlc_pack ~= -1.000000 and value8.isSubLevel == false then
		end
	end
	registerVal6 = Engine.GetGlobalModel()
	registerVal4 = Engine.GetModelValue(Engine.GetModel(registerVal6, "MapVote.mapVoteMapNext"))
	registerVal5 = Engine.IsCampaignModeZombies()
	registerVal5 = string.find(registerVal4, "_nightmares")
	if registerVal5 and registerVal5 == nil then
	end
	for index5=1.000000, (0.000000 + 1.000000), 1.000000 do
		local registerVal10 = Engine.GetModelForController(arg0)
		local registerVal9 = Engine.GetModel(registerVal10, ("CPMapsList." .. index5))
		registerVal10 = Engine.GetModel(registerVal9, "rootMapName")
		local registerVal11 = Engine.GetModelValue(registerVal10)
		if registerVal10 and registerVal11 == (registerVal4 .. "_nightmares") then
			return registerVal9
		end
	end
end

registerVal1.getModel = __FUNC_4DEF8_
DataSources.CPMissionOverviewFrontend = registerVal1
local function __FUNC_4E4B3_(arg0)
	local registerVal3 = Engine.IsCampaignModeZombies()
	if registerVal3 then
		local registerVal4 = Engine.GetGlobalModel()
		registerVal3 = CoD.SafeGetModelValue(registerVal4, "inBarracks")
		if registerVal3 == true then
		end
	end
	local function __FUNC_4F21D_(arg0, arg1)
		if CoD.mapsTable[arg0].unique_id >= CoD.mapsTable[arg1].unique_id then
		end
		return true
	end

	local registerVal6, registerVal7, registerVal8 = LUI.IterateTableBySortedKeys(CoD.mapsTable, __FUNC_4F21D_, nil)
	for index9,value10 in registerVal6, registerVal7, registerVal8 do
		if value10.campaign_mode ~= Enum.CampaignMode.CAMPAIGNMODE_DEFAULT or true then
			if value10.campaign_mode == Enum.CampaignMode.CAMPAIGNMODE_ZOMBIES then
			else
			end
		end
		if index9 == "cp_doa_bo3" then
			local registerVal12 = Dvar.ui_doa_unlocked:get()
			registerVal12 = IsLive()
			if registerVal12 and registerVal12 then
				value10.isSubLevel = false
			else
				value10.isSubLevel = true
			end
		end
		if value10.session_mode == Enum.eModes.MODE_CAMPAIGN and true and value10.dlc_pack ~= -1.000000 and value10.isSubLevel == false then
			registerVal12, registerVal13 = GetCollectiblesXOfY(arg0, index9)
			local registerVal14, registerVal15 = GetAccoladesXOfY(arg0, index9)
			local registerVal16 = Engine.GetPlayerStats(arg0, CoD.STATS_LOCATION_NORMAL, Enum.eModes.MODE_CAMPAIGN)
			local registerVal18 = Engine.GetGlobalModel()
			local registerVal17 = CoD.SafeGetModelValue(registerVal18, "inBarracks")
			if registerVal17 ~= true then
			end
			registerVal18 = Engine.StorageGetBuffer(arg0, Enum.StorageFileType.STORAGE_CP_STATS_ONLINE)
			if true and CoD.CombatRecordOtherPlayerStats then
				registerVal18 = Engine.GetOtherPlayerStatsBuffer()
			end
			registerVal18 = CoD.GetCombatRecordStatForPath(registerVal18, "allMapsUnlocked")
			local registerVal19 = CoD.GetCombatRecordStatForPath(registerVal18, ("PlayerStatsByMap." .. index9 .. ".hasBeenCompleted"))
			if registerVal19 ~= 1.000000 then
			end
			if registerVal18 ~= 1.000000 and not true then
				if true then
				else
				end
			end
			if not true then
				for index26=0.000000, 4.000000, 1.000000 do
					local registerVal35 = tostring(index26)
					local registerVal30 = CoD.GetCombatRecordStatForPath(registerVal18, ("PlayerStatsByMap." .. index9 .. ".completedDifficulties." .. registerVal35))
					if registerVal30 == 1.000000 then
					end
				end
				if true and index26 and 0.000000 <= index26 then
				end
				local registerVal26 = CoD.GetCombatRecordStatForPath(registerVal18, ("PlayerStatsByMap." .. index9 .. ".highestStats.SCORE"))
			end
			local registerVal25 = CoD.GetCombatRecordStatForPath(registerVal18, "highestMapReached")
			if registerVal25 >= (0.000000 + 1.000000) then
			end
			local registerVal28 = Engine.GetSavedMap()
			if not true and registerVal28 then
				local registerVal29 = LUI.startswith(registerVal28, "cp_sh")
				if registerVal29 then
					registerVal29 = Engine.GetSavedMapQueuedMap()
				end
				if registerVal29 and registerVal29 == value10.rootMapName then
				end
			end
			if not true then
			end
			local registerVal31 = {}
			local registerVal32 = {}
			local registerVal33 = Engine.Localize(value10.mapNameCaps)
			registerVal32.displayText = registerVal33
			registerVal32.Image = value10.previewImage
			registerVal32.name = value10.mapName
			registerVal32.mapName = value10.mapName
			registerVal32.rootMapName = value10.rootMapName
			registerVal32.mapLocation = value10.mapLocation
			registerVal32.mapDescription = value10.mapDescription
			registerVal32.bestTime = 0.000000
			registerVal32.stat = "--"
			registerVal32.bestScore = registerVal26
			registerVal32.completedDifficultyAlpha = 1.000000
			registerVal32.completedDifficulty = CoD.DIFFICULTY_ICON[index26]
			registerVal32.completedDifficultyText = CoD.DIFFICULTY[index26]
			registerVal32.classified = true
			registerVal32.collectiblesFound = registerVal12
			registerVal32.collectiblesTotal = registerVal13
			registerVal32.accoladesTotal = registerVal15
			registerVal32.accoladesFound = registerVal14
			registerVal32.completedOutOfOrder = true
			registerVal32.completed = true
			registerVal32.isCurrentMap = true
			registerVal32.unique_id = value10.unique_id
			registerVal31.models = registerVal32
			registerVal32 = {}
			registerVal32.mapId = index9
			registerVal32.classified = true
			registerVal31.properties = registerVal32
			table.insert({}, registerVal31)
		end
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("CPMapsList", __FUNC_4E4B3_)
DataSources.CPMapsList = registerVal1
local function __FUNC_4F2DF_(arg0, arg1)
	if CoD.perController[arg0].choosingZMPlaylist then
		local registerVal3 = Engine.GetPlaylistCategories()
		if not CoD.PlaylistCategoryFilter then
		end
		local registerVal5 = Engine.ProfileInt(arg0, ("playlist_" .. ""))
		local registerVal6 = FindPlaylistCategory(registerVal3, registerVal5)
		local registerVal8, registerVal9, registerVal10 = ipairs(registerVal3)
		for index11,value12 in registerVal8, registerVal9, registerVal10 do
			if value12.filter == "" then
			end
		end
		local function __FUNC_4FDCA_(arg1)
			local registerVal2 = Engine.DvarBool(nil, "groupCountsVisible")
			if registerVal2 == true then
				local registerVal4 = CoD.separateNumberWithCommas(arg1.playerCount)
				registerVal2 = Engine.Localize("MENU_CATEGORY_USER_COUNT", registerVal4, CoD.separateNumberWithCommas((0.000000 + value12.playerCount)))
			else
				if 0.000000 < (0.000000 + value12.playerCount) then
					local registerVal3 = math.floor((((arg1.playerCount / (0.000000 + value12.playerCount)) * 100.000000) + 0.500000))
				end
				registerVal3 = Engine.Localize("MENU_CATEGORY_USER_PERCENT", registerVal3)
			end
			if arg1.playlists[1.000000] then
				registerVal4 = Engine.IsPlaylistLocked(arg0, arg1.playlists[1.000000].index)
				if registerVal4 then
					registerVal4 = IsDvarValueEqualTo("ui_freeDLC1", "1")
					registerVal4 = Engine.GetDLCBitForMapName(arg1.ref)
					if registerVal4 and registerVal4 == CoD.DLCBits.CONTENT_DLC1 then
					end
				end
			end
			if arg1.playlists[1.000000] then
				local registerVal5 = ShowPurchasableMap(arg0, arg1.ref)
			end
			if (not (true or CoD.DLCBits.CONTENT_DLC1)) then
				return nil
			end
			if true then
				local registerVal6 = CoD.StoreUtility.AddUpsellToDescriptionIfNeeded(arg0, arg1.ref, arg1.description)
			end
			registerVal6 = Engine.IsMapValid(arg1.ref)
			local registerVal7 = {}
			local registerVal8 = {}
			local registerVal9 = CoD.StoreUtility.PrependPurchaseIconIfNeeded(arg0, arg1.ref, Engine.ToUpper(arg1.name))
			if not registerVal9 then
			end
			registerVal8.displayText = ""
			registerVal9 = Engine.ToUpper(arg1.name)
			if not registerVal9 then
			end
			registerVal8.mapName = ""
			if not arg1.icon then
			end
			registerVal8.Image = "playlist_standard"
			registerVal8.mapDescription = registerVal6
			registerVal8.playingCount = registerVal3
			registerVal7.models = registerVal8
			registerVal8 = {}
			registerVal8.id = arg1.ref
			registerVal8.mapId = arg1.ref
			registerVal8.category = arg1
			registerVal8.playlist = arg1.playlists[1.000000]
			if arg1 ~= registerVal6 then
			end
			registerVal8.selectIndex = true
			registerVal8.disabled = true
			if not registerVal6 then
				registerVal9 = ShowPurchasableMap(arg0, arg1.ref)
			else
			end
			registerVal8.purchasable = true
			registerVal7.properties = registerVal8
			return registerVal7
		end

		registerVal9, registerVal10, registerVal11 = ipairs(registerVal3)
		for index12,value13 in registerVal9, registerVal10, registerVal11 do
			local registerVal14 = __FUNC_4FDCA_(value13)
			if value13.filter == "" and registerVal14 then
				table.insert({}, registerVal14)
			end
		end
		if not arg1.updateLobbyButtonsSubscription then
			registerVal10 = Engine.GetGlobalModel()
			registerVal9 = Engine.CreateModel(registerVal10, "lobbyRoot.lobbyButtonUpdate")
			local function __FUNC_50562_()
				arg1:updateDataSource(true)
			end

			registerVal10 = arg1:subscribeToModel(registerVal9, __FUNC_50562_, false)
			arg1.updateLobbyButtonsSubscription = registerVal10
		end
	else
		local function __FUNC_505B6_(arg0, arg1)
			if CoD.mapsTable[arg0].unique_id >= CoD.mapsTable[arg1].unique_id then
			end
			return true
		end

		local registerVal4, registerVal5, registerVal6 = LUI.IterateTableBySortedKeys(CoD.mapsTable, __FUNC_505B6_, nil)
		for index7,value8 in registerVal4, registerVal5, registerVal6 do
			registerVal9 = Engine.GetDLCBitForMapName(index7)
			if value8.session_mode == Enum.eModes.MODE_ZOMBIES and value8.dlc_pack ~= -1.000000 then
				registerVal10 = CoD.IsHiddenDLC(registerVal9)
				registerVal10 = Engine.IsMapValid(index7)
				if arg1 or registerVal10 then
					registerVal10 = ShowPurchasableMap(arg0, index7)
					registerVal10 = Engine.IsMapValid(index7)
					if not arg1 or registerVal10 then
						local registerVal13 = {}
						registerVal14 = {}
						local registerVal15 = CoD.StoreUtility.PrependPurchaseIconIfNeeded(arg0, index7, Engine.Localize(value8.mapNameCaps))
						registerVal14.displayText = registerVal15
						registerVal14.Image = value8.previewImage
						registerVal14.mapName = value8.mapName
						registerVal14.mapLocation = value8.mapLocation
						registerVal15 = CoD.StoreUtility.AddUpsellToDescriptionIfNeeded(arg0, index7, value8.mapDescription)
						registerVal14.mapDescription = registerVal15
						registerVal14.playingCount = ""
						registerVal14.dlcIndex = value8.dlc_pack
						registerVal13.models = registerVal14
						registerVal14 = {}
						registerVal14.mapId = index7
						registerVal15 = Engine.IsMapValid(index7)
						registerVal14.purchasable = (not registerVal15)
						registerVal13.properties = registerVal14
						table.insert({}, registerVal13)
					end
				end
			end
		end
		registerVal4 = Mods_Enabled()
		registerVal4 = Engine.Mods_Lists_GetInfoEntries(LuaEnums.USERMAP_BASE_PATH, 0.000000, Engine.Mods_Lists_GetInfoEntriesCount(LuaEnums.USERMAP_BASE_PATH))
		if registerVal4 and registerVal4 then
			for index5=0.000000, #0.000000, 1.000000 do
				registerVal10 = LUI.startswith(registerVal4[index5].internalName, "zm_")
				if registerVal10 then
					local registerVal12 = {}
					registerVal13 = {}
					registerVal14 = string.sub(registerVal4[index5].name, 1.000000, 32.000000)
					registerVal13.displayText = registerVal14
					registerVal13.Image = registerVal4[index5].ugcName
					registerVal13.mapName = registerVal4[index5].name
					registerVal13.mapDescription = registerVal4[index5].description
					registerVal12.models = registerVal13
					registerVal13 = {}
					registerVal13.mapId = registerVal4[index5].ugcName
					registerVal12.properties = registerVal13
					table.insert({}, registerVal12)
				end
			end
		end
	end
	CoD.StoreUtility.AddListDLCListener(arg1)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("ZMMapsList", __FUNC_4F2DF_, true)
DataSources.ZMMapsList = registerVal1
local function __FUNC_50677_(arg0, arg1)
	local function __FUNC_50A37_(arg0)
		local registerVal2 = Engine.GetGlobalModel()
		local registerVal1 = CoD.SafeGetModelValue(registerVal2, ("eeGateworm." .. arg0 .. ".cumulative"))
		if registerVal1 ~= true then
		end
		return true
	end

	local registerVal3 = IsLive()
	if not registerVal3 then
		return {}
	end
	if not CoD.perController[arg0].zmLobbyEEMapRef then
		return {}
	end
	local registerVal5 = CoD.LobbyUtility.IsMapEEMap(CoD.perController[arg0].zmLobbyEEMapRef)
	if not registerVal5 then
		return {}
	end
	registerVal5 = Engine.ToUpper(CoD.perController[arg0].zmLobbyEEMapRef)
	if registerVal5 == "ZM_GENESIS" then
		local registerVal6, registerVal7, registerVal8 = ipairs(CoD.LobbyUtility.EEMapsList)
		if  ~= registerVal5 then
			local registerVal13 = {}
			local registerVal14 = {}
			registerVal14.mapRef = 
			local registerVal15 = CoD.LobbyUtility.GetAnyEECompletedForController(arg0, registerVal5)
			registerVal14.visible = registerVal15
			registerVal15 = __FUNC_50A37_()
			registerVal14.completed = registerVal15
			registerVal14.showingAll = true
			registerVal13.models = registerVal14
			registerVal13.properties = {}
			table.insert({}, registerVal13)
		end
	else
		registerVal8 = {}
		local registerVal9 = {}
		registerVal9.mapRef = registerVal5
		local registerVal10 = CoD.LobbyUtility.GetAnyEECompletedForController(arg0, registerVal5)
		registerVal9.visible = registerVal10
		registerVal10 = CoD.LobbyUtility.GetEECompletedForControllerRef(arg0, registerVal5)
		registerVal9.completed = registerVal10
		registerVal9.showingAll = false
		registerVal8.models = registerVal9
		registerVal8.properties = {}
		table.insert({}, registerVal8)
	end
	return {}
end

registerVal1 = ListHelper_SetupDataSource("ZMLobbyEEMapSelect", __FUNC_50677_, true)
DataSources.ZMLobbyEEMapSelect = registerVal1
local function __FUNC_50B28_(arg0, arg1)
	local function __FUNC_50F12_(arg0)
		local registerVal2 = Engine.GetGlobalModel()
		local registerVal1 = CoD.SafeGetModelValue(registerVal2, ("eeGateworm." .. arg0 .. ".cumulative"))
		if registerVal1 ~= true then
		end
		return true
	end

	local registerVal3 = IsLive()
	if not registerVal3 then
		return {}
	end
	local registerVal5 = Engine.GetGlobalModel()
	local registerVal4 = CoD.SafeGetModelValue(registerVal5, "MapVote.mapVoteMapNext")
	if not registerVal4 then
		return {}
	end
	registerVal5 = CoD.LobbyUtility.IsMapEEMap(registerVal4)
	if not registerVal5 then
		return {}
	end
	registerVal5 = Engine.ToUpper(registerVal4)
	if registerVal5 == "ZM_GENESIS" then
		local registerVal6, registerVal7, registerVal8 = ipairs(CoD.LobbyUtility.EEMapsList)
		if  ~= registerVal5 then
			local registerVal13 = {}
			local registerVal14 = {}
			registerVal14.mapRef = 
			local registerVal15 = CoD.LobbyUtility.GetAnyEECompletedForController(arg0, registerVal5)
			registerVal14.visible = registerVal15
			registerVal15 = __FUNC_50F12_()
			registerVal14.completed = registerVal15
			registerVal14.showingAll = true
			registerVal13.models = registerVal14
			registerVal13.properties = {}
			table.insert({}, registerVal13)
		end
	else
		registerVal8 = {}
		local registerVal9 = {}
		registerVal9.mapRef = registerVal5
		local registerVal10 = CoD.LobbyUtility.GetAnyEECompletedForController(arg0, registerVal5)
		registerVal9.visible = registerVal10
		registerVal10 = CoD.LobbyUtility.GetEECompletedForControllerRef(arg0, registerVal5)
		registerVal9.completed = registerVal10
		registerVal9.showingAll = false
		registerVal8.models = registerVal9
		registerVal8.properties = {}
		table.insert({}, registerVal8)
	end
	return {}
end

local function __FUNC_51004_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "MapVote.mapVoteMapNext")
	if arg1.updateMapVoteSubscription then
		arg1:removeSubscription(arg1.updateMapVoteSubscription)
	end
	registerVal4, registerVal5, registerVal6 = ipairs(CoD.LobbyUtility.EEMapsList)
	for index7,value8 in registerVal4, registerVal5, registerVal6 do
		if arg1[(value8 .. "CumulativeSubscription")] then
			arg1:removeSubscription(arg1[(value8 .. "CumulativeSubscription")])
		end
	end
	local function __FUNC_512E7_()
		arg1:updateDataSource()
	end

	registerVal4 = arg1:subscribeToModel(registerVal3, __FUNC_512E7_, false)
	arg1.updateMapVoteSubscription = registerVal4
	registerVal4, registerVal5, registerVal6 = ipairs(CoD.LobbyUtility.EEMapsList)
	for index7,value8 in registerVal4, registerVal5, registerVal6 do
		local registerVal10 = Engine.GetGlobalModel()
		local registerVal9 = Engine.CreateModel(registerVal10, ("eeGateworm." .. value8 .. ".cumulative"))
		local function __FUNC_51336_()
			arg1:updateDataSource()
		end

		local registerVal11 = arg1:subscribeToModel(registerVal9, __FUNC_51336_, false)
		arg1[(value8 .. "CumulativeSubscription")] = registerVal11
	end
end

registerVal1 = ListHelper_SetupDataSource("ZMLobbyEEMapVote", __FUNC_50B28_, nil, nil, __FUNC_51004_)
DataSources.ZMLobbyEEMapVote = registerVal1
local function __FUNC_51386_(arg0)
	local registerVal1 = IsLive()
	if not registerVal1 then
		return {}
	end
	registerVal1 = {}
	local registerVal2 = {}
	registerVal2 = {"doublexp", IsZMDoubleXPWeekend}
	local registerVal3 = {}
	registerVal3 = {"doubleweaponxp", IsZMDoubleWeaponXP}
	local registerVal4 = {}
	registerVal4 = {"doublevials", IsZMDoubleVialActive}
	local registerVal5 = {}
	registerVal5 = {"firstonefree", IsZMFreeGumPerRoundActive}
	registerVal1 = {registerVal2, registerVal3, registerVal4, registerVal5}
	registerVal3, registerVal4, registerVal5 = ipairs(registerVal1)
	for index6,value7 in registerVal3, registerVal4, registerVal5 do
		local registerVal10 = value7[2.000000](arg0)
		if registerVal10 then
			local registerVal12 = {}
			local registerVal13 = {}
			registerVal13.type = value7[1.000000]
			registerVal12.models = registerVal13
			table.insert({}, registerVal12)
		end
	end
	return {}
end

local function __FUNC_515BA_(arg0, arg1, arg2)
	if not arg1.lobbyNavModel then
		local registerVal4 = Engine.GetGlobalModel()
		local registerVal3 = Engine.GetModel(registerVal4, "lobbyRoot.lobbyNav")
		local function __FUNC_516C7_()
			local registerVal0 = Engine.CurrentSessionMode()
			if registerVal0 == Enum.eModes.MODE_ZOMBIES then
				arg1:updateDataSource()
			end
		end

		registerVal4 = arg1:subscribeToModel(registerVal3, __FUNC_516C7_, false)
		arg1.lobbyNavModel = registerVal4
	end
end

registerVal1 = ListHelper_SetupDataSource("ZMPromoIconList", __FUNC_51386_, nil, nil, __FUNC_515BA_)
DataSources.ZMPromoIconList = registerVal1
registerVal1 = {}
local function __FUNC_517AE_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.GetModel(registerVal2, "DailyChallengeWidget")
	if not registerVal1 then
		local registerVal3 = Engine.GetModelForController(arg0)
		registerVal2 = Engine.CreateModel(registerVal3, "DailyChallengeWidget")
		registerVal2 = Engine.CreateModel(registerVal2, "Data")
		registerVal3 = Engine.CreateModel(registerVal2, "Update")
		Engine.SetModelValue(registerVal3, 0.000000)
		CoD.ChallengesUtility.UpdateDailyChallengeModel(arg0, registerVal2, Enum.eModes.MODE_ZOMBIES)
	end
	return registerVal2
end

registerVal1.getModel = __FUNC_517AE_
DataSources.DailyChallengeWidget = registerVal1
local function __FUNC_51A0D_(arg0)
	local function __FUNC_51EC2_(arg0, arg1)
		if CoD.mapsTable[arg0].unique_id >= CoD.mapsTable[arg1].unique_id then
		end
		return true
	end

	local registerVal5, registerVal6, registerVal7 = LUI.IterateTableBySortedKeys(CoD.mapsTable, __FUNC_51EC2_, nil)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		if value9.session_mode == Enum.eModes.MODE_CAMPAIGN and value9.isSafeHouse == false and value9.dlc_pack ~= -1.000000 and value9.campaign_mode == Enum.CampaignMode.CAMPAIGNMODE_DEFAULT and index8 ~= "cp_doa_bo3" and index8 ~= "cp_codfu" then
			local registerVal10 = Engine.GetDStat(arg0, "PlayerStatsByMap", index8, "hasBeenCompleted")
			local registerVal11 = Dvar.allCollectiblesUnlocked:get()
			if registerVal10 == 1.000000 or registerVal11 ~= false then
				local registerVal13 = {}
				local registerVal14 = {}
				local registerVal15 = Engine.Localize(value9.mapNameCaps)
				registerVal14.displayText = registerVal15
				registerVal14.video = value9.introMovie
				registerVal13.models = registerVal14
				registerVal13.properties = {}
				table.insert({}, registerVal13)
			end
		end
	end
	registerVal7 = {}
	local registerVal8 = {}
	local registerVal9 = Engine.Localize("ZMUI_ZOD_CAPS")
	registerVal8.displayText = registerVal9
	registerVal8.video = "zm_zod_load_zodloadingmovie"
	registerVal7.models = registerVal8
	registerVal7.properties = {}
	table.insert({}, registerVal7)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("CPVideoPlayerList", __FUNC_51A0D_)
DataSources.CPVideoPlayerList = registerVal1
local function __FUNC_51F83_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.displayText = "MENU_PLAY_ANY_MISSION_CAPS"
	registerVal5.Image = "t7_menu_cp_front_end_bo3"
	registerVal5.action = CPSelectPublicGame
	registerVal5.param = "anyMission"
	registerVal5.mapInfoVis = 0.000000
	registerVal5.infoText = "MENU_PLAY_ANY_MISSION_DESC"
	registerVal5.playerCountText = "MENU_X_PLAYERS_PLAYING"
	registerVal5.playersPlaying = 0.000000
	registerVal5.type = "anyMission"
	registerVal4.models = registerVal5
	table.insert({}, registerVal4)
	local registerVal2 = Engine.GetSavedMap()
	local registerVal3 = LUI.startswith(registerVal2, "cp_sh")
	if registerVal2 and registerVal3 then
		registerVal3 = Engine.GetSavedMapQueuedMap()
	end
	registerVal3 = Engine.IsCampaignModeZombies()
	if not registerVal3 and registerVal3 then
	end
	if CoD.mapsTable["cp_mi_sing_sgen_nightmares"].rootMapName and CoD.mapsTable["cp_mi_sing_sgen_nightmares"].rootMapName ~= "cp_mi_sing_sgen_nightmares" then
	end
	registerVal4, registerVal5 = GetCollectiblesXOfY(arg0, CoD.mapsTable["cp_mi_sing_sgen_nightmares"].rootMapName)
	local registerVal6, registerVal7 = GetAccoladesXOfY(arg0, CoD.mapsTable["cp_mi_sing_sgen_nightmares"].rootMapName)
	local registerVal11 = Engine.GetDStat(arg0, "PlayerStatsByMap", CoD.mapsTable["cp_mi_sing_sgen_nightmares"].rootMapName, "hasBeenCompleted")
	if registerVal11 ~= 1.000000 then
	end
	local registerVal12 = Engine.GetDStat(arg0, "PlayerStatsByMap", CoD.mapsTable["cp_mi_sing_sgen_nightmares"].rootMapName, "lastCompletedDifficulty")
	if true and 0.000000 <= registerVal12 then
	end
	local registerVal13 = Engine.GetPlayerStats(arg0)
	local registerVal14 = registerVal13.PlayerStatsByMap[CoD.mapsTable["cp_mi_sing_sgen_nightmares"].rootMapName].highestStats.SCORE:get()
	if CoD.mapsTable[CoD.mapsTable["cp_mi_sing_sgen_nightmares"].rootMapName] then
		local registerVal17 = {}
		local registerVal18 = {}
		registerVal18.displayText = "MENU_PLAY_CURRENT_MISSION_CAPS"
		registerVal18.Image = CoD.mapsTable[CoD.mapsTable["cp_mi_sing_sgen_nightmares"].rootMapName].previewImage
		registerVal18.mapName = CoD.mapsTable[CoD.mapsTable["cp_mi_sing_sgen_nightmares"].rootMapName].mapName
		registerVal18.mapLocation = CoD.mapsTable[CoD.mapsTable["cp_mi_sing_sgen_nightmares"].rootMapName].mapLocation
		registerVal18.mapDescription = CoD.mapsTable[CoD.mapsTable["cp_mi_sing_sgen_nightmares"].rootMapName].mapDescription
		registerVal18.bestTime = 0.000000
		registerVal18.bestScore = registerVal14
		registerVal18.action = CPSelectPublicGame
		registerVal18.param = "currMission"
		registerVal18.mapInfoVis = 1.000000
		registerVal18.infoText = ""
		registerVal18.playerCountText = "MENU_X_PLAYERS_PLAYING"
		registerVal18.collectiblesFound = registerVal4
		registerVal18.collectiblesTotal = registerVal5
		registerVal18.accoladesTotal = registerVal7
		registerVal18.accoladesFound = registerVal6
		registerVal18.playersPlaying = 0.000000
		registerVal18.type = "currentMission"
		registerVal18.completedDifficultyAlpha = 1.000000
		registerVal18.completedDifficulty = CoD.DIFFICULTY_ICON[registerVal12]
		registerVal18.completedDifficultyText = CoD.DIFFICULTY[registerVal12]
		registerVal17.models = registerVal18
		table.insert({}, registerVal17)
	end
	registerVal17 = {}
	registerVal18 = {}
	registerVal18.displayText = "MENU_PLAY_SPECIFIC_MISSION_CAPS"
	registerVal18.Image = "t7_menu_cp_front_end_bo3"
	registerVal18.action = CPSelectPublicGame
	registerVal18.param = "specificMission"
	registerVal18.mapInfoVis = 0.000000
	registerVal18.infoText = "MENU_PLAY_SPECIFIC_MISSION_DESC"
	registerVal18.playerCountText = ""
	registerVal18.type = "specificMission"
	registerVal17.models = registerVal18
	table.insert({}, registerVal17)
	return {}
end

registerVal1 = ListHelper_SetupDataSource("CPPublicGameSelectionList", __FUNC_51F83_)
DataSources.CPPublicGameSelectionList = registerVal1
registerVal1 = {}
local function __FUNC_528FC_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "CampaignSettings")
	local registerVal3 = Engine.IsLobbyHost(Enum.LobbyType.LOBBY_TYPE_GAME)
	registerVal3 = Engine.GetPrimaryController()
	if registerVal3 and arg0 == registerVal3 then
		registerVal3 = Engine.GetProfileVarInt(arg0, "g_gameskill")
	else
		local registerVal4 = Engine.GetModelForController(arg0)
		registerVal3 = Engine.GetModel(registerVal4, "serverDifficulty")
		registerVal4 = Engine.GetModelValue(registerVal3)
	end
	if registerVal4 == nil then
	end
	registerVal4 = Engine.CreateModel(registerVal1, "difficulty")
	Engine.SetModelValue(registerVal4, Engine.Localize(CoD.DIFFICULTY[1.000000]))
	registerVal4 = Engine.CreateModel(registerVal1, "difficultyIcon")
	Engine.SetModelValue(registerVal4, CoD.DIFFICULTY_ICON[1.000000])
	registerVal3 = Engine.GetModelValue(Engine.CreateModel(registerVal1, "selectedMap"))
	if registerVal3 == nil then
		local registerVal5 = Engine.CreateModel(registerVal1, "selectedMap")
		Engine.SetModelValue(registerVal5, "cp_mi_eth_prologue")
	end
	return registerVal1
end

registerVal1.getModel = __FUNC_528FC_
DataSources.CampaignSettings = registerVal1
registerVal1 = {}
local function __FUNC_52D67_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "ZMSettings")
	return registerVal1
end

registerVal1.getModel = __FUNC_52D67_
DataSources.ZMSettings = registerVal1
registerVal1 = {}
local function __FUNC_52E11_(arg0, arg1, arg2)
	arg1.missionList = {}
	local registerVal3 = Engine.TableLookup(arg0, CoD.protoMapsTable, 0.000000, "mapCount", 1.000000)
	local registerVal5 = Engine.GetGlobalModel()
	local registerVal4 = Engine.CreateModel(registerVal5, "MissionLevels")
	for index5=1.000000, registerVal3, 1.000000 do
		local registerVal10 = Engine.TableLookup(arg0, CoD.protoMapsTable, 3.000000, ((index5 - 1.000000) .. ""), 0.000000)
		local registerVal11 = Engine.TableLookup(arg0, CoD.protoMapsTable, 3.000000, ((index5 - 1.000000) .. ""), 1.000000)
		local registerVal12 = Engine.TableLookup(arg0, CoD.protoMapsTable, 3.000000, ((index5 - 1.000000) .. ""), 2.000000)
		local registerVal13 = Engine.TableLookup(arg0, CoD.protoMapsTable, 3.000000, ((index5 - 1.000000) .. ""), 4.000000)
		local registerVal14 = Engine.CreateModel(registerVal4, ((index5 - 1.000000) .. ""))
		local registerVal16 = Engine.CreateModel(registerVal14, "devName")
		Engine.SetModelValue(registerVal16, (registerVal10 .. ""))
		registerVal16 = Engine.CreateModel(registerVal14, "locName")
		Engine.SetModelValue(registerVal16, (registerVal11 .. ""))
		registerVal16 = Engine.CreateModel(registerVal14, "imagename")
		Engine.SetModelValue(registerVal16, (registerVal12 .. ""))
		registerVal16 = Engine.CreateModel(registerVal14, "desc")
		Engine.SetModelValue(registerVal16, (registerVal13 .. ""))
		table.insert(arg1.missionList, registerVal14)
	end
end

registerVal1.prepare = __FUNC_52E11_
local function __FUNC_53215_(arg0)
	return #arg0.missionList
end

registerVal1.getCount = __FUNC_53215_
local function __FUNC_53269_(arg0, arg1, arg2)
	return arg1.missionList[arg2]
end

registerVal1.getItem = __FUNC_53269_
DataSources.CampaignMissionList = registerVal1
registerVal1 = {}
local function __FUNC_532C5_(arg0, arg1, arg2)
	arg1.numElementsInList = arg1.vCount
	arg1.controller = arg0
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "serverBrowser")
	arg1.serverBrowserRootModel = registerVal3
	registerVal3 = Engine.GetModel(arg1.serverBrowserRootModel, "serverListCount")
	if registerVal3 then
		registerVal4 = Engine.GetModelValue(registerVal3)
		arg1.serverCount = registerVal4
	else
		arg1.serverCount = 0.000000
	end
	arg1.servers = {}
	registerVal4 = Engine.CreateModel(arg1.serverBrowserRootModel, "servers")
	for index5=1.000000, arg1.numElementsInList, 1.000000 do
		arg1.servers[index5] = {}
		local registerVal10 = Engine.CreateModel(registerVal4, ("server_" .. index5))
		arg1.servers[index5].root = registerVal10
		registerVal10 = Engine.CreateModel(arg1.servers[index5].root, "model")
		arg1.servers[index5].model = registerVal10
	end
	local function __FUNC_53759_(arg0, arg1, arg2)
		local registerVal3 = Engine.SteamServerBrowser_GetServerInfo(arg2)
		if registerVal3 then
			local function __FUNC_53B75_(arg0, arg1, arg2)
				local registerVal3 = Engine.CreateModel(arg0, arg1)
				if registerVal3 then
					Engine.SetModelValue(registerVal3, arg2)
				end
			end

			__FUNC_53B75_(arg1.servers[((arg2 % arg1.numElementsInList) + 1.000000)].model, "serverIndex", registerVal3.serverIndex)
			__FUNC_53B75_(arg1.servers[((arg2 % arg1.numElementsInList) + 1.000000)].model, "connectAddr", registerVal3.connectAddr)
			__FUNC_53B75_(arg1.servers[((arg2 % arg1.numElementsInList) + 1.000000)].model, "ping", registerVal3.ping)
			__FUNC_53B75_(arg1.servers[((arg2 % arg1.numElementsInList) + 1.000000)].model, "modName", registerVal3.modName)
			__FUNC_53B75_(arg1.servers[((arg2 % arg1.numElementsInList) + 1.000000)].model, "mapName", registerVal3.map)
			__FUNC_53B75_(arg1.servers[((arg2 % arg1.numElementsInList) + 1.000000)].model, "desc", registerVal3.desc)
			__FUNC_53B75_(arg1.servers[((arg2 % arg1.numElementsInList) + 1.000000)].model, "clientCount", registerVal3.playerCount)
			__FUNC_53B75_(arg1.servers[((arg2 % arg1.numElementsInList) + 1.000000)].model, "maxClients", registerVal3.maxPlayers)
			__FUNC_53B75_(arg1.servers[((arg2 % arg1.numElementsInList) + 1.000000)].model, "passwordProtected", registerVal3.password)
			__FUNC_53B75_(arg1.servers[((arg2 % arg1.numElementsInList) + 1.000000)].model, "secure", registerVal3.secure)
			__FUNC_53B75_(arg1.servers[((arg2 % arg1.numElementsInList) + 1.000000)].model, "name", registerVal3.name)
			__FUNC_53B75_(arg1.servers[((arg2 % arg1.numElementsInList) + 1.000000)].model, "gameType", registerVal3.gametype)
			__FUNC_53B75_(arg1.servers[((arg2 % arg1.numElementsInList) + 1.000000)].model, "dedicated", registerVal3.dedicated)
			__FUNC_53B75_(arg1.servers[((arg2 % arg1.numElementsInList) + 1.000000)].model, "ranked", registerVal3.ranked)
			__FUNC_53B75_(arg1.servers[((arg2 % arg1.numElementsInList) + 1.000000)].model, "hardcore", registerVal3.hardcore)
			return arg1.servers[((arg2 % arg1.numElementsInList) + 1.000000)].model
		end
		return nil
	end

	arg1.updateModels = __FUNC_53759_
	if arg1.serverListUpdateSubscription then
		arg1:removeSubscription(arg1.serverListUpdateSubscription)
	end
	local registerVal5 = Engine.CreateModel(arg1.serverBrowserRootModel, "serverListCount")
	local function __FUNC_53C1C_(arg0)
		arg1:updateDataSource(false, false)
	end

	local registerVal6 = arg1:subscribeToModel(registerVal5, __FUNC_53C1C_, false)
	arg1.serverListUpdateSubscription = registerVal6
	if arg1.serverListSortTypeSubscription then
		arg1:removeSubscription(arg1.serverListSortTypeSubscription)
	end
	registerVal6 = Engine.CreateModel(arg1.serverBrowserRootModel, "serverListSortType")
	local function __FUNC_53C76_(arg0)
		arg1:updateDataSource(false, false)
	end

	local registerVal7 = arg1:subscribeToModel(registerVal6, __FUNC_53C76_, false)
	arg1.serverListSortTypeSubscription = registerVal7
end

registerVal1.prepare = __FUNC_532C5_
local function __FUNC_53CCE_(arg0)
	return arg0.serverCount
end

registerVal1.getCount = __FUNC_53CCE_
local function __FUNC_53D1D_(arg0, arg1, arg2)
	return arg1.updateModels(arg0, arg1, (arg2 - 1.000000))
end

registerVal1.getItem = __FUNC_53D1D_
local function __FUNC_53D87_(arg0)
	if arg0.serverBrowserRootModel then
		Engine.UnsubscribeAndFreeModel(arg0.serverBrowserRootModel)
		arg0.serverBrowserRootModel = nil
	end
end

registerVal1.cleanup = __FUNC_53D87_
DataSources.LobbyServer = registerVal1
registerVal1 = {}
local function __FUNC_53E3A_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.GetModel(registerVal4, "serverListRoot")
	arg1.baseModel = registerVal3
	registerVal3 = Engine.GetModel(arg1.baseModel, "count")
	arg1.countModel = registerVal3
	if arg1.countSubscription then
		arg1:removeSubscription(arg1.countSubscription)
	end
	local function __FUNC_53FE5_()
		RefreshListFindSelectedXuid(arg0, arg1)
	end

	registerVal3 = arg1:subscribeToModel(arg1.countModel, __FUNC_53FE5_, false)
	arg1.countSubscription = registerVal3
end

registerVal1.prepare = __FUNC_53E3A_
local function __FUNC_54045_(arg0)
	return Engine.GetModelValue(arg0.countModel)
end

registerVal1.getCount = __FUNC_54045_
local function __FUNC_540CF_(arg0, arg1, arg2)
	return Engine.GetModel(arg1.baseModel, ("server" .. (arg2 - 1.000000)))
end

registerVal1.getItem = __FUNC_540CF_
DataSources.LocalServer = registerVal1
registerVal1 = {}
local function __FUNC_54172_(arg0, arg1, arg2)
	arg1.playerList = {}
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "serverPlayerListRoot")
	registerVal4 = Engine.CreateModel(registerVal3, "selectedServer")
	arg1.selectedServerModel = registerVal4
	registerVal4 = Engine.GetModelValue(arg1.selectedServerModel)
	if registerVal4 ~= nil then
		local registerVal5 = Engine.LobbyServerListGetClientList(registerVal4)
		arg1.playerList = registerVal5
		if arg1.playerList ~= nil then
			registerVal5, registerVal6, registerVal7 = pairs(arg1.playerList)
			for index8,value9 in registerVal5, registerVal6, registerVal7 do
				local registerVal10 = Engine.CreateModel(registerVal3, ("playerModel_" .. index8))
				arg1.playerList[index8].model = registerVal10
				local registerVal12 = Engine.CreateModel(registerVal10, "xuid")
				Engine.SetModelValue(registerVal12, value9.xuid)
				registerVal12 = Engine.CreateModel(registerVal10, "gamertag")
				Engine.SetModelValue(registerVal12, value9.gamertag)
				registerVal12 = Engine.CreateModel(registerVal10, "isLeader")
				Engine.SetModelValue(registerVal12, value9.isLeader)
			end
		else
			arg1.playerList = {}
		end
	end
end

registerVal1.prepare = __FUNC_54172_
local function __FUNC_544C7_(arg0, arg1)
	return arg0.playerList[arg1]
end

registerVal1.getCustomPropertiesForItem = __FUNC_544C7_
local function __FUNC_54520_(arg0)
	return #arg0.playerList
end

registerVal1.getCount = __FUNC_54520_
local function __FUNC_54574_(arg0, arg1, arg2)
	return arg1.playerList[arg2].model
end

registerVal1.getItem = __FUNC_54574_
DataSources.LocalServerPlayer = registerVal1
registerVal1 = {}
local function __FUNC_545EB_(arg0)
	if not arg0 then
		local registerVal1 = Engine.GetPrimaryController()
	end
	local registerVal2 = CoD.GetPlayerStats(registerVal1)
	{}.currentStats = registerVal2
	registerVal2 = {}.currentStats.PlayerStatsList.PLEVEL.StatValue:get()
	{}.currPrestige = registerVal2
	registerVal2 = IsInParagonCapableGameMode()
	local registerVal3 = Engine.GetPrestigeCap()
	if registerVal2 and {}.currPrestige == registerVal3 then
		registerVal2 = {}.currentStats.PlayerStatsList.PARAGON_RANK.StatValue:get()
		{}.currentRank = registerVal2
		registerVal2 = Engine.TableLookup(registerVal1, CoD.paragonRankTable, CoD.XPBar.RankIdCol, {}.currentRank, CoD.XPBar.RankDisplayLevelCol)
		{}.displayLevelForCurrRank = registerVal2
		registerVal2 = Engine.TableLookup(registerVal1, CoD.rankIconTable, CoD.XPBar.RankIdCol, 0.000000, ({}.currPrestige + 1.000000))
		{}.currRankIconMaterialName = registerVal2
		{}.nextRank = ({}.currentRank + 1.000000)
		registerVal2 = tonumber({}.displayLevelForCurrRank)
		{}.displayLevelForNextRank = (registerVal2 + 1.000000)
		registerVal2 = Engine.TableLookup(registerVal1, CoD.rankIconTable, CoD.XPBar.RankIdCol, 0.000000, ({}.currPrestige + 1.000000))
		{}.nextRankIconMaterialName = registerVal2
		registerVal2 = {}.currentStats.PlayerStatsList.PARAGON_ICON_ID.StatValue:get()
		{}.paragonIconId = registerVal2
		if {}.paragonIconId ~= CoD.PrestigeUtility.INVALID_PARAGON_ICON_ID then
			registerVal2 = Engine.GetParagonIconById({}.paragonIconId)
			{}.currRankIconMaterialName = registerVal2
			{}.nextRankIconMaterialName = {}.currRankIconMaterialName
		end
		registerVal2 = {}.currentStats.PlayerStatsList.PARAGON_RANKXP.StatValue:get()
		{}.currRankXP = registerVal2
		registerVal2 = tonumber(Engine.TableLookup(registerVal1, CoD.paragonRankTable, CoD.XPBar.RankIdCol, {}.currentRank, CoD.XPBar.RankTableColMinXP))
		{}.minXPForCurrRank = registerVal2
		registerVal2 = tonumber(Engine.TableLookup(registerVal1, CoD.paragonRankTable, CoD.XPBar.RankIdCol, {}.currentRank, CoD.XPBar.RankTableColMaxXP))
		{}.maxXPForCurrRank = registerVal2
	else
		registerVal2 = {}.currentStats.PlayerStatsList.RANK.StatValue:get()
		{}.currentRank = registerVal2
		registerVal2 = Engine.TableLookup(registerVal1, CoD.rankTable, CoD.XPBar.RankIdCol, {}.currentRank, CoD.XPBar.RankDisplayLevelCol)
		{}.displayLevelForCurrRank = registerVal2
		registerVal2 = Engine.TableLookup(registerVal1, CoD.rankIconTable, CoD.XPBar.RankIdCol, {}.currentRank, ({}.currPrestige + 1.000000))
		{}.currRankIconMaterialName = registerVal2
		{}.nextRank = ({}.currentRank + 1.000000)
		registerVal2 = tonumber({}.displayLevelForCurrRank)
		{}.displayLevelForNextRank = (registerVal2 + 1.000000)
		registerVal2 = Engine.TableLookup(registerVal1, CoD.rankIconTable, CoD.XPBar.RankIdCol, {}.nextRank, ({}.currPrestige + 1.000000))
		{}.nextRankIconMaterialName = registerVal2
		registerVal2 = {}.currentStats.PlayerStatsList.RANKXP.StatValue:get()
		{}.currRankXP = registerVal2
		registerVal2 = tonumber(Engine.TableLookup(registerVal1, CoD.rankTable, CoD.XPBar.RankIdCol, {}.currentRank, CoD.XPBar.RankTableColMinXP))
		{}.minXPForCurrRank = registerVal2
		registerVal2 = tonumber(Engine.TableLookup(registerVal1, CoD.rankTable, CoD.XPBar.RankIdCol, {}.currentRank, CoD.XPBar.RankTableColMaxXP))
		{}.maxXPForCurrRank = registerVal2
	end
	registerVal2 = CoD.PrestigeNext(registerVal1)
	{}.prestigeNext = registerVal2
	{}.xpToNextRank = ({}.maxXPForCurrRank - {}.currRankXP)
	{}.relativeRankXP = ({}.currRankXP - {}.minXPForCurrRank)
	{}.progressPct = ({}.relativeRankXP / ({}.maxXPForCurrRank - {}.minXPForCurrRank))
	registerVal2 = Engine.GetModelForController(registerVal1)
	registerVal3 = Engine.CreateModel(registerVal2, "XPProgressionBar")
	local registerVal5 = Engine.CreateModel(registerVal3, "currentRank")
	Engine.SetModelValue(registerVal5, {}.displayLevelForCurrRank)
	registerVal5 = Engine.CreateModel(registerVal3, "currentRankIcon")
	Engine.SetModelValue(registerVal5, {}.currRankIconMaterialName)
	registerVal5 = Engine.CreateModel(registerVal3, "nextRank")
	Engine.SetModelValue(registerVal5, {}.displayLevelForNextRank)
	registerVal5 = Engine.CreateModel(registerVal3, "nextRankIcon")
	Engine.SetModelValue(registerVal5, {}.nextRankIconMaterialName)
	registerVal5 = Engine.CreateModel(registerVal3, "currentXP")
	Engine.SetModelValue(registerVal5, {}.currRankXP)
	registerVal5 = Engine.CreateModel(registerVal3, "xpToNextRank")
	Engine.SetModelValue(registerVal5, {}.xpToNextRank)
	registerVal5 = Engine.CreateModel(registerVal3, "progress")
	Engine.SetModelValue(registerVal5, {}.progressPct)
	return registerVal3
end

registerVal1.getModel = __FUNC_545EB_
DataSources.XPProgressionBar = registerVal1
registerVal1 = {}
local function __FUNC_55441_(arg0)
	local registerVal1 = Engine.IsLootReady(arg0)
	registerVal1 = CoD.BlackMarketUtility.GetCurrentCryptoKeyCount(arg0)
	if arg0 or not registerVal1 then
	end
	local registerVal2 = CoD.BlackMarketUtility.GetProgressTowardNextKey(arg0)
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.GetModel(registerVal3, "CryptoKeyProgress")
	if not registerVal4 then
		local registerVal5 = Engine.CreateModel(registerVal3, "CryptoKeyProgress")
		local registerVal6 = Engine.CreateModel(registerVal5, "challengeCryptoKeys")
		Engine.SetModelValue(registerVal6, 0.000000)
	end
	if CoD.perController[arg0].keysToNotShowYet then
	end
	registerVal6 = Engine.IsLootReady(arg0)
	registerVal6 = CoD.BlackMarketUtility.GetCurrentBundleCount(arg0)
	registerVal6 = IsBundleActive(arg0)
	if registerVal6 and not registerVal6 then
		registerVal6 = CoD.BlackMarketUtility.GetCurrentHundredBundleCount(arg0)
		local registerVal7 = CoD.BlackMarketUtility.GetCurrentRareBundle10for5Count(arg0)
		registerVal7 = CoD.BlackMarketUtility.GetCurrentRare20BundleCount(arg0)
		registerVal7 = CoD.BlackMarketUtility.GetCurrentRare20LDBundleCount(arg0)
	end
	registerVal7 = Engine.CreateModel(registerVal5, "keyCount")
	Engine.SetModelValue(registerVal7, (-1.000000 - CoD.perController[arg0].keysToNotShowYet))
	registerVal7 = Engine.CreateModel(registerVal5, "progress")
	Engine.SetModelValue(registerVal7, registerVal2)
	registerVal7 = Engine.CreateModel(registerVal5, "codPoints")
	local registerVal8 = Engine.IsLootReady(arg0)
	registerVal8 = Engine.GetCoDPoints(arg0)
	if (-1.000000 - CoD.perController[arg0].keysToNotShowYet) or not registerVal8 then
	end
	Engine.SetModelValue(registerVal7, -1.000000)
	registerVal7 = Engine.CreateModel(registerVal5, "bundles")
	Engine.SetModelValue(registerVal7, ((((registerVal6 + registerVal6) + registerVal7) + registerVal7) + registerVal7))
	registerVal7 = Engine.CreateModel(registerVal5, "incentiveWeaponBundles")
	registerVal8 = Engine.IsLootReady(arg0)
	registerVal8 = CoD.BlackMarketUtility.GetCurrentIncentiveWeaponBundleCount(arg0)
	if (-1.000000 - CoD.perController[arg0].keysToNotShowYet) or not registerVal8 then
	end
	Engine.SetModelValue(registerVal7, -1.000000)
	registerVal7 = Engine.CreateModel(registerVal5, "incentiveRareBundles")
	registerVal8 = Engine.IsLootReady(arg0)
	registerVal8 = CoD.BlackMarketUtility.GetCurrentIncentiveRareBundleCount(arg0)
	if (-1.000000 - CoD.perController[arg0].keysToNotShowYet) or not registerVal8 then
	end
	Engine.SetModelValue(registerVal7, -1.000000)
	registerVal7 = Engine.CreateModel(registerVal5, "rangeWeaponNoDupesBundles")
	registerVal8 = Engine.IsLootReady(arg0)
	registerVal8 = CoD.BlackMarketUtility.GetCurrentNoDupeRangeBundleCount(arg0)
	if (-1.000000 - CoD.perController[arg0].keysToNotShowYet) or not registerVal8 then
	end
	Engine.SetModelValue(registerVal7, -1.000000)
	registerVal7 = Engine.CreateModel(registerVal5, "meleeWeaponNoDupesBundles")
	registerVal8 = Engine.IsLootReady(arg0)
	registerVal8 = CoD.BlackMarketUtility.GetCurrentNoDupeMeleeBundleCount(arg0)
	if (-1.000000 - CoD.perController[arg0].keysToNotShowYet) or not registerVal8 then
	end
	Engine.SetModelValue(registerVal7, -1.000000)
	registerVal7 = Engine.CreateModel(registerVal5, "genericRewardBundles")
	Engine.SetModelValue(registerVal7, -1.000000)
	registerVal7 = Engine.CreateModel(registerVal5, "sixPackCommonBundles")
	registerVal8 = Engine.IsLootReady(arg0)
	registerVal8 = CoD.BlackMarketUtility.GetCurrentSixPackCommonBundleCount(arg0)
	if (-1.000000 - CoD.perController[arg0].keysToNotShowYet) or not registerVal8 then
	end
	Engine.SetModelValue(registerVal7, -1.000000)
	registerVal7 = Engine.CreateModel(registerVal5, "dailyDoubleRareBundles")
	registerVal8 = Engine.IsLootReady(arg0)
	registerVal8 = CoD.BlackMarketUtility.GetCurrentDailyDoubleRareBundleCount(arg0)
	if (-1.000000 - CoD.perController[arg0].keysToNotShowYet) or not registerVal8 then
	end
	Engine.SetModelValue(registerVal7, -1.000000)
	registerVal7 = Engine.CreateModel(registerVal5, "hundredBundles")
	registerVal8 = Engine.IsLootReady(arg0)
	registerVal8 = CoD.BlackMarketUtility.GetCurrentHundredBundleCount(arg0)
	if (-1.000000 - CoD.perController[arg0].keysToNotShowYet) or not registerVal8 then
	end
	Engine.SetModelValue(registerVal7, -1.000000)
	registerVal7 = Engine.CreateModel(registerVal5, "rareBundle10for5s")
	registerVal8 = Engine.IsLootReady(arg0)
	registerVal8 = CoD.BlackMarketUtility.GetCurrentRareBundle10for5Count(arg0)
	if (-1.000000 - CoD.perController[arg0].keysToNotShowYet) or not registerVal8 then
	end
	Engine.SetModelValue(registerVal7, -1.000000)
	registerVal7 = Engine.CreateModel(registerVal5, "bundleExperimentRareBundles")
	registerVal8 = Engine.IsLootReady(arg0)
	registerVal8 = CoD.BlackMarketUtility.GetCurrentBundleExperimentRareBundleCount(arg0)
	if (-1.000000 - CoD.perController[arg0].keysToNotShowYet) or not registerVal8 then
	end
	Engine.SetModelValue(registerVal7, -1.000000)
	registerVal7 = Engine.CreateModel(registerVal5, "noDupesRareBundles")
	registerVal8 = Engine.IsLootReady(arg0)
	registerVal8 = CoD.BlackMarketUtility.GetCurrentNoDupesBundleRareBundleCount(arg0)
	if (-1.000000 - CoD.perController[arg0].keysToNotShowYet) or not registerVal8 then
	end
	Engine.SetModelValue(registerVal7, -1.000000)
	registerVal7 = Engine.CreateModel(registerVal5, "codeBundleRareBundles")
	registerVal8 = Engine.IsLootReady(arg0)
	registerVal8 = CoD.BlackMarketUtility.GetCurrentCodeBundleRareBundleCount(arg0)
	if (-1.000000 - CoD.perController[arg0].keysToNotShowYet) or not registerVal8 then
	end
	Engine.SetModelValue(registerVal7, -1.000000)
	registerVal7 = Engine.CreateModel(registerVal5, "weapon3XBundles")
	registerVal8 = Engine.IsLootReady(arg0)
	registerVal8 = CoD.BlackMarketUtility.GetCurrentWeapon3XBundleCount(arg0)
	if (-1.000000 - CoD.perController[arg0].keysToNotShowYet) or not registerVal8 then
	end
	Engine.SetModelValue(registerVal7, -1.000000)
	registerVal7 = Engine.CreateModel(registerVal5, "limitedEditionCamoBundles")
	registerVal8 = Engine.IsLootReady(arg0)
	registerVal8 = CoD.BlackMarketUtility.GetCurrentLimitedEditionCamoBundleCount(arg0)
	if (-1.000000 - CoD.perController[arg0].keysToNotShowYet) or not registerVal8 then
	end
	Engine.SetModelValue(registerVal7, -1.000000)
	registerVal7 = Engine.CreateModel(registerVal5, "gunMeterProgress")
	Engine.SetModelValue(registerVal7, CoD.BlackMarketUtility.GetGunMeterProgress(arg0))
	registerVal7 = Engine.CreateModel(registerVal5, "rare20Bundles")
	registerVal8 = Engine.IsLootReady(arg0)
	registerVal8 = CoD.BlackMarketUtility.GetCurrentRare20BundleCount(arg0)
	if (-1.000000 - CoD.perController[arg0].keysToNotShowYet) or not registerVal8 then
	end
	Engine.SetModelValue(registerVal7, -1.000000)
	registerVal7 = Engine.CreateModel(registerVal5, "rare15Bundles")
	registerVal8 = Engine.IsLootReady(arg0)
	registerVal8 = CoD.BlackMarketUtility.GetCurrentRare15BundleCount(arg0)
	if (-1.000000 - CoD.perController[arg0].keysToNotShowYet) or not registerVal8 then
	end
	Engine.SetModelValue(registerVal7, -1.000000)
	registerVal7 = Engine.CreateModel(registerVal5, "outfit3Bundles")
	registerVal8 = Engine.IsLootReady(arg0)
	registerVal8 = CoD.BlackMarketUtility.GetCurrentOutfit3BundleCount(arg0)
	if (-1.000000 - CoD.perController[arg0].keysToNotShowYet) or not registerVal8 then
	end
	Engine.SetModelValue(registerVal7, -1.000000)
	registerVal7 = Engine.CreateModel(registerVal5, "rare20LDBundles")
	registerVal8 = Engine.IsLootReady(arg0)
	registerVal8 = CoD.BlackMarketUtility.GetCurrentRare20LDBundleCount(arg0)
	if (-1.000000 - CoD.perController[arg0].keysToNotShowYet) or not registerVal8 then
	end
	Engine.SetModelValue(registerVal7, -1.000000)
	return registerVal5
end

registerVal1.getModel = __FUNC_55441_
DataSources.CryptoKeyProgress = registerVal1
registerVal1 = {}
local function __FUNC_567FA_(arg0, arg1, arg2)
	arg1.rewardsList = {}
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.CreateModel(registerVal4, "Rewards")
	registerVal4 = CoD.GetPlayerStats(arg0)
	if not registerVal4 then
		return 
	end
	local registerVal6 = Engine.GetSelfGamertag(arg0)
	for index7=0.000000, 3.000000, 1.000000 do
		local registerVal11 = registerVal4.AfterActionReportStats.playerStats[index7].name:get()
		if registerVal11 == registerVal6 then
		end
	end
	if index7 == -1.000000 then
		return 
	end
	local registerVal7 = registerVal4.AfterActionReportStats.playerStats[index7].curRank:get()
	local registerVal8 = registerVal4.AfterActionReportStats.playerStats[index7].prvRank:get()
	{}[0.000000] = {}
	{}[0.000000].itemName = "Promotion"
	local registerVal12 = Engine.GetRankIcon(registerVal7)
	{}[0.000000].itemImage = (registerVal12 .. "_lrg")
	{}[0.000000].itemDesc = "Congratulations, you have been promoted!"
	{}[0.000000].itemDesc2 = ""
	{}[(0.000000 + 1.000000)] = {}
	local registerVal13 = tostring((registerVal7 - registerVal8))
	{}[(0.000000 + 1.000000)].itemName = ("Tech Spec - " .. registerVal13 .. "X")
	{}[(0.000000 + 1.000000)].itemImage = "t7_menu_tech_spec_token"
	{}[(0.000000 + 1.000000)].itemDesc = "Unlock the weapon or gadget of your choice with this Tech spec."
	registerVal13 = tostring((registerVal7 + 1.000000))
	{}[(0.000000 + 1.000000)].itemDesc2 = ("Promotion award for reaching level " .. registerVal13 .. ".")
	registerVal12 = Engine.TableFindRows(CoD.statsTable, 10.000000, tostring((registerVal7 + 1.000000)))
	if registerVal8 < registerVal7 and registerVal12 ~= nil then
		local registerVal16 = Engine.Localize(Engine.TableLookupGetColumnValueForRow(CoD.statsTable, registerVal12[1.000000], 3.000000))
		local registerVal17 = Engine.TableLookupGetColumnValueForRow(CoD.statsTable, registerVal12[1.000000], 6.000000)
		{}[((0.000000 + 1.000000) + 1.000000)] = {}
		{}[((0.000000 + 1.000000) + 1.000000)].itemName = (registerVal16 .. " Blueprint")
		{}[((0.000000 + 1.000000) + 1.000000)].itemImage = (registerVal17 .. "_big")
		{}[((0.000000 + 1.000000) + 1.000000)].itemDesc = "This weapon is now available for unlock the Armory."
		local registerVal20 = tostring(registerVal7)
		{}[((0.000000 + 1.000000) + 1.000000)].itemDesc2 = ("Promotion award for reaching level " .. registerVal20 .. ".")
	end
	registerVal11 = registerVal4.AfterActionReportStats.matchWon:get()
	if registerVal11 ~= 0.000000 then
		{}[(((0.000000 + 1.000000) + 1.000000) + 1.000000)] = {}
		{}[(((0.000000 + 1.000000) + 1.000000) + 1.000000)].itemName = "Mod Spec"
		{}[(((0.000000 + 1.000000) + 1.000000) + 1.000000)].itemImage = "t7_menu_mod_spec_token"
		{}[(((0.000000 + 1.000000) + 1.000000) + 1.000000)].itemDesc = "Upgrade a weapon or gadget of your choice with this Mod Spec."
		{}[(((0.000000 + 1.000000) + 1.000000) + 1.000000)].itemDesc2 = "Awarded for completing your Mission."
		registerVal12 = Engine.CreateModel(registerVal3, "matchResult")
		Engine.SetModelValue(registerVal12, Engine.Localize("MENU_MISSION_SUCCESS_CAPS"))
	else
		registerVal12 = Engine.CreateModel(registerVal3, "matchResult")
		Engine.SetModelValue(registerVal12, Engine.Localize("MENU_MISSION_FAILED"))
	end
	for index12=0.000000, #Engine.Localize("MENU_MISSION_FAILED"), 1.000000 do
		if {}[index12] ~= nil then
			local registerVal21 = Engine.CreateModel(registerVal3, index12)
			local registerVal23 = Engine.CreateModel(registerVal21, "rewardName")
			Engine.SetModelValue(registerVal23, ({}[index12].itemName .. ""))
			registerVal23 = Engine.CreateModel(registerVal21, "rewardImage")
			Engine.SetModelValue(registerVal23, ({}[index12].itemImage .. ""))
			registerVal23 = Engine.CreateModel(registerVal21, "rewardDesc1")
			Engine.SetModelValue(registerVal23, ({}[index12].itemDesc .. ""))
			registerVal23 = Engine.CreateModel(registerVal21, "rewardDesc2")
			Engine.SetModelValue(registerVal23, ({}[index12].itemDesc2 .. ""))
			table.insert(arg1.rewardsList, registerVal21)
		end
	end
end

registerVal1.prepare = __FUNC_567FA_
local function __FUNC_5733A_(arg0)
	return #arg0.rewardsList
end

registerVal1.getCount = __FUNC_5733A_
local function __FUNC_5738D_(arg0, arg1, arg2)
	return arg1.rewardsList[arg2]
end

registerVal1.getItem = __FUNC_5738D_
DataSources.Rewards = registerVal1
registerVal1 = {}
local function __FUNC_573E9_(arg0, arg1, arg2)
	arg1.AARStatsList = {}
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.CreateModel(registerVal4, "AARStats")
	registerVal4 = CoD.GetPlayerStats(arg0)
	local registerVal7 = Dvar.com_maxclients:get()
	for index6=0.000000, (registerVal7 - 1.000000), 1.000000 do
		local registerVal10 = registerVal4.AfterActionReportStats.playerStats[index6].isActive:get()
		if registerVal10 == 1.000000 then
			{}[index6] = {}
			local registerVal11 = registerVal4.AfterActionReportStats.playerStats[index6].name:get()
			{}[index6].name = registerVal11
			registerVal11 = registerVal4.AfterActionReportStats.playerStats[index6].curRank:get()
			{}[index6].rank = (registerVal11 + 1.000000)
			registerVal11 = Engine.GetRankIcon(registerVal4.AfterActionReportStats.playerStats[index6].curRank:get())
			{}[index6].rankIcon = registerVal11
			registerVal11 = registerVal4.AfterActionReportStats.playerStats[index6].kills:get()
			{}[index6].kills = registerVal11
			registerVal11 = registerVal4.AfterActionReportStats.playerStats[index6].assists:get()
			{}[index6].assists = registerVal11
			{}[index6].medalName1 = ""
			{}[index6].medalImage1 = ""
			{}[index6].medalName2 = ""
			{}[index6].medalImage2 = ""
			{}[index6].medalName3 = ""
			{}[index6].medalImage3 = ""
			registerVal10 = registerVal4.AfterActionReportStats.playerStats[index6].medals[0.000000]:get()
			if registerVal10 == index6 then
				{}[index6].medalName1 = "Kill Master"
				{}[index6].medalImage1 = "hud_medals_default"
			end
			registerVal10 = registerVal4.AfterActionReportStats.playerStats[index6].medals[1.000000]:get()
			if registerVal10 == index6 then
				{}[index6].medalName2 = "Assist Master"
				{}[index6].medalImage2 = "hud_medals_revenge"
			end
			registerVal10 = registerVal4.AfterActionReportStats.playerStats[index6].medals[2.000000]:get()
			if registerVal10 == index6 then
				{}[index6].medalName3 = "Revive Master"
				{}[index6].medalImage3 = "hud_medals_afterlife"
			end
		end
	end
	local registerVal6, registerVal7, registerVal8 = pairs({})
	for index9,value10 in registerVal6, registerVal7, registerVal8 do
		local registerVal22 = Engine.CreateModel(registerVal3, index9)
		local registerVal24 = Engine.CreateModel(registerVal22, "playerName")
		Engine.SetModelValue(registerVal24, (value10.name .. ""))
		registerVal24 = Engine.CreateModel(registerVal22, "playerRank")
		Engine.SetModelValue(registerVal24, (value10.rank .. ""))
		registerVal24 = Engine.CreateModel(registerVal22, "playerRankIcon")
		Engine.SetModelValue(registerVal24, (value10.rankIcon .. ""))
		registerVal24 = Engine.CreateModel(registerVal22, "playerKills")
		Engine.SetModelValue(registerVal24, (value10.kills .. ""))
		registerVal24 = Engine.CreateModel(registerVal22, "playerAssists")
		Engine.SetModelValue(registerVal24, (value10.assists .. ""))
		registerVal24 = Engine.CreateModel(registerVal22, "medalName1")
		Engine.SetModelValue(registerVal24, (value10.medalName1 .. ""))
		registerVal24 = Engine.CreateModel(registerVal22, "medalImage1")
		Engine.SetModelValue(registerVal24, (value10.medalImage1 .. ""))
		registerVal24 = Engine.CreateModel(registerVal22, "medalName2")
		Engine.SetModelValue(registerVal24, (value10.medalName2 .. ""))
		registerVal24 = Engine.CreateModel(registerVal22, "medalImage2")
		Engine.SetModelValue(registerVal24, (value10.medalImage2 .. ""))
		registerVal24 = Engine.CreateModel(registerVal22, "medalName3")
		Engine.SetModelValue(registerVal24, (value10.medalName3 .. ""))
		registerVal24 = Engine.CreateModel(registerVal22, "medalImage3")
		Engine.SetModelValue(registerVal24, (value10.medalImage3 .. ""))
		table.insert(arg1.AARStatsList, registerVal22)
	end
end

registerVal1.prepare = __FUNC_573E9_
local function __FUNC_57E7D_(arg0)
	return #arg0.AARStatsList
end

registerVal1.getCount = __FUNC_57E7D_
local function __FUNC_57ED2_(arg0, arg1, arg2)
	return arg1.AARStatsList[arg2]
end

registerVal1.getItem = __FUNC_57ED2_
DataSources.AARStats = registerVal1
registerVal1 = {}
local function __FUNC_57F2E_(arg0, arg1, arg2)
	local registerVal6 = Engine.GetCurrentGameType()
	local registerVal3 = Engine.TableLookupColumnNumForValue(CoD.scoreInfoTable, 0.000000, (registerVal6 .. " XP"))
	local registerVal4 = Engine.GetRecentMedals(arg0, registerVal3)
	arg1.count = 0.000000
	if registerVal4 and 0.000000 < #arg0 then
		registerVal6 = Engine.GetModelForController(arg0)
		local registerVal5 = Engine.CreateModel(registerVal6, "aarMedalsList")
		table.sort(registerVal4, CoD.AARUtility.SortMedals)
		registerVal6, registerVal7, registerVal8 = ipairs(registerVal4)
		for index9,value10 in registerVal6, registerVal7, registerVal8 do
			local registerVal11 = Engine.CreateModel(registerVal5, (index9 .. ""))
			local registerVal14 = tonumber(Engine.TableLookupGetColumnValueForRow(CoD.scoreInfoTable, value10.row, registerVal3))
			local registerVal16 = Engine.CreateModel(registerVal11, "medalIndex")
			Engine.SetModelValue(registerVal16, value10.row)
			registerVal16 = Engine.CreateModel(registerVal11, "medalTimesObtained")
			Engine.SetModelValue(registerVal16, value10.value)
			local registerVal17 = Engine.GetModelForController(arg0)
			registerVal16 = Engine.GetModel(registerVal17, "aarStats.xpScale")
			if registerVal16 then
				registerVal17 = Engine.GetModelValue(registerVal16)
			end
			if 1.000000 < value10.value then
				local registerVal18 = Engine.CreateModel(registerVal11, "medalXP")
				local registerVal22 = tonumber(value10.value)
				local registerVal20 = Engine.Localize("MPUI_N_XP", ((registerVal14 * registerVal17) * registerVal22))
				Engine.SetModelValue(registerVal18, ("+" .. registerVal20))
			else
				registerVal18 = Engine.CreateModel(registerVal11, "medalXP")
				registerVal20 = Engine.Localize("MPUI_N_XP", (registerVal14 * registerVal17))
				Engine.SetModelValue(registerVal18, ("+" .. registerVal20))
			end
		end
		if registerVal4 and 0.000000 < #registerVal6 then
			arg1.count = ##registerVal6
		end
	end
end

registerVal1.prepare = __FUNC_57F2E_
local function __FUNC_584DE_(arg0)
	return arg0.count
end

registerVal1.getCount = __FUNC_584DE_
local function __FUNC_58527_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetModelForController(arg0)
	return Engine.GetModel(registerVal4, ("aarMedalsList" .. "." .. arg2))
end

registerVal1.getItem = __FUNC_58527_
DataSources.AARMedalsList = registerVal1
registerVal1 = {}
local function __FUNC_585F3_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "CombatRecordDeadliestCybercore")
	registerVal2 = CoD.GetCombatRecordStats(arg0)
	local registerVal7 = Engine.Localize("MENU_NONE")
	for index8=0.000000, 255.000000, 1.000000 do
		local registerVal12 = Engine.GetItemAllocationCost(index8, CoD.GetCombatRecordMode())
		if 0.000000 <= registerVal12 then
			registerVal12 = Engine.GetLoadoutSlotForItem(index8, CoD.GetCombatRecordMode())
			if registerVal12 ~= "cybercom_ability1" and registerVal12 == "cybercom_ability2" or registerVal12 == "cybercom_ability3" then
				local registerVal13 = CoD.GetCombatRecordStatForPath(registerVal2, ("ItemStats." .. index8 .. ".stats.kills"))
				local registerVal14 = CoD.GetCombatRecordStatForPath(registerVal2, ("ItemStats." .. index8 .. ".stats.assists"))
				if registerVal13 < registerVal14 then
				end
				if 0.000000 < registerVal14 then
					local registerVal16 = Engine.GetItemName(index8, CoD.GetCombatRecordMode())
				end
			end
		end
	end
	local registerVal9 = Engine.CreateModel(registerVal1, "itemIndex")
	Engine.SetModelValue(registerVal9, index8)
	registerVal9 = Engine.CreateModel(registerVal1, "itemName")
	Engine.SetModelValue(registerVal9, registerVal16)
	if registerVal14 <= registerVal13 then
		registerVal9 = Engine.CreateModel(registerVal1, "numKills")
		Engine.SetModelValue(registerVal9, registerVal13)
	else
		registerVal9 = Engine.CreateModel(registerVal1, "numKills")
		Engine.SetModelValue(registerVal9, registerVal14)
	end
	return registerVal1
end

registerVal1.getModel = __FUNC_585F3_
DataSources.CombatRecordDeadliestCybercore = registerVal1
registerVal1 = {}
local function __FUNC_58AE0_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "CombatRecordBestScoreMap")
	registerVal2 = CoD.GetCombatRecordStats(arg0)
	local registerVal5, registerVal6, registerVal7 = pairs(CoD.mapsTable)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		if value9.campaign_mode ~= Enum.CampaignMode.CAMPAIGNMODE_DEFAULT then
		end
		local registerVal11 = Dvar.ui_doa_unlocked:get()
		if index8 == "cp_doa_bo3" and registerVal11 then
			value9.isSubLevel = false
		end
		registerVal11 = registerVal2.PlayerStatsByMap[index8].highestStats.SCORE:get()
		if value9.session_mode == Enum.eModes.MODE_CAMPAIGN and true and value9.dlc_pack ~= -1.000000 and value9.isSubLevel == false and 0.000000 < registerVal11 then
		end
	end
	if registerVal11 == 0.000000 then
		registerVal5 = Engine.Localize("MENU_NONE")
	end
	registerVal6 = Engine.CreateModel(registerVal1, "highestScore")
	Engine.SetModelValue(registerVal6, tostring("--"))
	registerVal6 = Engine.CreateModel(registerVal1, "mapName")
	Engine.SetModelValue(registerVal6, registerVal5)
	return registerVal1
end

registerVal1.getModel = __FUNC_58AE0_
DataSources.CombatRecordBestScoreMap = registerVal1
registerVal1 = {}
local function __FUNC_58FB5_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "CombatRecordDeadliestEquipment")
	registerVal2 = CoD.GetCombatRecordStats(arg0)
	local registerVal5 = Engine.Localize("MENU_NONE")
	for index6=0.000000, 255.000000, 1.000000 do
		local registerVal10 = Engine.GetItemAllocationCost(index6, CoD.GetCombatRecordMode())
		if 0.000000 <= registerVal10 then
			local registerVal11 = Engine.GetLoadoutSlotForItem(index6, CoD.GetCombatRecordMode())
			if registerVal11 == "primarygadget" then
				local registerVal12 = CoD.GetCombatRecordStatForPath(registerVal2, ("ItemStats." .. index6 .. ".stats.kills"))
			else
				if registerVal11 == "secondarygadget" then
					registerVal12 = CoD.GetCombatRecordStatForPath(registerVal2, ("ItemStats." .. index6 .. ".stats.combatRecordStat"))
				end
			end
			if registerVal12 and 0.000000 < registerVal12 then
				registerVal12 = Engine.GetItemName(index6, CoD.GetCombatRecordMode())
			end
		end
	end
	local registerVal7 = Engine.CreateModel(registerVal1, "itemIndex")
	Engine.SetModelValue(registerVal7, index6)
	registerVal7 = Engine.CreateModel(registerVal1, "numKills")
	Engine.SetModelValue(registerVal7, registerVal12)
	registerVal7 = Engine.CreateModel(registerVal1, "itemName")
	Engine.SetModelValue(registerVal7, registerVal12)
	return registerVal1
end

registerVal1.getModel = __FUNC_58FB5_
DataSources.CombatRecordDeadliestEquipment = registerVal1
registerVal1 = {}
local function __FUNC_5943C_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "CombatRecordDeadliestScorestreak")
	registerVal2 = CoD.GetCombatRecordStats(arg0)
	local registerVal5 = Engine.Localize("MENU_NONE")
	for index6=0.000000, 255.000000, 1.000000 do
		local registerVal10 = Engine.GetItemAllocationCost(index6, CoD.GetCombatRecordMode())
		registerVal10 = Engine.GetItemGroup(index6, CoD.GetCombatRecordMode())
		local registerVal11 = CoD.GetCombatRecordStatForPath(registerVal2, ("ItemStats." .. index6 .. ".stats.kills"))
		if 0.000000 <= registerVal10 and registerVal10 == "killstreak" and 0.000000 < registerVal11 then
			local registerVal12 = Engine.GetItemName(index6, CoD.GetCombatRecordMode())
		end
	end
	local registerVal7 = Engine.CreateModel(registerVal1, "itemIndex")
	Engine.SetModelValue(registerVal7, index6)
	registerVal7 = Engine.CreateModel(registerVal1, "numKills")
	Engine.SetModelValue(registerVal7, registerVal11)
	registerVal7 = Engine.CreateModel(registerVal1, "itemName")
	Engine.SetModelValue(registerVal7, registerVal12)
	return registerVal1
end

registerVal1.getModel = __FUNC_5943C_
DataSources.CombatRecordDeadliestScorestreak = registerVal1
registerVal1 = {}
local function __FUNC_59838_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "CombatRecordDeadliestWeapon")
	registerVal2 = CoD.GetCombatRecordStats(arg0)
	local registerVal5 = Engine.Localize("MENU_NONE")
	for index6=0.000000, 255.000000, 1.000000 do
		local registerVal10 = Engine.GetItemAllocationCost(index6, CoD.GetCombatRecordMode())
		if registerVal10 < -1.000000 or 0.000000 <= registerVal10 then
			local registerVal11 = Engine.GetLoadoutSlotForItem(index6, CoD.GetCombatRecordMode())
			if registerVal11 == "primary" or registerVal11 == "secondary" then
				local registerVal12 = CoD.GetCombatRecordStatForPath(registerVal2, ("ItemStats." .. index6 .. ".stats.kills"))
				if 0.000000 < registerVal12 then
					local registerVal13 = Engine.GetItemName(index6, CoD.GetCombatRecordMode())
				end
			end
		end
	end
	local registerVal7 = Engine.CreateModel(registerVal1, "itemIndex")
	Engine.SetModelValue(registerVal7, index6)
	registerVal7 = Engine.CreateModel(registerVal1, "numKills")
	Engine.SetModelValue(registerVal7, registerVal12)
	registerVal7 = Engine.CreateModel(registerVal1, "itemName")
	Engine.SetModelValue(registerVal7, registerVal13)
	return registerVal1
end

registerVal1.getModel = __FUNC_59838_
DataSources.CombatRecordDeadliestWeapon = registerVal1
registerVal1 = {}
local function __FUNC_59C5D_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "CombatRecordMostUsedBubblegumBuff")
	registerVal2 = CoD.GetCombatRecordStats(arg0)
	local registerVal5 = Engine.Localize("MENU_NONE")
	for index6=0.000000, 255.000000, 1.000000 do
		local registerVal10 = Engine.GetLoadoutSlotForItem(index6, CoD.GetCombatRecordMode())
		local registerVal11 = CoD.GetCombatRecordStatForPath(registerVal2, ("ItemStats." .. index6 .. ".stats.used"))
		if registerVal10 == "equippedbubblegumpack" and 0.000000 < registerVal11 then
			local registerVal12 = Engine.GetItemName(index6, CoD.GetCombatRecordMode())
		end
	end
	local registerVal7 = Engine.CreateModel(registerVal1, "itemIndex")
	Engine.SetModelValue(registerVal7, index6)
	registerVal7 = Engine.CreateModel(registerVal1, "itemName")
	Engine.SetModelValue(registerVal7, registerVal12)
	registerVal7 = Engine.CreateModel(registerVal1, "numUsed")
	Engine.SetModelValue(registerVal7, registerVal11)
	return registerVal1
end

registerVal1.getModel = __FUNC_59C5D_
DataSources.CombatRecordMostUsedBubblegumBuff = registerVal1
registerVal1 = {}
local function __FUNC_5A018_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "CombatRecordZMHighestRound")
	registerVal2 = CoD.GetCombatRecordStats(arg0)
	local registerVal4 = Engine.Localize("MENU_NONE")
	local registerVal5, registerVal6, registerVal7 = pairs(CoD.mapsTable)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal10 = registerVal2.PlayerStatsByMap[index8].stats.HIGHEST_ROUND_REACHED.statValue:get()
		if value9.session_mode == Enum.eModes.MODE_ZOMBIES and registerVal2.PlayerStatsByMap and registerVal2.PlayerStatsByMap[index8] and 0.000000 < registerVal10 then
		end
	end
	registerVal6 = Engine.CreateModel(registerVal1, "highestRound")
	Engine.SetModelValue(registerVal6, registerVal10)
	registerVal6 = Engine.CreateModel(registerVal1, "mapName")
	Engine.SetModelValue(registerVal6, index8)
	return registerVal1
end

registerVal1.getModel = __FUNC_5A018_
DataSources.CombatRecordZMHighestRound = registerVal1
registerVal1 = {}
local function __FUNC_5A3BF_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "CombatRecordTotalAccoladesCompleted")
	registerVal2 = CoD.GetCombatRecordStats(arg0)
	local function __FUNC_5A7BF_(arg0, arg1)
		if CoD.mapsTable[arg0].unique_id >= CoD.mapsTable[arg1].unique_id then
		end
		return true
	end

	local registerVal5, registerVal6, registerVal7 = LUI.IterateTableBySortedKeys(CoD.mapsTable, __FUNC_5A7BF_, nil)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		if value9.campaign_mode ~= Enum.CampaignMode.CAMPAIGNMODE_DEFAULT then
		end
		local registerVal11 = Dvar.ui_doa_unlocked:get()
		if index8 == "cp_doa_bo3" and registerVal11 then
			value9.isSubLevel = false
		end
		if value9.session_mode == Enum.eModes.MODE_CAMPAIGN and true and value9.dlc_pack ~= -1.000000 and value9.isSubLevel == false then
			registerVal11, registerVal12 = GetAccoladesXOfY(arg0, index8, true)
		end
	end
	registerVal6 = Engine.CreateModel(registerVal1, "accoladesCompleted")
	Engine.SetModelValue(registerVal6, (0.000000 + registerVal11))
	return registerVal1
end

registerVal1.getModel = __FUNC_5A3BF_
DataSources.CombatRecordTotalAccoladesCompleted = registerVal1
registerVal1 = {}
local function __FUNC_5A87F_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "CombatRecordTotalCollectiblesFound")
	registerVal2 = CoD.GetCombatRecordStats(arg0)
	local function __FUNC_5AC80_(arg0, arg1)
		if CoD.mapsTable[arg0].unique_id >= CoD.mapsTable[arg1].unique_id then
		end
		return true
	end

	local registerVal5, registerVal6, registerVal7 = LUI.IterateTableBySortedKeys(CoD.mapsTable, __FUNC_5AC80_, nil)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		if value9.campaign_mode ~= Enum.CampaignMode.CAMPAIGNMODE_DEFAULT then
		end
		local registerVal11 = Dvar.ui_doa_unlocked:get()
		if index8 == "cp_doa_bo3" and registerVal11 then
			value9.isSubLevel = false
		end
		if value9.session_mode == Enum.eModes.MODE_CAMPAIGN and true and value9.dlc_pack ~= -1.000000 and value9.isSubLevel == false then
			registerVal11, registerVal12 = GetCollectiblesXOfY(arg0, index8, true)
		end
	end
	registerVal6 = Engine.CreateModel(registerVal1, "collectiblesFound")
	Engine.SetModelValue(registerVal6, (0.000000 + registerVal11))
	return registerVal1
end

registerVal1.getModel = __FUNC_5A87F_
DataSources.CombatRecordTotalCollectiblesFound = registerVal1
registerVal1 = {}
local function __FUNC_5AD43_(arg0, arg1, arg2)
	arg1.items = {}
	local registerVal5 = Engine.GetModelForController(arg0)
	local registerVal6 = Engine.CreateModel(registerVal5, "CombatRecordCollectiblesList")
	arg1.rootModel = registerVal6
	local function __FUNC_5B39E_(arg0, arg1)
		if CoD.mapsTable[arg0].unique_id >= CoD.mapsTable[arg1].unique_id then
		end
		return true
	end

	local registerVal8, registerVal9, registerVal10 = LUI.IterateTableBySortedKeys(CoD.mapsTable, __FUNC_5B39E_, nil)
	for index11,value12 in registerVal8, registerVal9, registerVal10 do
		if value12.campaign_mode ~= Enum.CampaignMode.CAMPAIGNMODE_DEFAULT then
		end
		local registerVal14 = Dvar.ui_doa_unlocked:get()
		if index11 == "cp_doa_bo3" and registerVal14 then
			value12.isSubLevel = false
		end
		if value12.session_mode == Enum.eModes.MODE_CAMPAIGN and true and value12.dlc_pack ~= -1.000000 and value12.isSubLevel == false then
			registerVal14, registerVal15 = GetCollectiblesXOfY(arg0, index11, true)
			local registerVal16 = Engine.CreateModel(registerVal6, (0.000000 + 1.000000))
			local registerVal17 = CoD.GetCombatRecordStats(arg0)
			registerVal17 = registerVal17.PlayerStatsByMap[index11].hasBeenCompleted:get()
			if registerVal17 == 1.000000 or 0.000000 < registerVal14 then
				local registerVal18 = Engine.CreateModel(registerVal16, "name")
				Engine.SetModelValue(registerVal18, value12.mapName)
				registerVal18 = Engine.CreateModel(registerVal16, "stat")
				Engine.SetModelValue(registerVal18, Engine.Localize("MENU_LISTBOX_POS", registerVal14, registerVal15))
				registerVal18 = Engine.CreateModel(registerVal16, "id")
				Engine.SetModelValue(registerVal18, index11)
			else
				registerVal18 = Engine.CreateModel(registerVal16, "name")
				Engine.SetModelValue(registerVal18, value12.mapName)
				registerVal18 = Engine.CreateModel(registerVal16, "stat")
				Engine.SetModelValue(registerVal18, "--")
			end
			table.insert(arg1.items, registerVal16)
		end
	end
end

registerVal1.prepare = __FUNC_5AD43_
local function __FUNC_5B45F_(arg0)
	return #arg0.items
end

registerVal1.getCount = __FUNC_5B45F_
local function __FUNC_5B4AB_(arg0, arg1, arg2)
	return arg1.items[arg2]
end

registerVal1.getItem = __FUNC_5B4AB_
local function __FUNC_5B4FF_(arg0)
	if arg0.rootModel then
		Engine.UnsubscribeAndFreeModel(arg0.rootModel)
		arg0.rootModel = nil
	end
end

registerVal1.cleanup = __FUNC_5B4FF_
DataSources.CombatRecordCollectiblesList = registerVal1
local registerVal2 = {}
local function __FUNC_5B5A5_(arg0, arg1, arg2)
	arg1.items = {}
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal3, "CombatRecordEquipmentList")
	arg1.rootModel = registerVal4
	local registerVal5 = CoD.GetCombatRecordStats(arg0)
	local registerVal6 = CoD.GetCombatRecordComparisonStats(arg0)
	for index7=0.000000, 255.000000, 1.000000 do
		local registerVal11 = Engine.GetItemAllocationCost(index7, CoD.GetCombatRecordMode())
		if 0.000000 <= registerVal11 then
			registerVal11 = Engine.GetLoadoutSlotForItem(index7, CoD.GetCombatRecordMode())
			if registerVal11 == "primarygadget" or registerVal11 == "secondarygadget" then
				local registerVal12 = Engine.CreateModel(registerVal4, index7)
				local registerVal13 = Engine.GetItemName(index7, CoD.GetCombatRecordMode())
				local registerVal15 = Engine.CreateModel(registerVal12, "name")
				Engine.SetModelValue(registerVal15, registerVal13)
				if registerVal11 == "primarygadget" then
				else
				end
				local registerVal18 = CoD.GetCombatRecordStatForPath(registerVal5, ("ItemStats." .. index7 .. ".stats.combatRecordStat"))
				if registerVal6 then
					local registerVal19 = CoD.GetCombatRecordStatForPath(registerVal6, ("ItemStats." .. index7 .. ".stats.combatRecordStat"))
				end
				local registerVal20 = Engine.CreateModel(registerVal12, "itemIndex")
				Engine.SetModelValue(registerVal20, index7)
				registerVal20 = Engine.CreateModel(registerVal12, "stat")
				Engine.SetModelValue(registerVal20, registerVal18)
				registerVal20 = Engine.CreateModel(registerVal12, "statComparison")
				Engine.SetModelValue(registerVal20, registerVal19)
				registerVal20 = Engine.CreateModel(registerVal12, "lethalAlpha")
				Engine.SetModelValue(registerVal20, 0.000000)
				registerVal20 = Engine.CreateModel(registerVal12, "tacticalAlpha")
				Engine.SetModelValue(registerVal20, (1.000000 - 0.000000))
				registerVal20 = Engine.CreateModel(registerVal12, "statLabel")
				Engine.SetModelValue(registerVal20, (registerVal13 .. "_STAT_CAPS"))
				table.insert(arg1.items, registerVal12)
			end
		end
	end
	local function __FUNC_5BC49_(arg0, arg1)
		local registerVal2 = Engine.GetModelValue(Engine.GetModel(arg0, "stat"))
		local registerVal3 = Engine.GetModelValue(Engine.GetModel(arg1, "stat"))
		if registerVal2 == registerVal3 then
			local registerVal4 = Engine.Localize(Engine.GetModelValue(Engine.GetModel(arg0, "name")))
			local registerVal5 = Engine.Localize(Engine.GetModelValue(Engine.GetModel(arg1, "name")))
			if registerVal4 >= registerVal5 then
			end
			return true
		end
		if registerVal3 >= registerVal2 then
		end
		return true
	end

	table.sort(arg1.items, __FUNC_5BC49_)
end

registerVal2.prepare = __FUNC_5B5A5_
local function __FUNC_5BDF3_(arg0)
	return #arg0.items
end

registerVal2.getCount = __FUNC_5BDF3_
local function __FUNC_5BE3F_(arg0, arg1, arg2)
	return arg1.items[arg2]
end

registerVal2.getItem = __FUNC_5BE3F_
local function __FUNC_5BE93_(arg0)
	if arg0.rootModel then
		Engine.UnsubscribeAndFreeModel(arg0.rootModel)
		arg0.rootModel = nil
	end
end

registerVal2.cleanup = __FUNC_5BE93_
DataSources["CombatRecordEquipmentList"] = registerVal2
registerVal2 = {}
local function __FUNC_5BF39_(arg0)
	if not CoD.CombatRecordXUID then
		return nil
	end
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "CombatRecordProfileSnapshot")
	registerVal2, registerVal3, registerVal4 = Engine.GetCombatRecordScreenshotInfo(arg0, CoD.CombatRecordXUID)
	local registerVal5 = Engine.CreateModel(registerVal1, "fileId")
	Engine.SetModelValue(registerVal5, registerVal2)
	local registerVal6 = Engine.CreateModel(registerVal1, "fileSize")
	Engine.SetModelValue(registerVal6, registerVal3)
	local registerVal7 = Engine.CreateModel(registerVal1, "fileName")
	Engine.SetModelValue(registerVal7, registerVal4)
	return registerVal1
end

registerVal2.getModel = __FUNC_5BF39_
DataSources["CombatRecordProfileSnapshot"] = registerVal2
registerVal2 = {}
local function __FUNC_5C18A_(arg0, arg1, arg2)
	arg1.items = {}
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal3, "CombatRecordCallingCardShowcase")
	arg1.rootModel = registerVal4
	for index5=0.000000, 2.000000, 1.000000 do
		local registerVal9 = Engine.CreateModel(registerVal4, index5)
		local registerVal10 = Engine.GetCombatRecordBackgroundId(arg0, CoD.CombatRecordXUID, index5)
		local registerVal12 = Engine.CreateModel(registerVal9, "backgroundID")
		Engine.SetModelValue(registerVal12, registerVal10)
		if 0.000000 < registerVal10 then
			local registerVal13 = Engine.GetChallengeInfoByBackingId(arg0, registerVal10)
			if registerVal13 and 0.000000 < #arg0 then
				local registerVal14, registerVal15 = CoD.ChallengesUtility.GetLocalizedNameAndDescriptionForChallengeInfo(registerVal13[1.000000])
			else
				local registerVal18 = Engine.Localize(Engine.TableLookup(nil, CoD.backgroundsTable, 1.000000, registerVal10, 9.000000))
				local registerVal19 = registerVal18:sub(2.000000, (#1.000000 - 1.000000))
				if registerVal19 == "arenabest" then
					registerVal19, registerVal20 = CoD.ArenaUtility.GetArenaBestCallingCardNameAndDescForBackgroundId(arg0, registerVal10)
				else
					if registerVal19 == "arenavet" then
						registerVal19, registerVal20 = CoD.ArenaUtility.GetArenaVetCallingCardNameAndDescForBackgroundId(arg0, registerVal10)
					else
						if registerVal19 == "default" then
							registerVal19 = tonumber(Engine.TableLookup(nil, CoD.backgroundsTable, 1.000000, registerVal10, 12.000000))
							if registerVal19 == 1.000000 then
								registerVal19 = Engine.Localize("MENU_UNLOCKED_BY_COMMUNITY_CONTRACT")
							else
								registerVal19 = Engine.Localize("MENU_DEFAULT_CALLING_CARD")
							else
								if registerVal19 == "loot" then
									registerVal19 = Engine.Localize("MENU_LOOT_CALLING_CARD")
								end
							end
						end
						registerVal19 = Engine.Localize(Engine.TableLookup(nil, CoD.backgroundsTable, 1.000000, registerVal10, 4.000000))
					else
						if not CoD.CombatRecordOtherPlayerStats then
							registerVal13 = Engine.Localize("MENU_SELECT_CALLING_CARD")
						end
					end
				end
			end
		end
		registerVal14 = Engine.CreateModel(registerVal9, "description")
		Engine.SetModelValue(registerVal14, registerVal13)
		registerVal14 = Engine.CreateModel(registerVal9, "title")
		Engine.SetModelValue(registerVal14, registerVal19)
		registerVal14 = Engine.CreateModel(registerVal9, "slotIndex")
		Engine.SetModelValue(registerVal14, index5)
		table.insert(arg1.items, registerVal9)
	end
	local registerVal6 = Engine.GetGlobalModel()
	local registerVal5 = Engine.CreateModel(registerVal6, "CallingCardShowcaseUpdated")
	if arg1.updateSubscription then
		arg1:removeSubscription(arg1.updateSubscription)
	end
	local function __FUNC_5CABF_()
		arg1:updateDataSource()
	end

	registerVal6 = arg1:subscribeToModel(registerVal5, __FUNC_5CABF_, false)
	arg1.updateSubscription = registerVal6
end

registerVal2.prepare = __FUNC_5C18A_
local function __FUNC_5CB0E_(arg0)
	return #arg0.items
end

registerVal2.getCount = __FUNC_5CB0E_
local function __FUNC_5CB5B_(arg0, arg1, arg2)
	return arg1.items[arg2]
end

registerVal2.getItem = __FUNC_5CB5B_
local function __FUNC_5CBAF_(arg0)
	if arg0.rootModel then
		Engine.UnsubscribeAndFreeModel(arg0.rootModel)
		arg0.rootModel = nil
	end
end

registerVal2.cleanup = __FUNC_5CBAF_
DataSources["CombatRecordCallingCardShowcase"] = registerVal2
registerVal2 = {}
local function __FUNC_5CC55_(arg0, arg1, arg2)
	arg1.items = {}
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal3, "CombatRecordGameModeList")
	arg1.rootModel = registerVal4
	local registerVal5 = CoD.GetCombatRecordStats(arg0)
	local registerVal6 = CoD.GetCombatRecordComparisonStats(arg0)
	local registerVal7 = Engine.GetGametypesBase(CoD.GetCombatRecordMode())
	local registerVal8, registerVal9, registerVal10 = pairs(registerVal7)
	for index11,value12 in registerVal8, registerVal9, registerVal10 do
		local registerVal13 = CoD.AllowGameType(value12.gametype)
		if value12.category == "standard" and registerVal13 then
			registerVal13 = Engine.CreateModel(registerVal4, index11)
			local registerVal14 = Engine.StructTableLookupString(CoDShared.gametypesStructTable, "name", value12.gametype, "name_ref")
			local registerVal16 = Engine.CreateModel(registerVal13, "name")
			Engine.SetModelValue(registerVal16, registerVal14)
			local registerVal15 = Engine.StructTableLookupString(CoDShared.gametypesStructTable, "name", value12.gametype, "image")
			local registerVal17 = Engine.CreateModel(registerVal13, "image")
			Engine.SetModelValue(registerVal17, registerVal15)
			registerVal17 = CoD.GetCombatRecordStatForPathOrZero(registerVal5, ("PlayerStatsByGameType." .. value12.gametype .. ".LOSSES"))
			if registerVal6 then
				local registerVal19 = CoD.GetCombatRecordStatForPathOrZero(registerVal6, ("PlayerStatsByGameType." .. value12.gametype .. ".LOSSES"))
			end
			local registerVal20 = Engine.CreateModel(registerVal13, "losses")
			Engine.SetModelValue(registerVal20, registerVal17)
			registerVal20 = Engine.CreateModel(registerVal13, "lossesComparison")
			Engine.SetModelValue(registerVal20, registerVal19)
			registerVal20 = CoD.GetCombatRecordStatForPathOrZero(registerVal5, ("PlayerStatsByGameType." .. value12.gametype .. ".WINS"))
			local registerVal22 = Engine.CreateModel(registerVal13, "stat")
			Engine.SetModelValue(registerVal22, registerVal20)
			if registerVal6 then
				registerVal22 = CoD.GetCombatRecordStatForPathOrZero(registerVal6, ("PlayerStatsByGameType." .. value12.gametype .. ".WINS"))
			end
			local registerVal23 = Engine.CreateModel(registerVal13, "statComparison")
			Engine.SetModelValue(registerVal23, registerVal22)
			registerVal23 = Engine.CreateModel(registerVal13, "wlRatio")
			Engine.SetModelValue(registerVal23, CoD.GetDisplayRatioFromTwoStats(registerVal20, registerVal17))
			registerVal23 = Engine.CreateModel(registerVal13, "wlRatioComparison")
			Engine.SetModelValue(registerVal23, CoD.GetDisplayRatioFromTwoStats(registerVal22, registerVal19))
			registerVal23 = Engine.CreateModel(registerVal13, "lossRingFrac")
			local registerVal24 = math.max(1.000000, (registerVal17 + registerVal20))
			Engine.SetModelValue(registerVal23, (registerVal17 / registerVal24))
			registerVal23 = CoD.GetCombatRecordStatForPathOrZero(registerVal5, ("PlayerStatsByGameType." .. value12.gametype .. ".WIN_STREAK"))
			if registerVal6 then
				local registerVal25 = CoD.GetCombatRecordStatForPathOrZero(registerVal6, ("PlayerStatsByGameType." .. value12.gametype .. ".WIN_STREAK"))
			end
			local registerVal26 = Engine.CreateModel(registerVal13, "streak")
			Engine.SetModelValue(registerVal26, registerVal23)
			registerVal26 = Engine.CreateModel(registerVal13, "streakComparison")
			Engine.SetModelValue(registerVal26, registerVal25)
			registerVal26 = CoD.GetCombatRecordStatForPathOrZero(registerVal5, ("PlayerStatsByGameType." .. value12.gametype .. ".KILLS"))
			if registerVal6 then
				local registerVal28 = CoD.GetCombatRecordStatForPathOrZero(registerVal6, ("PlayerStatsByGameType." .. value12.gametype .. ".KILLS"))
			end
			local registerVal29 = CoD.GetCombatRecordStatForPathOrZero(registerVal5, ("PlayerStatsByGameType." .. value12.gametype .. ".DEATHS"))
			if registerVal6 then
				local registerVal31 = CoD.GetCombatRecordStatForPathOrZero(registerVal6, ("PlayerStatsByGameType." .. value12.gametype .. ".DEATHS"))
			end
			local registerVal32 = Engine.CreateModel(registerVal13, "kdRatio")
			Engine.SetModelValue(registerVal32, CoD.GetDisplayRatioFromTwoStats(registerVal26, registerVal29))
			registerVal32 = Engine.CreateModel(registerVal13, "kdRatioComparison")
			Engine.SetModelValue(registerVal32, CoD.GetDisplayRatioFromTwoStats(registerVal28, registerVal31))
			registerVal32 = CoD.GetCombatRecordStatForPathOrZero(registerVal5, ("PlayerStatsByGameType." .. value12.gametype .. ".SCORE"))
			if registerVal6 then
				local registerVal34 = CoD.GetCombatRecordStatForPathOrZero(registerVal6, ("PlayerStatsByGameType." .. value12.gametype .. ".SCORE"))
			end
			local registerVal35 = CoD.GetCombatRecordStatForPathOrZero(registerVal5, ("PlayerStatsByGameType." .. value12.gametype .. ".TIME_PLAYED_TOTAL"))
			if registerVal6 then
				local registerVal37 = CoD.GetCombatRecordStatForPathOrZero(registerVal6, ("PlayerStatsByGameType." .. value12.gametype .. ".TIME_PLAYED_TOTAL"))
			end
			registerVal37 = math.max(1.000000, (registerVal35 / 60.000000))
			local registerVal38 = math.max(1.000000, (registerVal37 / 60.000000))
			local registerVal39 = math.floor(((registerVal32 / registerVal37) + 0.500000))
			local registerVal40 = math.floor(((registerVal34 / registerVal38) + 0.500000))
			local registerVal42 = Engine.CreateModel(registerVal13, "spm")
			Engine.SetModelValue(registerVal42, registerVal39)
			registerVal42 = Engine.CreateModel(registerVal13, "spmComparison")
			Engine.SetModelValue(registerVal42, registerVal40)
			table.insert(arg1.items, registerVal13)
		end
	end
	local function __FUNC_5D94A_(arg0, arg1)
		local registerVal2 = Engine.GetModelValue(Engine.GetModel(arg0, "stat"))
		local registerVal3 = Engine.GetModelValue(Engine.GetModel(arg1, "stat"))
		if registerVal2 == registerVal3 then
			local registerVal4 = Engine.Localize(Engine.GetModelValue(Engine.GetModel(arg0, "name")))
			local registerVal5 = Engine.Localize(Engine.GetModelValue(Engine.GetModel(arg1, "name")))
			if registerVal4 >= registerVal5 then
			end
			return true
		end
		if registerVal3 >= registerVal2 then
		end
		return true
	end

	table.sort(arg1.items, __FUNC_5D94A_)
end

registerVal2.prepare = __FUNC_5CC55_
local function __FUNC_5DAF3_(arg0)
	return #arg0.items
end

registerVal2.getCount = __FUNC_5DAF3_
local function __FUNC_5DB3F_(arg0, arg1, arg2)
	return arg1.items[arg2]
end

registerVal2.getItem = __FUNC_5DB3F_
local function __FUNC_5DB93_(arg0)
	if arg0.rootModel then
		Engine.UnsubscribeAndFreeModel(arg0.rootModel)
		arg0.rootModel = nil
	end
end

registerVal2.cleanup = __FUNC_5DB93_
DataSources["CombatRecordGameModeList"] = registerVal2
registerVal2 = {}
local function __FUNC_5DC39_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "CombatRecordMostWonGameMode")
	local registerVal5 = CoD.GetCombatRecordStats(arg0)
	local registerVal6 = Engine.GetGametypesBase(CoD.GetCombatRecordMode())
	local registerVal7, registerVal8, registerVal9 = pairs(registerVal6)
	for index10,value11 in registerVal7, registerVal8, registerVal9 do
		if value11.category == "standard" then
			local registerVal12 = CoD.GetCombatRecordStatForPath(registerVal5, ("PlayerStatsByGameType." .. value11.gametype .. ".WINS"))
			if registerVal1 or nil < registerVal12 then
				local registerVal13 = Engine.StructTableLookupString(CoDShared.gametypesStructTable, "name", value11.gametype, "image")
				registerVal13 = Engine.StructTableLookupString(CoDShared.gametypesStructTable, "name", value11.gametype, "name_ref")
			end
		end
	end
	registerVal8 = Engine.CreateModel(registerVal1, "image")
	Engine.SetModelValue(registerVal8, registerVal13)
	registerVal8 = Engine.CreateModel(registerVal1, "name")
	Engine.SetModelValue(registerVal8, registerVal13)
	registerVal8 = Engine.CreateModel(registerVal1, "wins")
	Engine.SetModelValue(registerVal8, registerVal12)
	return registerVal1
end

registerVal2.getModel = __FUNC_5DC39_
DataSources["CombatRecordMostWonGameMode"] = registerVal2
registerVal2 = {}
local function __FUNC_5E069_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "CombatRecordMedal1")
	local registerVal3 = Engine.CreateModel(registerVal1, "medalRef")
	Engine.SetModelValue(registerVal3, "MEDAL_HEADSHOT")
	registerVal2 = Engine.StorageGetBuffer(arg0, Enum.StorageFileType.STORAGE_MP_STATS_ONLINE)
	registerVal3 = registerVal2.playerstatslist.medal_headshot.statvalue:get()
	if 0.000000 < registerVal3 then
		local registerVal4 = Engine.TableLookup(nil, CoD.scoreInfoTableMP, 2.000000, "MEDAL_HEADSHOT", 3.000000)
		local registerVal5 = Engine.GetMedalInfo(registerVal4)
		if registerVal5 then
			local registerVal7 = Engine.CreateModel(registerVal1, "backingLarge")
			Engine.SetModelValue(registerVal7, registerVal5.backingLarge)
			registerVal7 = Engine.CreateModel(registerVal1, "iconLarge")
			Engine.SetModelValue(registerVal7, registerVal5.iconLarge)
			registerVal7 = Engine.CreateModel(registerVal1, "value")
			Engine.SetModelValue(registerVal7, registerVal3)
		else
			registerVal5 = Engine.CreateModel(registerVal1, "backingLarge")
			Engine.SetModelValue(registerVal5, "uie_t7_hud_medal_backing_badassery_outline")
			registerVal5 = Engine.CreateModel(registerVal1, "iconLarge")
			Engine.SetModelValue(registerVal5, "$blank")
			registerVal5 = Engine.CreateModel(registerVal1, "value")
			Engine.SetModelValue(registerVal5, "--")
		end
	end
	return registerVal1
end

registerVal2.getModel = __FUNC_5E069_
DataSources["CombatRecordMPMedal1"] = registerVal2
registerVal2 = {}
local function __FUNC_5E541_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "CombatRecordMedal2")
	registerVal2 = {}
	registerVal2 = {"MEDAL_KILLSTREAK_MORE_THAN_30", "MEDAL_KILLSTREAK_30", "MEDAL_KILLSTREAK_25", "MEDAL_KILLSTREAK_20", "MEDAL_KILLSTREAK_15", "MEDAL_KILLSTREAK_10", "MEDAL_KILLSTREAK_5"}
	local registerVal3 = Engine.StorageGetBuffer(arg0, Enum.StorageFileType.STORAGE_MP_STATS_ONLINE)
	local registerVal8, registerVal9, registerVal10 = ipairs(registerVal2)
	for index11,value12 in registerVal8, registerVal9, registerVal10 do
		local registerVal13 = registerVal3.playerstatslist[value12].statvalue:get()
		if registerVal13 and 0.000000 < registerVal13 then
		else
		end
	end
	if value12 then
		registerVal8 = Engine.TableLookup(nil, CoD.scoreInfoTableMP, 2.000000, value12, 3.000000)
		registerVal9 = Engine.GetMedalInfo(registerVal8)
		local registerVal11 = Engine.CreateModel(registerVal1, "medalRef")
		Engine.SetModelValue(registerVal11, value12)
		registerVal11 = Engine.CreateModel(registerVal1, "value")
		Engine.SetModelValue(registerVal11, registerVal13)
		if registerVal9 then
			registerVal11 = Engine.CreateModel(registerVal1, "backingLarge")
			Engine.SetModelValue(registerVal11, registerVal9.backingLarge)
			registerVal11 = Engine.CreateModel(registerVal1, "iconLarge")
			Engine.SetModelValue(registerVal11, registerVal9.iconLarge)
		else
			registerVal9 = Engine.CreateModel(registerVal1, "medalRef")
			Engine.SetModelValue(registerVal9, "MENU_KILL_STREAKS")
			registerVal9 = Engine.CreateModel(registerVal1, "value")
			Engine.SetModelValue(registerVal9, "--")
			registerVal9 = Engine.CreateModel(registerVal1, "backingLarge")
			Engine.SetModelValue(registerVal9, "uie_t7_hud_medal_backing_killstreak_outline")
			registerVal9 = Engine.CreateModel(registerVal1, "iconLarge")
			Engine.SetModelValue(registerVal9, "$blank")
		end
	end
	return registerVal1
end

registerVal2.getModel = __FUNC_5E541_
DataSources["CombatRecordMPMedal2"] = registerVal2
registerVal2 = {}
local function __FUNC_5EB79_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "CombatRecordMedal3")
	registerVal2 = {}
	registerVal2 = {"MEDAL_MULTIKILL_MORE_THAN_8", "MEDAL_MULTIKILL_8", "MEDAL_MULTIKILL_7", "MEDAL_MULTIKILL_6", "MEDAL_MULTIKILL_5", "MEDAL_MULTIKILL_4", "MEDAL_MULTIKILL_3", "MEDAL_MULTIKILL_2"}
	local registerVal3 = Engine.StorageGetBuffer(arg0, Enum.StorageFileType.STORAGE_MP_STATS_ONLINE)
	local registerVal8, registerVal9, registerVal10 = ipairs(registerVal2)
	for index11,value12 in registerVal8, registerVal9, registerVal10 do
		local registerVal13 = registerVal3.playerstatslist[value12].statvalue:get()
		if registerVal13 and 0.000000 < registerVal13 then
		else
		end
	end
	if value12 then
		registerVal8 = Engine.TableLookup(nil, CoD.scoreInfoTableMP, 2.000000, value12, 3.000000)
		registerVal9 = Engine.GetMedalInfo(registerVal8)
		local registerVal11 = Engine.CreateModel(registerVal1, "medalRef")
		Engine.SetModelValue(registerVal11, value12)
		registerVal11 = Engine.CreateModel(registerVal1, "value")
		Engine.SetModelValue(registerVal11, registerVal13)
		if registerVal9 then
			registerVal11 = Engine.CreateModel(registerVal1, "backingLarge")
			Engine.SetModelValue(registerVal11, registerVal9.backingLarge)
			registerVal11 = Engine.CreateModel(registerVal1, "iconLarge")
			Engine.SetModelValue(registerVal11, registerVal9.iconLarge)
		else
			registerVal9 = Engine.CreateModel(registerVal1, "medalRef")
			Engine.SetModelValue(registerVal9, "MENU_MULTI_KILLS")
			registerVal9 = Engine.CreateModel(registerVal1, "value")
			Engine.SetModelValue(registerVal9, "--")
			registerVal9 = Engine.CreateModel(registerVal1, "backingLarge")
			Engine.SetModelValue(registerVal9, "uie_t7_hud_medal_backing_multikill_outline")
			registerVal9 = Engine.CreateModel(registerVal1, "iconLarge")
			Engine.SetModelValue(registerVal9, "$blank")
		end
	end
	return registerVal1
end

registerVal2.getModel = __FUNC_5EB79_
DataSources["CombatRecordMPMedal3"] = registerVal2
registerVal2 = {}
local function __FUNC_5F1C1_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "CombatRecordMedal4")
	registerVal2 = {}
	registerVal2 = {"MEDAL_ANNIHILATOR_MULTIKILL", "MEDAL_ARMBLADES_MULTIKILL", "MEDAL_BOWLAUNCHER_MULTIKILL", "MEDAL_FLAMETHROWER_MULTIKILL", "MEDAL_GELGUN_MULTIKILL", "MEDAL_GRAVITYSPIKES_MULTIKILL", "MEDAL_LIGHTNINGGUN_MULTIKILL", "MEDAL_MINIGUN_MULTIKILL", "MEDAL_PINEAPPLE_MULTIKILL"}
	local registerVal3 = Engine.StorageGetBuffer(arg0, Enum.StorageFileType.STORAGE_MP_STATS_ONLINE)
	local registerVal8, registerVal9, registerVal10 = ipairs(registerVal2)
	for index11,value12 in registerVal8, registerVal9, registerVal10 do
		local registerVal13 = registerVal3.playerstatslist[value12].statvalue:get()
		if registerVal13 and 0.000000 < registerVal13 then
		end
	end
	if value12 then
		registerVal8 = Engine.TableLookup(nil, CoD.scoreInfoTableMP, 2.000000, value12, 3.000000)
		registerVal9 = Engine.GetMedalInfo(registerVal8)
		local registerVal11 = Engine.CreateModel(registerVal1, "medalRef")
		Engine.SetModelValue(registerVal11, value12)
		registerVal11 = Engine.CreateModel(registerVal1, "value")
		Engine.SetModelValue(registerVal11, registerVal13)
		if registerVal9 then
			registerVal11 = Engine.CreateModel(registerVal1, "backingLarge")
			Engine.SetModelValue(registerVal11, registerVal9.backingLarge)
			registerVal11 = Engine.CreateModel(registerVal1, "iconLarge")
			Engine.SetModelValue(registerVal11, registerVal9.iconLarge)
		else
			registerVal9 = Engine.CreateModel(registerVal1, "medalRef")
			Engine.SetModelValue(registerVal9, "MENU_SPECIALIST_WEAPON")
			registerVal9 = Engine.CreateModel(registerVal1, "value")
			Engine.SetModelValue(registerVal9, "--")
			registerVal9 = Engine.CreateModel(registerVal1, "backingLarge")
			Engine.SetModelValue(registerVal9, "uie_t7_hud_medal_backing_specialist_outline")
			registerVal9 = Engine.CreateModel(registerVal1, "iconLarge")
			Engine.SetModelValue(registerVal9, "$blank")
		end
	end
	return registerVal1
end

registerVal2.getModel = __FUNC_5F1C1_
DataSources["CombatRecordMPMedal4"] = registerVal2
registerVal2 = {}
local function __FUNC_5F87A_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "CombatRecordMedal5")
	registerVal2 = {}
	registerVal2 = {"MEDAL_FLASHBACK_KILL", "MEDAL_FOCUS_EARN_MULTISCORESTREAK", "MEDAL_FOCUS_EARN_SCORESTREAK", "MEDAL_HEATWAVE_KILL", "MEDAL_KILL_ENEMY_WHILE_USING_PSYCHOSIS", "MEDAL_POWER_ARMOR_KILL", "MEDAL_OPTIC_CAMO_CAPTURE_OBJECTIVE", "MEDAL_OPTIC_CAMO_KILL", "MEDAL_RESURRRECT_KILL", "MEDAL_SPEED_BURST_KILL", "MEDAL_VISION_PULSE_KILL"}
	local registerVal3 = Engine.StorageGetBuffer(arg0, Enum.StorageFileType.STORAGE_MP_STATS_ONLINE)
	local registerVal8, registerVal9, registerVal10 = ipairs(registerVal2)
	for index11,value12 in registerVal8, registerVal9, registerVal10 do
		local registerVal13 = registerVal3.playerstatslist[value12].statvalue:get()
		if registerVal13 and 0.000000 < registerVal13 then
		end
	end
	if value12 then
		registerVal8 = Engine.TableLookup(nil, CoD.scoreInfoTableMP, 2.000000, value12, 3.000000)
		registerVal9 = Engine.GetMedalInfo(registerVal8)
		local registerVal11 = Engine.CreateModel(registerVal1, "medalRef")
		Engine.SetModelValue(registerVal11, value12)
		registerVal11 = Engine.CreateModel(registerVal1, "value")
		Engine.SetModelValue(registerVal11, registerVal13)
		if registerVal9 then
			registerVal11 = Engine.CreateModel(registerVal1, "backingLarge")
			Engine.SetModelValue(registerVal11, registerVal9.backingLarge)
			registerVal11 = Engine.CreateModel(registerVal1, "iconLarge")
			Engine.SetModelValue(registerVal11, registerVal9.iconLarge)
		else
			registerVal9 = Engine.CreateModel(registerVal1, "medalRef")
			Engine.SetModelValue(registerVal9, "MENU_SPECIALIST_ABILITY")
			registerVal9 = Engine.CreateModel(registerVal1, "value")
			Engine.SetModelValue(registerVal9, "--")
			registerVal9 = Engine.CreateModel(registerVal1, "backingLarge")
			Engine.SetModelValue(registerVal9, "uie_t7_hud_medal_backing_specialist_outline")
			registerVal9 = Engine.CreateModel(registerVal1, "iconLarge")
			Engine.SetModelValue(registerVal9, "$blank")
		end
	end
	return registerVal1
end

registerVal2.getModel = __FUNC_5F87A_
DataSources["CombatRecordMPMedal5"] = registerVal2
registerVal2 = {}
local function __FUNC_5FF7E_(arg0, arg1, arg2)
	arg1.items = {}
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.CreateModel(registerVal4, "CombatRecordMPMedals")
	arg1.rootModel = registerVal3
	registerVal4 = Engine.StorageGetBuffer(arg0, Enum.StorageFileType.STORAGE_MP_STATS_ONLINE)
	local registerVal5 = Engine.GetTableRowCount(CoD.scoreInfoTableMP)
	for index11=1.000000, registerVal5, 1.000000 do
		local registerVal15 = Engine.TableGetColumnValueForRow(CoD.scoreInfoTableMP, (index11 - 1.000000), 12.000000)
		local registerVal16 = Engine.TableGetColumnValueForRow(CoD.scoreInfoTableMP, (index11 - 1.000000), 2.000000)
		local registerVal17 = Engine.TableGetColumnValueForRow(CoD.scoreInfoTableMP, (index11 - 1.000000), 3.000000)
		local registerVal18 = Engine.TableGetColumnValueForRow(CoD.scoreInfoTableMP, (index11 - 1.000000), 13.000000)
		local registerVal19 = registerVal4.PlayerStatsList[registerVal16].statValue:get()
		local registerVal20 = Engine.GetMedalInfo(registerVal17)
		if registerVal15 == CoD.CombatRecordMedalCategory and registerVal16 ~= "" and 0.000000 < registerVal19 then
			local registerVal21 = Engine.CreateModel(registerVal3, index11)
			if not {}[registerVal16] then
				{}[registerVal16] = index11
				local registerVal23 = Engine.CreateModel(registerVal21, "name")
				Engine.SetModelValue(registerVal23, registerVal16)
				registerVal23 = Engine.CreateModel(registerVal21, "timesEarned")
				Engine.SetModelValue(registerVal23, registerVal19)
				registerVal23 = Engine.CreateModel(registerVal21, "iconLarge")
				Engine.SetModelValue(registerVal23, registerVal20.iconLarge)
				registerVal23 = Engine.CreateModel(registerVal21, "backingLarge")
				Engine.SetModelValue(registerVal23, registerVal20.backingLarge)
				registerVal23 = Engine.CreateModel(registerVal21, "sortKey")
				Engine.SetModelValue(registerVal23, registerVal18)
				table.insert(arg1.items, registerVal21)
			else
				registerVal23 = Engine.GetModel(registerVal3, {}[registerVal16])
				local registerVal24 = Engine.GetModel(registerVal23, "timesEarned")
				local registerVal25 = Engine.GetModelValue(registerVal24)
				Engine.SetModelValue(registerVal24, (registerVal25 + registerVal19))
			end
		end
	end
	if CoD.CombatRecordMedalSortFunc then
		table.sort(arg1.items, CoD.CombatRecordMedalSortFunc)
	end
	return registerVal3
end

registerVal2.prepare = __FUNC_5FF7E_
local function __FUNC_60689_(arg0)
	return #arg0.items
end

registerVal2.getCount = __FUNC_60689_
local function __FUNC_606D7_(arg0, arg1, arg2)
	return arg1.items[arg2]
end

registerVal2.getItem = __FUNC_606D7_
local function __FUNC_6072B_(arg0)
	if arg0.rootModel then
		Engine.UnsubscribeAndFreeModel(arg0.rootModel)
		arg0.rootModel = nil
	end
end

registerVal2.cleanup = __FUNC_6072B_
DataSources["CombatRecordMPMedals"] = registerVal2
local function __FUNC_607D1_(arg0)
	local function __FUNC_60C41_(arg0, arg1)
		local registerVal2 = Engine.GetModelValue(Engine.GetModel(arg0, "timesEarned"))
		local registerVal3 = Engine.GetModelValue(Engine.GetModel(arg1, "timesEarned"))
		if registerVal3 >= registerVal2 then
		end
		return true
	end

	local function __FUNC_60D2E_(arg0, arg1)
		local registerVal2 = Engine.GetModelValue(Engine.GetModel(arg0, "timesEarned"))
		local registerVal3 = Engine.GetModelValue(Engine.GetModel(arg1, "timesEarned"))
		if registerVal2 >= registerVal3 then
		end
		return true
	end

	local registerVal6 = {}
	local registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderl
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_COMBAT_CAPS"
	registerVal7.tabIcon = ""
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "combat"
	registerVal7.sortFunc = __FUNC_60D2E_
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_SPECIALISTS_CAPS"
	registerVal7.tabIcon = ""
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "specialist"
	registerVal7.sortFunc = __FUNC_60C41_
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_ANTISPECIALISTS_CAPS"
	registerVal7.tabIcon = ""
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "antispecialist"
	registerVal7.sortFunc = __FUNC_60C41_
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_SCORESTREAKS_CAPS"
	registerVal7.tabIcon = ""
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "scorestreak"
	registerVal7.sortFunc = __FUNC_60C41_
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MENU_ANTISCORESTREAKS_CAPS"
	registerVal7.tabIcon = ""
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "antiscorestreak"
	registerVal7.sortFunc = __FUNC_60C41_
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabName = "MPUI_GAMEMODE_CAPS"
	registerVal7.tabIcon = ""
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.tabId = "gamemode"
	registerVal7.sortFunc = __FUNC_60C41_
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderr
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	table.insert({}, registerVal6)
	return {}
end

registerVal2 = ListHelper_SetupDataSource("CombatRecordMPMedalTabs", __FUNC_607D1_, true)
DataSources["CombatRecordMPMedalTabs"] = registerVal2
local function __FUNC_60E1A_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabName = "MPUI_SUMMARY_CAPS"
	registerVal5.tabWidget = "CoD.CombatRecordSummaryPanel"
	registerVal5.tabIcon = ""
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "summary"
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabName = "MENU_COMBAT_RECORD_TAB_PUBLIC_CAPS"
	registerVal5.tabWidget = "CoD.CombatRecordPublicMatchPanel"
	registerVal5.tabIcon = ""
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "public"
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabName = "MENU_ARENA_CAPS"
	registerVal5.tabWidget = "CoD.CombatRecordArenaPanel"
	registerVal5.tabIcon = ""
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.tabId = "arena"
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderr
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	return {}
end

registerVal2 = ListHelper_SetupDataSource("CombatRecordMPTabs", __FUNC_60E1A_, true)
DataSources["CombatRecordMPTabs"] = registerVal2
registerVal2 = {}
local function __FUNC_6119A_(arg0, arg1, arg2)
	arg1.items = {}
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal3, "CombatRecordScorestreakList")
	arg1.rootModel = registerVal4
	local registerVal5 = CoD.GetCombatRecordStats(arg0)
	local registerVal6 = CoD.GetCombatRecordComparisonStats(arg0)
	for index7=0.000000, 255.000000, 1.000000 do
		local registerVal11 = Engine.GetItemAllocationCost(index7, CoD.GetCombatRecordMode())
		registerVal11 = Engine.GetItemGroup(index7, CoD.GetCombatRecordMode())
		if 0.000000 <= registerVal11 and registerVal11 == "killstreak" then
			local registerVal12 = Engine.CreateModel(registerVal4, index7)
			local registerVal14 = Engine.CreateModel(registerVal12, "name")
			Engine.SetModelValue(registerVal14, Engine.GetItemName(index7, CoD.GetCombatRecordMode()))
			registerVal14 = Engine.IsItemPassive(index7, CoD.GetCombatRecordMode())
			if registerVal14 then
			end
			local registerVal16 = CoD.GetCombatRecordStatForPath(registerVal5, ("ItemStats." .. index7 .. ".stats." .. "assists"))
			local registerVal18 = Engine.CreateModel(registerVal12, "itemIndex")
			Engine.SetModelValue(registerVal18, index7)
			registerVal18 = Engine.CreateModel(registerVal12, "stat")
			Engine.SetModelValue(registerVal18, registerVal16)
			registerVal18 = Engine.CreateModel(registerVal12, "statName")
			Engine.SetModelValue(registerVal18, Engine.Localize(("MENU_" .. "assists" .. "_CAPS")))
			registerVal18 = Engine.CreateModel(registerVal12, "statPerUseString")
			Engine.SetModelValue(registerVal18, Engine.Localize(("MENU_" .. "assists" .. "_PER_USE_CAPS")))
			if registerVal6 then
				registerVal18 = CoD.GetCombatRecordStatForPath(registerVal6, ("ItemStats." .. index7 .. ".stats." .. "assists"))
			end
			local registerVal19 = Engine.CreateModel(registerVal12, "statComparison")
			Engine.SetModelValue(registerVal19, registerVal18)
			table.insert(arg1.items, registerVal12)
		end
	end
	local function __FUNC_61836_(arg0, arg1)
		local registerVal2 = Engine.GetModelValue(Engine.GetModel(arg0, "stat"))
		local registerVal3 = Engine.GetModelValue(Engine.GetModel(arg1, "stat"))
		if registerVal2 == registerVal3 then
			local registerVal4 = Engine.Localize(Engine.GetModelValue(Engine.GetModel(arg0, "name")))
			local registerVal5 = Engine.Localize(Engine.GetModelValue(Engine.GetModel(arg1, "name")))
			if registerVal4 >= registerVal5 then
			end
			return true
		end
		if registerVal3 >= registerVal2 then
		end
		return true
	end

	table.sort(arg1.items, __FUNC_61836_)
end

registerVal2.prepare = __FUNC_6119A_
local function __FUNC_619DF_(arg0)
	return #arg0.items
end

registerVal2.getCount = __FUNC_619DF_
local function __FUNC_61A2B_(arg0, arg1, arg2)
	return arg1.items[arg2]
end

registerVal2.getItem = __FUNC_61A2B_
local function __FUNC_61A7F_(arg0)
	if arg0.rootModel then
		Engine.UnsubscribeAndFreeModel(arg0.rootModel)
		arg0.rootModel = nil
	end
end

registerVal2.cleanup = __FUNC_61A7F_
DataSources["CombatRecordScorestreakList"] = registerVal2
registerVal2 = {}
local function __FUNC_61B25_(arg0, arg1, arg2)
	local registerVal4 = CoD.GetUnlockablesTable(arg0, nil, CoD.GetCombatRecordMode())
	CoD.UnlockablesTable = registerVal4
	arg1.items = {}
	local registerVal3 = Engine.GetModelForController(arg0)
	registerVal4 = Engine.CreateModel(registerVal3, "CombatRecordCybercoreList")
	arg1.rootModel = registerVal4
	local registerVal5 = CoD.GetCombatRecordStats(arg0)
	local registerVal6 = CoD.GetCombatRecordComparisonStats(arg0)
	local registerVal7, registerVal8, registerVal9 = ipairs(CoD.UnlockablesTable.cybercom_abilities)
	for index10,value11 in registerVal7, registerVal8, registerVal9 do
		local registerVal12 = Engine.GetModelValue(Engine.GetModel(value11, "ref"))
		local registerVal14 = LUI.endswith(registerVal12, "_pro")
		if registerVal14 then
		end
		if not true then
			registerVal14 = Engine.GetModelValue(Engine.GetModel(value11, "itemIndex"))
			local registerVal15 = Engine.CreateModel(registerVal4, registerVal14)
			local registerVal17 = Engine.CreateModel(registerVal15, "name")
			Engine.SetModelValue(registerVal17, Engine.GetItemName(registerVal14, CoD.GetCombatRecordMode()))
			local registerVal16 = CoD.GetCombatRecordStatForPath(registerVal5, ("ItemStats." .. registerVal14 .. ".stats.kills"))
			registerVal17 = CoD.GetCombatRecordStatForPath(registerVal5, ("ItemStats." .. registerVal14 .. ".stats.assists"))
			local registerVal18 = CoD.GetCombatRecordStatForPath(registerVal5, ("ItemStats." .. registerVal14 .. ".stats.used"))
			local registerVal20 = Engine.CreateModel(registerVal15, "cybercoreName")
			Engine.SetModelValue(registerVal20, Engine.GetItemName(registerVal14, CoD.GetCombatRecordMode()))
			registerVal20 = Engine.CreateModel(registerVal15, "cybercoreIndex")
			Engine.SetModelValue(registerVal20, registerVal14)
			if registerVal16 < registerVal17 then
				registerVal20 = Engine.CreateModel(registerVal15, "stat")
				Engine.SetModelValue(registerVal20, ("*" .. registerVal17))
				local registerVal19 = CoD.GetDisplayRatioFromTwoStats(registerVal17, registerVal18)
				local registerVal21 = Engine.CreateModel(registerVal15, "killsPerUse")
				Engine.SetModelValue(registerVal21, ("*" .. registerVal19))
				if registerVal6 then
					registerVal21 = CoD.GetCombatRecordStatForPath(registerVal6, ("ItemStats." .. registerVal14 .. ".stats.assists"))
				end
				local registerVal22 = Engine.CreateModel(registerVal15, "statComparison")
				Engine.SetModelValue(registerVal22, registerVal21)
			else
				registerVal20 = Engine.CreateModel(registerVal15, "stat")
				Engine.SetModelValue(registerVal20, registerVal16)
				registerVal19 = CoD.GetDisplayRatioFromTwoStats(registerVal16, registerVal18)
				registerVal21 = Engine.CreateModel(registerVal15, "killsPerUse")
				Engine.SetModelValue(registerVal21, registerVal19)
				if registerVal6 then
					registerVal21 = CoD.GetCombatRecordStatForPath(registerVal6, ("ItemStats." .. registerVal14 .. ".stats.kills"))
				end
				registerVal22 = Engine.CreateModel(registerVal15, "statComparison")
				Engine.SetModelValue(registerVal22, registerVal21)
			end
			table.insert(arg1.items, registerVal15)
		end
	end
	local function __FUNC_623D7_(arg0, arg1)
		local registerVal2 = Engine.GetModelValue(Engine.GetModel(arg0, "stat"))
		local registerVal3 = Engine.GetModelValue(Engine.GetModel(arg1, "stat"))
		local registerVal4 = type(registerVal2)
		registerVal4 = LUI.startswith(registerVal2, "*")
		if registerVal4 == "string" and registerVal4 then
			registerVal4 = tonumber(string.sub(registerVal2, 2.000000))
		end
		registerVal4 = type(registerVal3)
		registerVal4 = LUI.startswith(registerVal3, "*")
		if registerVal4 == "string" and registerVal4 then
			registerVal4 = tonumber(string.sub(registerVal3, 2.000000))
		end
		if registerVal4 == registerVal4 then
			registerVal4 = Engine.Localize(Engine.GetModelValue(Engine.GetModel(arg0, "name")))
			local registerVal5 = Engine.Localize(Engine.GetModelValue(Engine.GetModel(arg1, "name")))
			if registerVal4 >= registerVal5 then
			end
			return true
		end
		if registerVal4 >= registerVal4 then
		end
		return true
	end

	table.sort(arg1.items, __FUNC_623D7_)
end

registerVal2.prepare = __FUNC_61B25_
local function __FUNC_626AD_(arg0)
	return #arg0.items
end

registerVal2.getCount = __FUNC_626AD_
local function __FUNC_626FB_(arg0, arg1, arg2)
	return arg1.items[arg2]
end

registerVal2.getItem = __FUNC_626FB_
local function __FUNC_6274F_(arg0)
	if arg0.rootModel then
		Engine.UnsubscribeAndFreeModel(arg0.rootModel)
		arg0.rootModel = nil
	end
end

registerVal2.cleanup = __FUNC_6274F_
DataSources["CombatRecordCybercoreList"] = registerVal2
registerVal2 = {}
local function __FUNC_627F5_(arg0, arg1, arg2)
	arg1.items = {}
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal3, "CombatRecordSpecialistList")
	arg1.rootModel = registerVal4
	local registerVal5 = CoD.GetCombatRecordStats(arg0)
	local registerVal6 = CoD.GetCombatRecordComparisonStats(arg0)
	local registerVal7 = Engine.GetHeroList(Enum.eModes.MODE_MULTIPLAYER)
	local registerVal8, registerVal9, registerVal10 = ipairs(registerVal7)
	for index11,value12 in registerVal8, registerVal9, registerVal10 do
		if value12.disabled ~= true then
			local registerVal13 = Engine.GetLoadoutItemIndexForHero(Enum.eModes.MODE_MULTIPLAYER, (index11 - 1.000000), Enum.heroLoadoutTypes_e.HERO_LOADOUT_TYPE_WEAPON)
			local registerVal14 = Engine.CreateModel(registerVal4, registerVal13)
			local registerVal16 = Engine.CreateModel(registerVal14, "name")
			Engine.SetModelValue(registerVal16, Engine.GetItemName(registerVal13, CoD.GetCombatRecordMode()))
			if index11 == 10.000000 then
			end
			registerVal16 = CoD.GetCombatRecordStatForPath(registerVal5, "SpecialistStats.9.stats.kills_weapon")
			if registerVal6 then
				local registerVal19 = CoD.GetCombatRecordStatForPath(registerVal6, "SpecialistStats.9.stats.kills_weapon")
				registerVal19 = CombatRecordGetComparisonTwoStatRatioForItemIndexAndSpecificNumerator(arg0, "SpecialistStats.9.stats.kills_weapon", "used", registerVal13)
			end
			registerVal19 = CombatRecordGetTwoStatRatioForItemIndexAndSpecificNumerator(arg0, "SpecialistStats.9.stats.kills_weapon", "used", registerVal13)
			local registerVal21 = Engine.CreateModel(registerVal14, "heroIndex")
			Engine.SetModelValue(registerVal21, (index11 - 1.000000))
			registerVal21 = Engine.CreateModel(registerVal14, "heroName")
			Engine.SetModelValue(registerVal21, value12.displayName)
			registerVal21 = Engine.CreateModel(registerVal14, "itemIndex")
			Engine.SetModelValue(registerVal21, registerVal13)
			registerVal21 = Engine.CreateModel(registerVal14, "killsPerUse")
			Engine.SetModelValue(registerVal21, registerVal19)
			registerVal21 = Engine.CreateModel(registerVal14, "killsPerUseComparison")
			Engine.SetModelValue(registerVal21, tonumber(registerVal19))
			registerVal21 = Engine.CreateModel(registerVal14, "stat")
			Engine.SetModelValue(registerVal21, registerVal16)
			registerVal21 = Engine.CreateModel(registerVal14, "statComparison")
			Engine.SetModelValue(registerVal21, registerVal19)
			registerVal21 = Engine.CreateModel(registerVal14, "statDesc")
			Engine.SetModelValue(registerVal21, "")
			registerVal21 = Engine.CreateModel(registerVal14, "type")
			Engine.SetModelValue(registerVal21, Enum.heroLoadoutTypes_e.HERO_LOADOUT_TYPE_WEAPON)
			table.insert(arg1.items, registerVal14)
			local registerVal20 = Engine.GetLoadoutItemIndexForHero(Enum.eModes.MODE_MULTIPLAYER, (index11 - 1.000000), Enum.heroLoadoutTypes_e.HERO_LOADOUT_TYPE_GADGET)
			registerVal21 = Engine.CreateModel(registerVal4, registerVal20)
			registerVal21 = Engine.GetItemName(registerVal20, CoD.GetCombatRecordMode())
			local registerVal23 = Engine.CreateModel(registerVal21, "name")
			Engine.SetModelValue(registerVal23, registerVal21)
			if index11 == 10.000000 then
			end
			local registerVal22 = CoD.GetCombatRecordStatForPath(registerVal5, "SpecialistStats.9.stats.kills_ability")
			if registerVal6 then
				registerVal22 = CoD.GetCombatRecordStatForPath(registerVal6, "SpecialistStats.9.stats.kills_ability")
				registerVal22 = CombatRecordGetComparisonTwoStatRatioForItemIndexAndSpecificNumerator(arg0, "SpecialistStats.9.stats.kills_ability", "used", registerVal20)
			end
			registerVal22 = CombatRecordGetTwoStatRatioForItemIndexAndSpecificNumerator(arg0, "SpecialistStats.9.stats.kills_ability", "used", registerVal20)
			registerVal23 = Engine.CreateModel(registerVal21, "heroIndex")
			Engine.SetModelValue(registerVal23, (index11 - 1.000000))
			registerVal23 = Engine.CreateModel(registerVal21, "heroName")
			Engine.SetModelValue(registerVal23, value12.displayName)
			registerVal23 = Engine.CreateModel(registerVal21, "itemIndex")
			Engine.SetModelValue(registerVal23, registerVal20)
			registerVal23 = Engine.CreateModel(registerVal21, "killsPerUse")
			Engine.SetModelValue(registerVal23, registerVal22)
			registerVal23 = Engine.CreateModel(registerVal21, "killsPerUseComparison")
			Engine.SetModelValue(registerVal23, tonumber(registerVal22))
			registerVal23 = Engine.CreateModel(registerVal21, "stat")
			Engine.SetModelValue(registerVal23, registerVal22)
			registerVal23 = Engine.CreateModel(registerVal21, "statComparison")
			Engine.SetModelValue(registerVal23, registerVal22)
			registerVal23 = Engine.CreateModel(registerVal21, "statDesc")
			Engine.SetModelValue(registerVal23, (registerVal21 .. "_KILLS_DESC"))
			registerVal23 = Engine.CreateModel(registerVal21, "type")
			Engine.SetModelValue(registerVal23, Enum.heroLoadoutTypes_e.HERO_LOADOUT_TYPE_GADGET)
			table.insert(arg1.items, registerVal21)
		end
	end
	local function __FUNC_634FB_(arg0, arg1)
		local registerVal2 = Engine.GetModelValue(Engine.GetModel(arg0, "stat"))
		local registerVal3 = Engine.GetModelValue(Engine.GetModel(arg1, "stat"))
		if registerVal2 == registerVal3 then
			local registerVal4 = Engine.Localize(Engine.GetModelValue(Engine.GetModel(arg0, "name")))
			local registerVal5 = Engine.Localize(Engine.GetModelValue(Engine.GetModel(arg1, "name")))
			if registerVal4 >= registerVal5 then
			end
			return true
		end
		if registerVal3 >= registerVal2 then
		end
		return true
	end

	table.sort(arg1.items, __FUNC_634FB_)
end

registerVal2.prepare = __FUNC_627F5_
local function __FUNC_636A3_(arg0)
	return #arg0.items
end

registerVal2.getCount = __FUNC_636A3_
local function __FUNC_636EF_(arg0, arg1, arg2)
	return arg1.items[arg2]
end

registerVal2.getItem = __FUNC_636EF_
local function __FUNC_63743_(arg0)
	if arg0.rootModel then
		Engine.UnsubscribeAndFreeModel(arg0.rootModel)
		arg0.rootModel = nil
	end
end

registerVal2.cleanup = __FUNC_63743_
DataSources["CombatRecordSpecialistList"] = registerVal2
registerVal2 = {}
local function __FUNC_637E9_(arg0, arg1, arg2)
	arg1.weapons = {}
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal3, "CombatRecordWeaponsList")
	arg1.rootModel = registerVal4
	local registerVal5 = CoD.GetCombatRecordStats(arg0)
	local registerVal6 = CoD.GetCombatRecordComparisonStats(arg0)
	for index7=0.000000, 255.000000, 1.000000 do
		local registerVal11 = Engine.GetItemAllocationCost(index7, CoD.GetCombatRecordMode())
		if registerVal11 < -1.000000 or 0.000000 <= registerVal11 then
			local registerVal12 = Engine.GetLoadoutSlotForItem(index7, CoD.GetCombatRecordMode())
			if registerVal12 == "primary" or registerVal12 == "secondary" then
				local registerVal13 = Engine.CreateModel(registerVal4, index7)
				local registerVal16 = CoD.GetCombatRecordStatForPath(registerVal5, ("ItemStats." .. index7 .. ".stats.kills"))
				local registerVal17 = CoD.GetCombatRecordStatForPath(registerVal5, ("ItemStats." .. index7 .. ".stats.destroyed"))
				local registerVal20 = Engine.GetItemGroup(index7, CoD.GetCombatRecordMode())
				if registerVal20 ~= "weapon_launcher" then
				end
				if true then
				end
				local registerVal22 = Engine.CreateModel(registerVal13, "itemIndex")
				Engine.SetModelValue(registerVal22, index7)
				registerVal22 = Engine.CreateModel(registerVal13, "stat")
				Engine.SetModelValue(registerVal22, (registerVal16 + registerVal17))
				registerVal22 = Engine.CreateModel(registerVal13, "statName")
				Engine.SetModelValue(registerVal22, Engine.Localize(("MENU_" .. "kills_destroys" .. "_CAPS")))
				registerVal22 = Engine.GetItemName(index7, CoD.GetCombatRecordMode())
				local registerVal23 = Engine.GetItemRef(index7, CoD.GetCombatRecordMode())
				local registerVal24 = Engine.GetShotCountForItem(index7, CoD.GetCombatRecordMode())
				if not registerVal24 then
				end
				local registerVal26 = CoD.BlackMarketUtility.IsBlackMarketItem(registerVal23)
				registerVal26 = CoD.BlackMarketUtility.IsItemLocked(arg0, registerVal23)
				if registerVal26 and registerVal26 then
					registerVal26 = CoD.BlackMarketUtility.ClassifiedName(false)
				end
				local registerVal27 = IsThermometerUnlockIndexGreaterThanorEqualTo(CoD.ContractWeaponTiers[registerVal23])
				if CoD.ContractWeaponTiers[registerVal23] and not registerVal27 then
					registerVal27 = CoD.BlackMarketUtility.ClassifiedName(false)
				end
				local registerVal28 = Engine.CreateModel(registerVal13, "name")
				Engine.SetModelValue(registerVal28, registerVal27)
				registerVal28 = Engine.CreateModel(registerVal13, "isBMClassified")
				Engine.SetModelValue(registerVal28, true)
				registerVal28 = Engine.CreateModel(registerVal13, "isContractClassified")
				Engine.SetModelValue(registerVal28, true)
				registerVal28 = Engine.CreateModel(registerVal13, "statsAlpha")
				Engine.SetModelValue(registerVal28, 0.000000)
				registerVal28 = Engine.CreateModel(registerVal13, "shotCount")
				Engine.SetModelValue(registerVal28, 1.000000)
				if registerVal6 then
					registerVal28 = CoD.GetCombatRecordStatForPath(registerVal6, ("ItemStats." .. index7 .. ".stats.kills"))
				end
				local registerVal29 = Engine.CreateModel(registerVal13, "statComparison")
				Engine.SetModelValue(registerVal29, registerVal28)
				registerVal28 = CoD.BlackMarketUtility.IsUnreleasedBlackMarketItem(registerVal23)
				if not registerVal28 then
					registerVal28 = Dvar.ui_enablePromoMenu:get()
					if not arg1 or not CoD.ContractWeaponTiers[registerVal23] then
						table.insert(arg1.weapons, registerVal13)
					end
				end
			end
		end
	end
	local function __FUNC_6430D_(arg0, arg1)
		local registerVal2 = CoD.SafeGetModelValue(arg0, "isBMClassified")
		local registerVal3 = CoD.SafeGetModelValue(arg1, "isBMClassified")
		if registerVal2 and not registerVal3 then
			return false
		else
			if not registerVal2 and registerVal3 then
				return true
			end
		end
		local registerVal4 = CoD.SafeGetModelValue(arg0, "isContractClassified")
		local registerVal5 = CoD.SafeGetModelValue(arg1, "isContractClassified")
		if registerVal4 and not registerVal5 then
			return false
		else
			if not registerVal4 and registerVal5 then
				return true
			end
		end
		local registerVal6 = Engine.GetModelValue(Engine.GetModel(arg0, "stat"))
		local registerVal7 = Engine.GetModelValue(Engine.GetModel(arg1, "stat"))
		if registerVal6 == registerVal7 then
			local registerVal8 = Engine.Localize(Engine.GetModelValue(Engine.GetModel(arg0, "name")))
			local registerVal9 = Engine.Localize(Engine.GetModelValue(Engine.GetModel(arg1, "name")))
			if registerVal8 >= registerVal9 then
			end
			return true
		end
		if registerVal7 >= registerVal6 then
		end
		return true
	end

	table.sort(arg1.weapons, __FUNC_6430D_)
end

registerVal2.prepare = __FUNC_637E9_
local function __FUNC_645ED_(arg0)
	return #arg0.weapons
end

registerVal2.getCount = __FUNC_645ED_
local function __FUNC_6463D_(arg0, arg1, arg2)
	return arg1.weapons[arg2]
end

registerVal2.getItem = __FUNC_6463D_
local function __FUNC_64695_(arg0)
	if arg0.rootModel then
		Engine.UnsubscribeAndFreeModel(arg0.rootModel)
		arg0.rootModel = nil
	end
end

registerVal2.cleanup = __FUNC_64695_
DataSources["CombatRecordWeaponsList"] = registerVal2
registerVal2 = {}
local function __FUNC_6473D_(arg0, arg1, arg2)
	arg1.bubbleGumBuffs = {}
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal3, "combatRecordBGBListModel")
	arg1.rootModel = registerVal4
	local registerVal5 = CoD.GetCombatRecordStats(arg0)
	local registerVal6 = CoD.GetCombatRecordComparisonStats(arg0)
	for index7=0.000000, 255.000000, 1.000000 do
		local registerVal11 = Engine.GetLoadoutSlotForItem(index7, CoD.GetCombatRecordMode())
		local registerVal12 = CoD.CACUtility.GetDLCIdForBubbleGum(index7)
		local registerVal13 = CoD.IsHiddenDLC(CoD.ProductBitFromId[registerVal12])
		if registerVal11 == "equippedbubblegumpack" and not registerVal13 then
			registerVal13 = Engine.CreateModel(registerVal4, index7)
			local registerVal15 = Engine.CreateModel(registerVal13, "name")
			Engine.SetModelValue(registerVal15, Engine.GetItemName(index7, CoD.GetCombatRecordMode()))
			local registerVal14 = CoD.GetCombatRecordStatForPath(registerVal5, ("ItemStats." .. index7 .. ".stats.used"))
			local registerVal16 = Engine.CreateModel(registerVal13, "itemIndex")
			Engine.SetModelValue(registerVal16, index7)
			registerVal16 = Engine.CreateModel(registerVal13, "stat")
			Engine.SetModelValue(registerVal16, registerVal14)
			if registerVal6 then
				registerVal16 = CoD.GetCombatRecordStatForPath(registerVal6, ("ItemStats." .. index7 .. ".stats.used"))
			end
			local registerVal17 = Engine.CreateModel(registerVal13, "statComparison")
			Engine.SetModelValue(registerVal17, registerVal16)
			table.insert(arg1.bubbleGumBuffs, registerVal13)
		end
	end
	local function __FUNC_64CD8_(arg0, arg1)
		local registerVal2 = Engine.GetModelValue(Engine.GetModel(arg0, "stat"))
		local registerVal3 = Engine.GetModelValue(Engine.GetModel(arg1, "stat"))
		if registerVal2 == registerVal3 then
			local registerVal4 = Engine.Localize(Engine.GetModelValue(Engine.GetModel(arg0, "name")))
			local registerVal5 = Engine.Localize(Engine.GetModelValue(Engine.GetModel(arg1, "name")))
			if registerVal4 >= registerVal5 then
			end
			return true
		end
		if registerVal3 >= registerVal2 then
		end
		return true
	end

	table.sort(arg1.bubbleGumBuffs, __FUNC_64CD8_)
end

registerVal2.prepare = __FUNC_6473D_
local function __FUNC_64E83_(arg0)
	return #arg0.bubbleGumBuffs
end

registerVal2.getCount = __FUNC_64E83_
local function __FUNC_64ED8_(arg0, arg1, arg2)
	return arg1.bubbleGumBuffs[arg2]
end

registerVal2.getItem = __FUNC_64ED8_
local function __FUNC_64F38_(arg0)
	if arg0.rootModel then
		Engine.UnsubscribeAndFreeModel(arg0.rootModel)
		arg0.rootModel = nil
	end
end

registerVal2.cleanup = __FUNC_64F38_
DataSources["CombatRecordBGBList"] = registerVal2
registerVal2 = {}
local function __FUNC_64FE1_(arg0, arg1, arg2)
	arg1.maps = {}
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal3, "CombatRecordZMMapsList")
	local registerVal5 = CoD.GetCombatRecordStats(arg0)
	local registerVal6, registerVal7, registerVal8 = pairs(CoD.mapsTable)
	for index9,value10 in registerVal6, registerVal7, registerVal8 do
		local registerVal11 = Engine.GetDLCBitForMapName(index9)
		local registerVal12 = CoD.IsHiddenDLC(registerVal11)
		if value10.session_mode == Enum.eModes.MODE_ZOMBIES and not registerVal12 and registerVal5.PlayerStatsByMap and registerVal5.PlayerStatsByMap[index9] then
			local registerVal13 = Engine.CreateModel(registerVal4, index9)
			local registerVal18 = registerVal5.PlayerStatsByMap[index9].stats.HIGHEST_ROUND_REACHED.statValue:get()
			registerVal18 = registerVal5.PlayerStatsByMap[index9].stats.TOTAL_ROUNDS_SURVIVED.statValue:get()
			registerVal18 = registerVal5.PlayerStatsByMap[index9].stats.TOTAL_GAMES_PLAYED.statValue:get()
			registerVal18 = registerVal5.PlayerStatsByMap[index9].stats.TOTAL_DOWNS.statValue:get()
			local registerVal19 = Engine.CreateModel(registerVal13, "name")
			Engine.SetModelValue(registerVal19, MapNameToLocalizedMapName(index9))
			registerVal19 = Engine.CreateModel(registerVal13, "highestRound")
			Engine.SetModelValue(registerVal19, registerVal18)
			registerVal19 = Engine.CreateModel(registerVal13, "avgDowns")
			local registerVal21 = math.max(1.000000, registerVal18)
			Engine.SetModelValue(registerVal19, math.floor(((registerVal18 / registerVal21) + 0.500000)))
			registerVal19 = Engine.CreateModel(registerVal13, "avgRounds")
			registerVal21 = math.max(1.000000, registerVal18)
			Engine.SetModelValue(registerVal19, math.floor(((registerVal18 / registerVal21) + 0.500000)))
			registerVal19 = Engine.CreateModel(registerVal13, "stat")
			Engine.SetModelValue(registerVal19, registerVal18)
			registerVal19 = Engine.CreateModel(registerVal13, "previewImage")
			Engine.SetModelValue(registerVal19, value10.previewImage)
			table.insert(arg1.maps, registerVal13)
		end
	end
	local function __FUNC_65720_(arg0, arg1)
		local registerVal2 = Engine.GetModelValue(Engine.GetModel(arg0, "stat"))
		local registerVal3 = Engine.GetModelValue(Engine.GetModel(arg1, "stat"))
		if registerVal3 >= registerVal2 then
		end
		return true
	end

	table.sort(arg1.maps, __FUNC_65720_)
end

registerVal2.prepare = __FUNC_64FE1_
local function __FUNC_65807_(arg0)
	return #arg0.maps
end

registerVal2.getCount = __FUNC_65807_
local function __FUNC_65852_(arg0, arg1, arg2)
	return arg1.maps[arg2]
end

registerVal2.getItem = __FUNC_65852_
DataSources["CombatRecordZMMapsList"] = registerVal2
registerVal2 = {}
local function __FUNC_658A6_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "CombatRecordCPPercentComplete")
	local function __FUNC_66625_(arg0, arg1)
		if CoD.mapsTable[arg0].unique_id >= CoD.mapsTable[arg1].unique_id then
		end
		return true
	end

	local registerVal31 = Engine.StorageGetBuffer(arg0, Enum.StorageFileType.STORAGE_CP_STATS_ONLINE)
	if CoD.CombatRecordOtherPlayerStats then
		local registerVal32 = Engine.GetOtherPlayerStatsBuffer()
	end
	registerVal32 = Engine.GetPlayerStatsNightmare(arg0)
	local registerVal33, registerVal34, registerVal35 = LUI.IterateTableBySortedKeys(CoD.mapsTable, __FUNC_66625_, nil)
	for index36,value37 in registerVal33, registerVal34, registerVal35 do
		if value37.session_mode == Enum.eModes.MODE_CAMPAIGN and index36 ~= "cp_doa_bo3" and value37.dlc_pack ~= -1.000000 and value37.isSubLevel == false then
			if value37.campaign_mode == Enum.CampaignMode.CAMPAIGNMODE_DEFAULT then
				local registerVal38 = CoD.GetCombatRecordStatForPath(registerVal32, ("PlayerStatsByMap." .. value37.rootMapName .. ".hasBeenCompleted"))
				if registerVal38 == 0.000000 then
				end
				if true then
				end
				local registerVal39, registerVal40 = GetAccoladesXOfY(arg0, index36, true)
				local registerVal41, registerVal42 = GetCollectiblesXOfY(arg0, index36, true)
			else
				if value37.campaign_mode == Enum.CampaignMode.CAMPAIGNMODE_ZOMBIES then
					registerVal38 = registerVal32.PlayerStatsByMap[value37.rootMapName].hasBeenCompleted:get()
					if registerVal38 == 0.000000 then
					end
					if true then
					end
				end
			end
		end
	end
	for index33=0.000000, 255.000000, 1.000000 do
		local registerVal37 = Engine.GetItemAllocationCost(index33, Enum.eModes.MODE_CAMPAIGN)
		if 0.000000 <= registerVal37 then
			registerVal37 = Engine.GetLoadoutSlotForItem(index33, Enum.eModes.MODE_CAMPAIGN)
			registerVal38 = Engine.GetItemGroup(index33, Enum.eModes.MODE_CAMPAIGN)
			if registerVal37 ~= "primary" and registerVal37 ~= "secondary" and registerVal37 == "primarygadget" or registerVal37 == "secondarygadget" then
				registerVal39 = Engine.IsItemPurchased(arg0, index33, Enum.eModes.MODE_CAMPAIGN)
				if registerVal39 then
				else
					if registerVal38 == "cybercom_abilities" or registerVal38 == "cybercom_tacrig" then
						registerVal39 = Engine.GetItemRef(index33, Enum.eModes.MODE_CAMPAIGN)
						registerVal40 = Engine.IsItemPurchased(arg0, index33, Enum.eModes.MODE_CAMPAIGN)
						if registerVal39 ~= "cybercom_multicore_pro" and registerVal40 then
						end
					end
				end
			end
		end
	end
	registerVal33 = Engine.GetChallengeInfoForImages(arg0, nil, Enum.eModes.MODE_CAMPAIGN)
	registerVal34, registerVal35, registerVal36 = ipairs(registerVal33)
	for index37,value38 in registerVal34, registerVal35, registerVal36 do
		if not value38.isMastery and not value38.isLocked then
		end
	end
	for index34=0.000000, (12.000000 - 1.000000), 1.000000 do
		registerVal41 = tostring(index34)
		registerVal38 = CoD.GetCombatRecordStatForPath(registerVal32, ("PlayerCPDecorations." .. registerVal41))
		if registerVal38 ~= 0.000000 then
		end
	end
	for index34=1.000000, 3.000000, 1.000000 do
		registerVal41 = tostring(index34)
		registerVal38 = CoD.GetCombatRecordStatForPath(registerVal32, ("trainingSimStats.ranksAchieved." .. registerVal41))
		if registerVal38 ~= 0.000000 then
		end
	end
	if 0.000000 < (0.000000 + 1.000000) then
		registerVal35 = LUI.clamp(((0.000000 + 1.000000) / (0.000000 + 1.000000)), 0.000000, 1.000000)
		registerVal35 = LUI.clamp(((0.000000 + registerVal39) / (0.000000 + registerVal40)), 0.000000, 1.000000)
		registerVal35 = LUI.clamp(((0.000000 + registerVal41) / (0.000000 + registerVal42)), 0.000000, 1.000000)
		registerVal35 = LUI.clamp(((0.000000 + 1.000000) / (0.000000 + 1.000000)), 0.000000, 1.000000)
		registerVal35 = LUI.clamp(((0.000000 + 1.000000) / (0.000000 + 1.000000)), 0.000000, 1.000000)
		registerVal35 = LUI.clamp(((0.000000 + 1.000000) / (0.000000 + 1.000000)), 0.000000, 1.000000)
		registerVal35 = LUI.clamp(((0.000000 + 1.000000) / 12.000000), 0.000000, 1.000000)
		registerVal35 = LUI.clamp(((0.000000 + 1.000000) / 3.000000), 0.000000, 1.000000)
	end
	if 99.990000 < ((((((((0.000000 + (registerVal35 * 35.000000)) + (registerVal35 * 15.000000)) + (registerVal35 * 8.000000)) + (registerVal35 * 10.000000)) + (registerVal35 * 10.000000)) + (registerVal35 * 10.000000)) + (registerVal35 * 10.000000)) + (registerVal35 * 2.000000)) then
		registerVal35 = LUI.clamp(((0.000000 + 1.000000) / (0.000000 + 1.000000)), 0.000000, 1.000000)
	end
	if (((((((((0.000000 + (registerVal35 * 35.000000)) + (registerVal35 * 15.000000)) + (registerVal35 * 8.000000)) + (registerVal35 * 10.000000)) + (registerVal35 * 10.000000)) + (registerVal35 * 10.000000)) + (registerVal35 * 10.000000)) + (registerVal35 * 2.000000)) + (registerVal35 * 9.000000)) == (((((((((0.000000 + (registerVal35 * 35.000000)) + (registerVal35 * 15.000000)) + (registerVal35 * 8.000000)) + (registerVal35 * 10.000000)) + (registerVal35 * 10.000000)) + (registerVal35 * 10.000000)) + (registerVal35 * 10.000000)) + (registerVal35 * 2.000000)) + (registerVal35 * 9.000000)) then
		registerVal36 = string.format("%.1f%%", (((((((((0.000000 + (registerVal35 * 35.000000)) + (registerVal35 * 15.000000)) + (registerVal35 * 8.000000)) + (registerVal35 * 10.000000)) + (registerVal35 * 10.000000)) + (registerVal35 * 10.000000)) + (registerVal35 * 10.000000)) + (registerVal35 * 2.000000)) + (registerVal35 * 9.000000)))
	end
	registerVal37 = Engine.CreateModel(registerVal1, "percent")
	Engine.SetModelValue(registerVal37, registerVal36)
	if not CoD.CombatRecordOtherPlayerStats then
		registerVal37 = Engine.CreateModel(registerVal1, "localPlayerPercent")
		Engine.SetModelValue(registerVal37, registerVal36)
	end
	return registerVal1
end

registerVal2.getModel = __FUNC_658A6_
DataSources["CombatRecordCPPercentComplete"] = registerVal2
registerVal2 = {}
local function __FUNC_666E7_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "CombatRecordTotalWeaponAccuracy")
	local registerVal4 = CoD.GetCombatRecordStats(arg0)
	for index5=0.000000, 255.000000, 1.000000 do
		local registerVal9 = Engine.GetItemAllocationCost(index5, CoD.GetCombatRecordMode())
		if 0.000000 <= registerVal9 then
			registerVal9 = Engine.GetLoadoutSlotForItem(index5, CoD.GetCombatRecordMode())
			if registerVal9 ~= "primary" and registerVal9 == "secondary" or registerVal9 == "heroweapon" then
				local registerVal10 = CoD.GetCombatRecordStatForPath(registerVal4, ("ItemStats." .. index5 .. ".stats.shots"))
				registerVal10 = CoD.GetCombatRecordStatForPath(registerVal4, ("ItemStats." .. index5 .. ".stats.hits"))
				registerVal10 = CoD.GetCombatRecordStatForPath(registerVal4, ("ItemStats." .. index5 .. ".stats.headshots"))
			end
		end
	end
	if 0.000000 < ((0.000000 + registerVal10) + (0.500000 * registerVal10)) then
	end
	if 0.000000 < (0.000000 + registerVal10) then
		local registerVal6 = LUI.clamp(((((0.000000 + registerVal10) + (0.500000 * registerVal10)) / (0.000000 + registerVal10)) * 100.000000), 0.000000, 100.000000)
	end
	if registerVal6 ~= registerVal6 then
		local registerVal7 = Engine.CreateModel(registerVal1, "percent")
		Engine.SetModelValue(registerVal7, "-")
	else
		registerVal7 = Engine.CreateModel(registerVal1, "percent")
		Engine.SetModelValue(registerVal7, string.format("%.1f%%", registerVal6))
	end
	return registerVal1
end

registerVal2.getModel = __FUNC_666E7_
DataSources["CombatRecordTotalWeaponAccuracy"] = registerVal2
registerVal2 = {}
local function __FUNC_66B84_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "FavoriteSpecialist")
	registerVal2 = CoD.GetCombatRecordStats(arg0)
	local registerVal3 = Engine.GetHeroList(Enum.eModes.MODE_MULTIPLAYER)
	local registerVal10, registerVal11, registerVal12 = ipairs(registerVal3)
	for index13,value14 in registerVal10, registerVal11, registerVal12 do
		if value14.disabled ~= true then
			local registerVal15 = Engine.GetLoadoutItemIndexForHero(Enum.eModes.MODE_MULTIPLAYER, (index13 - 1.000000), Enum.heroLoadoutTypes_e.HERO_LOADOUT_TYPE_WEAPON)
			local registerVal16 = CoD.GetCombatRecordStatForPath(registerVal2, ("ItemStats." .. registerVal15 .. ".stats.kills"))
			local registerVal18 = Engine.CurrentSessionMode()
			local registerVal17 = Engine.GetLoadoutItemIndexForHero(registerVal18, (index13 - 1.000000), Enum.heroLoadoutTypes_e.HERO_LOADOUT_TYPE_GADGET)
			registerVal18 = CoD.GetCombatRecordStatForPath(registerVal2, ("ItemStats." .. registerVal17 .. ".stats.combatRecordStat"))
			if index13 == 10.000000 then
				local registerVal19 = CoD.GetCombatRecordStatForPath(registerVal2, "SpecialistStats.9.stats.kills_weapon")
				registerVal19 = CoD.GetCombatRecordStatForPath(registerVal2, "SpecialistStats.9.stats.kills_ability")
			end
			if 0.000000 >= registerVal19 and 0.000000 < registerVal19 or nil == nil then
				if 0.000000 <= registerVal19 then
					registerVal19 = CoD.GetCombatRecordStatForPath(registerVal2, ("ItemStats." .. registerVal15 .. ".stats.used"))
				else
					registerVal19 = CoD.GetCombatRecordStatForPath(registerVal2, ("ItemStats." .. registerVal17 .. ".stats.used"))
				end
			end
		end
	end
	if registerVal19 == 0.000000 then
		registerVal11 = string.format("%.2f", 0.000000)
	else
		registerVal11 = math.floor((((registerVal19 / registerVal19) * 100.000000) + 0.500000))
		registerVal11 = string.format("%.2f", (registerVal11 / 100.000000))
	end
	registerVal12 = Engine.CreateModel(registerVal1, "displayString")
	registerVal15 = Engine.Localize(value14.displayName)
	Engine.SetModelValue(registerVal12, Engine.Localize("MENU_FAVORITE_SPECIALIST_STATS", registerVal15, Engine.Localize(Engine.GetItemName(registerVal17))))
	registerVal12 = Engine.CreateModel(registerVal1, "heroIndex")
	Engine.SetModelValue(registerVal12, (index13 - 1.000000))
	registerVal12 = Engine.CreateModel(registerVal1, "heroImage")
	Engine.SetModelValue(registerVal12, value14.defaultHeroRender)
	registerVal12 = Engine.CreateModel(registerVal1, "heroName")
	Engine.SetModelValue(registerVal12, Engine.Localize(value14.displayName))
	registerVal12 = Engine.CreateModel(registerVal1, "itemIndex")
	Engine.SetModelValue(registerVal12, registerVal17)
	registerVal12 = Engine.CreateModel(registerVal1, "killsPerUse")
	Engine.SetModelValue(registerVal12, registerVal11)
	registerVal12 = Engine.CreateModel(registerVal1, "numKills")
	Engine.SetModelValue(registerVal12, registerVal19)
	registerVal12 = Engine.CreateModel(registerVal1, "numUses")
	Engine.SetModelValue(registerVal12, registerVal19)
	return registerVal1
end

registerVal2.getModel = __FUNC_66B84_
DataSources["FavoriteSpecialist"] = registerVal2
registerVal2 = {}
local function __FUNC_674CE_(arg0, arg1, arg2)
	local function __FUNC_67542_(arg0, arg1, arg2)
		local registerVal3 = LUI.GridLayout.createWidgetFromDataSource(arg0, arg1, arg2)
		return registerVal3
	end

	arg1.createWidgetFromDataSource = __FUNC_67542_
	local function __FUNC_675E1_(arg0, arg1)
		LUI.GridLayout.updateLayout(arg0, arg1)
		arg0:dispatchEventToParent("child_size_updated")
	end

	arg1.updateLayout = __FUNC_675E1_
end

registerVal2.prepare = __FUNC_674CE_
local function __FUNC_676B2_(arg0)
	if not arg0.subobjectiveListModel then
		return 0.000000
	end
	return DataSources.SubobjectivesList.getCountFromModel(arg0.subobjectiveListModel)
end

registerVal2.getCount = __FUNC_676B2_
local function __FUNC_67797_(arg0, arg1, arg2)
	if not arg1.subobjectiveListModel then
		return nil
	end
	return Engine.GetModel(arg1.subobjectiveListModel, arg2)
end

registerVal2.getItem = __FUNC_67797_
local function __FUNC_67845_(arg0)
	local registerVal1 = Engine.GetModel(arg0, "count")
	if registerVal1 then
		return Engine.GetModelValue(registerVal1)
	end
	return 0.000000
end

registerVal2["getCountFromModel"] = __FUNC_67845_
local function __FUNC_67905_(arg0, arg1, arg2)
	local registerVal3 = DataSources.SubobjectivesList.getCountFromModel(arg0)
	local registerVal4 = Engine.GetModel(arg0, "count")
	if registerVal4 then
		Engine.SetModelValue(registerVal4, (registerVal3 + 1.000000))
	end
	local registerVal5 = Engine.CreateModel(arg0, (registerVal3 + 1.000000))
	local registerVal7 = Engine.CreateModel(registerVal5, "text")
	Engine.SetModelValue(registerVal7, arg1)
	registerVal7 = Engine.CreateModel(registerVal5, "status")
	Engine.SetModelValue(registerVal7, arg2)
end

registerVal2["addSubObjective"] = __FUNC_67905_
DataSources["SubobjectivesList"] = registerVal2
registerVal2 = {}
local function __FUNC_67AE7_(arg0, arg1, arg2)
	local function __FUNC_67BA4_(arg0, arg1)
		arg0:updateLayout(0.000000)
		return true
	end

	arg1:registerEventHandler("child_size_updated", __FUNC_67BA4_)
	local function __FUNC_67BFF_(arg0, arg1, arg2)
		local registerVal3 = LUI.GridLayout.createWidgetFromDataSource(arg0, arg1, arg2)
		local registerVal5 = Engine.GetModel(arg2, "subobjectivesList")
		registerVal3.internal.subobjectivesList.subobjectiveListModel = registerVal5
		registerVal3.internal.subobjectivesList:updateDataSource()
		return registerVal3
	end

	arg1.createWidgetFromDataSource = __FUNC_67BFF_
	local function __FUNC_67D7D_(arg0, arg1)
		LUI.GridLayout.updateLayout(arg0, arg1)
		arg0:dispatchEventToParent("child_size_updated")
	end

	arg1.updateLayout = __FUNC_67D7D_
end

registerVal2.prepare = __FUNC_67AE7_
local function __FUNC_67E4E_(arg0)
	if not arg0.objectiveListModel then
		return 0.000000
	end
	return DataSources.ObjectivesList.getCountFromModel(arg0.objectiveListModel)
end

registerVal2.getCount = __FUNC_67E4E_
local function __FUNC_67F2D_(arg0, arg1, arg2)
	if not arg1.objectiveListModel then
		return nil
	end
	return Engine.GetModel(arg1.objectiveListModel, arg2)
end

registerVal2.getItem = __FUNC_67F2D_
local function __FUNC_67FDA_(arg0)
	local registerVal1 = Engine.GetModel(arg0, "count")
	if registerVal1 then
		return Engine.GetModelValue(registerVal1)
	end
	return 0.000000
end

registerVal2["getCountFromModel"] = __FUNC_67FDA_
local function __FUNC_68099_(arg0, arg1, arg2, arg3)
	local registerVal4 = DataSources.ObjectivesList.getCountFromModel(arg0)
	local registerVal5 = Engine.GetModel(arg0, "count")
	if registerVal5 then
		Engine.SetModelValue(registerVal5, (registerVal4 + 1.000000))
	end
	local registerVal6 = Engine.CreateModel(arg0, (registerVal4 + 1.000000))
	local registerVal8 = Engine.CreateModel(registerVal6, "displayText")
	Engine.SetModelValue(registerVal8, Engine.Localize(arg1))
	registerVal8 = Engine.CreateModel(registerVal6, "status")
	Engine.SetModelValue(registerVal8, arg2)
	local registerVal7 = Engine.CreateModel(registerVal6, "subobjectivesList")
	local registerVal9 = Engine.CreateModel(registerVal7, "count")
	Engine.SetModelValue(registerVal9, 0.000000)
	registerVal8, registerVal9, registerVal10 = ipairs(arg3)
	for index11,value12 in registerVal8, registerVal9, registerVal10 do
		local registerVal15 = Engine.Localize(value12.desc)
		DataSources.SubobjectivesList.addSubObjective(registerVal7, registerVal15, value12.status)
	end
end

registerVal2["addObjective"] = __FUNC_68099_
DataSources["ObjectivesList"] = registerVal2
registerVal2 = {}
local function __FUNC_683CF_(arg0, arg1, arg2)
	local registerVal3 = {}
	registerVal3 = {"active", "done"}
	arg1.objectiveOrder = registerVal3
	arg1.objectiveCategories = {}
	local function __FUNC_68E10_(arg0, arg1)
		arg0:updateLayout(0.000000)
		return true
	end

	arg1:registerEventHandler("child_size_updated", __FUNC_68E10_)
	local function __FUNC_68E6B_(arg0, arg1, arg2)
		local registerVal3 = LUI.GridLayout.createWidgetFromDataSource(arg0, arg1, arg2)
		local registerVal5 = Engine.GetModel(arg2, "objectivesList")
		registerVal3.internal.objectivesList.objectiveListModel = registerVal5
		registerVal3.internal.objectivesList:updateDataSource()
		return registerVal3
	end

	arg1.createWidgetFromDataSource = __FUNC_68E6B_
	if CoD.isCampaign then
		registerVal3 = Engine.GetPlayerObjectives(arg0)
		if registerVal3 == nil then
			return 
		end
		local registerVal5, registerVal6, registerVal7 = CoD.pairsByKeys(registerVal3)
		for index8,value9 in registerVal5, registerVal6, registerVal7 do
			if value9.status ~= "invisible" and value9.objective_desc ~= nil and value9.objective_desc ~= "" then
				if value9.status ~= "current" and value9.status == "active" or value9.status == "failed" then
				end
				if not {}[value9.objective_desc] then
					local registerVal12 = {}
					registerVal12.desc = value9.objective_desc
					registerVal12.status = "active"
					registerVal12.subobjectives = {}
					{}[value9.objective_desc] = registerVal12
				end
				if value9.subobjective_desc ~= "" then
					local registerVal14 = {}
					registerVal14.status = value9.status
					registerVal14.desc = value9.subobjective_desc
					table.insert({}[value9.objective_desc].subobjectives, registerVal14)
				end
				if {}[value9.objective_desc].status == "done" and "active" == "active" then
					{}[value9.objective_desc].status = "active"
				end
			end
		end
		registerVal6, registerVal7, registerVal8 = CoD.pairsByKeys({})
		for index9,value10 in registerVal6, registerVal7, registerVal8 do
			if not {}[value10.status] then
				{}[value10.status] = {}
			end
			table.insert({}[value10.status], value10)
		end
		registerVal7 = Engine.GetModelForController(arg0)
		registerVal6 = Engine.CreateModel(registerVal7, "CurrentObjectivesList")
		registerVal7, registerVal8, registerVal9 = CoD.pairsByKeys({})
		for index10,value11 in registerVal7, registerVal8, registerVal9 do
			registerVal12 = Engine.CreateModel(registerVal6, index10)
			registerVal14 = Engine.CreateModel(registerVal12, "status")
			Engine.SetModelValue(registerVal14, index10)
			registerVal14 = Engine.CreateModel(registerVal12, "category")
			local registerVal17 = Engine.ToUpper(index10)
			Engine.SetModelValue(registerVal14, Engine.Localize(("MENU_" .. registerVal17 .. "_OBJECTIVES_CAPS")))
			local registerVal13 = Engine.CreateModel(registerVal12, "objectivesList")
			local registerVal15 = Engine.CreateModel(registerVal13, "count")
			Engine.SetModelValue(registerVal15, 0.000000)
			registerVal14, registerVal15, registerVal16 = ipairs(value11)
			for index17,value18 in registerVal14, registerVal15, registerVal16 do
				DataSources.ObjectivesList.addObjective(registerVal13, value18.desc, value18.status, value18.subobjectives)
			end
			arg1.objectiveCategories[index10] = registerVal12
		end
	else
		local registerVal4 = Engine.GetModelForController(arg0)
		registerVal3 = Engine.CreateModel(registerVal4, "GameObjectiveList")
		registerVal4 = Engine.CreateModel(registerVal3, "gameMode")
		registerVal5 = Engine.DvarString(nil, "g_gametype")
		registerVal6 = Engine.Localize(("MPUI_" .. registerVal5))
		registerVal7 = Engine.TableLookup(arg0, CoD.gametypesTable, 0.000000, 0.000000, 1.000000, registerVal5, 3.000000)
		registerVal9 = Engine.CreateModel(registerVal4, "status")
		Engine.SetModelValue(registerVal9, "active")
		registerVal9 = Engine.CreateModel(registerVal4, "category")
		Engine.SetModelValue(registerVal9, Engine.Localize("GAME MODE"))
		registerVal8 = Engine.CreateModel(registerVal4, "objectivesList")
		local registerVal10 = Engine.CreateModel(registerVal8, "count")
		Engine.SetModelValue(registerVal10, 0.000000)
		registerVal13 = {}
		registerVal14 = {}
		registerVal14.status = "description"
		registerVal14.desc = registerVal7
		registerVal13 = {registerVal14}
		DataSources.ObjectivesList.addObjective(registerVal8, registerVal6, "active", registerVal13)
		arg1.objectiveCategories.active = registerVal4
	end
end

registerVal2.prepare = __FUNC_683CF_
local function __FUNC_68FE3_(arg0)
	local registerVal2, registerVal3, registerVal4 = ipairs(arg0.objectiveOrder)
	for index5,value6 in registerVal2, registerVal3, registerVal4 do
		if arg0.objectiveCategories[value6] then
		end
	end
	return (0.000000 + 1.000000)
end

registerVal2.getCount = __FUNC_68FE3_
local function __FUNC_690A7_(arg0, arg1, arg2)
	local registerVal4, registerVal5, registerVal6 = ipairs(arg1.objectiveOrder)
	for index7,value8 in registerVal4, registerVal5, registerVal6 do
		if arg1.objectiveCategories[value8] and (0.000000 + 1.000000) == arg2 then
			return arg1.objectiveCategories[value8]
		end
	end
	return nil
end

registerVal2.getItem = __FUNC_690A7_
DataSources["CurrentObjectivesList"] = registerVal2
registerVal2 = {}
local function __FUNC_69193_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "DeadOpsArcadeGlobal")
	Engine.CreateModel(registerVal1, "redins")
	Engine.CreateModel(registerVal1, "countdown")
	Engine.CreateModel(registerVal1, "gbanner")
	Engine.CreateModel(registerVal1, "grgb1")
	Engine.CreateModel(registerVal1, "grgb2")
	Engine.CreateModel(registerVal1, "grgb3")
	Engine.CreateModel(registerVal1, "gtxt0")
	Engine.CreateModel(registerVal1, "gpr0")
	Engine.CreateModel(registerVal1, "gpr1")
	Engine.CreateModel(registerVal1, "gpr2")
	Engine.CreateModel(registerVal1, "gpr3")
	Engine.CreateModel(registerVal1, "level")
	return registerVal1
end

registerVal2.getModel = __FUNC_69193_
DataSources["DeadOpsArcadeGlobal"] = registerVal2
registerVal2 = {}
local function __FUNC_6944D_(arg0, arg1)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "DeadOpsArcadePlayers")
	registerVal4 = Engine.GetModel(registerVal3, ("player" .. (arg1 + 1.000000)))
	if registerVal4 ~= nil then
		local registerVal5 = Engine.GetPlayerListData(arg0, arg1)
		if registerVal5.playerName ~= nil and registerVal5.playerConnected then
			local registerVal7 = Engine.GetModel(registerVal4, "name")
			Engine.SetModelValue(registerVal7, registerVal5.playerName)
		else
			registerVal7 = Engine.GetModel(registerVal4, "name")
			Engine.SetModelValue(registerVal7, "")
		end
	end
end

registerVal2["updateModelsForClient"] = __FUNC_6944D_
local function __FUNC_69686_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "DeadOpsArcadePlayers")
	for index2=1.000000, 4.000000, 1.000000 do
		local registerVal6 = Engine.GetModel(registerVal1, ("player" .. index2))
		if registerVal6 == nil then
			local registerVal7 = Engine.CreateModel(registerVal1, ("player" .. index2))
			Engine.CreateModel(registerVal7, "name")
			Engine.CreateModel(registerVal7, "lives")
			Engine.CreateModel(registerVal7, "bombs")
			Engine.CreateModel(registerVal7, "boosts")
			Engine.CreateModel(registerVal7, "score")
			Engine.CreateModel(registerVal7, "multiplier")
			Engine.CreateModel(registerVal7, "xbar")
			Engine.CreateModel(registerVal7, "bulletbar")
			Engine.CreateModel(registerVal7, "bulletbar_rgb")
			Engine.CreateModel(registerVal7, "ribbon")
			Engine.CreateModel(registerVal7, "gpr_rgb")
			Engine.CreateModel(registerVal7, "generic_txt")
			Engine.CreateModel(registerVal7, "gpr")
			Engine.CreateModel(registerVal7, "gpr2")
			Engine.CreateModel(registerVal7, "weaplevel1")
			Engine.CreateModel(registerVal7, "weaplevel2")
			Engine.CreateModel(registerVal7, "respawn")
			DataSources.DeadOpsArcadePlayers.updateModelsForClient(arg0, (index2 - 1.000000))
		end
	end
	return registerVal1
end

registerVal2.getModel = __FUNC_69686_
DataSources["DeadOpsArcadePlayers"] = registerVal2
registerVal2 = {}
local registerVal4 = {}
registerVal4["playerName"] = "playerName"
registerVal4["score"] = "playerScore"
registerVal4["rankIcon"] = "playerRankIcon"
registerVal4["rankNum"] = "rankNum"
registerVal4["clanAbbrev"] = "clanAbbrev"
registerVal4["clientNum"] = "clientNum"
registerVal4["playerConnected"] = "playerConnected"
registerVal2["modelLinks"] = registerVal4
local function __FUNC_69B29_(arg0, arg1, arg2)
	arg1.playerListInfoList = {}
	arg1.playerListInfoOrder = {}
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal3, "PlayerList")
	local registerVal6 = Engine.GetClientNum(arg0)
	local registerVal8 = Dvar.com_maxclients:get()
	for index7=0.000000, (registerVal8 - 1.000000), 1.000000 do
		local registerVal11 = Engine.GetPlayerListData(arg0, index7)
		local registerVal12 = Engine.CreateModel(registerVal4, index7)
		local registerVal13, registerVal14, registerVal15 = pairs(DataSources.PlayerList.modelLinks)
		for index16,value17 in registerVal13, registerVal14, registerVal15 do
			local registerVal19 = Engine.CreateModel(registerVal12, value17)
			Engine.SetModelValue(registerVal19, registerVal11[index16])
		end
		registerVal14 = Engine.CreateModel(registerVal12, "objectiveIcon")
		Engine.SetModelValue(registerVal14, "")
		arg1.playerListInfoList[(index7 + 1.000000)] = registerVal12
		registerVal13 = Engine.GetClientNum(arg0)
		if index7 == registerVal13 then
			arg1.playerListInfoOrder[1.000000] = (index7 + 1.000000)
		else
			arg1.playerListInfoOrder[2.000000] = (index7 + 1.000000)
		end
	end
	local function __FUNC_6A0DF_(arg0, arg2)
		DataSources.PlayerList.updateModelsForClient(arg0, arg1, arg2)
	end

	if not arg1.playerConnectedSubscription then
		local registerVal10 = Engine.GetModel(registerVal3, "playerConnected")
		local function __FUNC_6A17C_(arg1)
			local registerVal1 = Engine.GetModelValue(arg1)
			if registerVal1 ~= nil then
				__FUNC_6A0DF_(arg0, registerVal1)
			end
		end

		registerVal8 = arg1:subscribeToModel(registerVal10, __FUNC_6A17C_, false)
		arg1.playerConnectedSubscription = registerVal8
	end
	if not arg1.playerDisconnectedSubscription then
		registerVal10 = Engine.GetModel(registerVal3, "playerDisconnected")
		local function __FUNC_6A200_(arg1)
			local registerVal1 = Engine.GetModelValue(arg1)
			if registerVal1 ~= nil then
				__FUNC_6A0DF_(arg0, registerVal1)
			end
		end

		registerVal8 = arg1:subscribeToModel(registerVal10, __FUNC_6A200_, false)
		arg1.playerDisconnectedSubscription = registerVal8
	end
	if not arg1.hasScoreboardSubscriptions then
		arg1.hasScoreboardSubscriptions = true
		local registerVal9 = Dvar.com_maxclients:get()
		for index8=0.000000, (registerVal9 - 1.000000), 1.000000 do
			registerVal15 = Engine.GetGlobalModel()
			registerVal14 = Engine.GetModel(registerVal15, ("scoreboard.team1." .. index8 .. ".clientNum"))
			local function __FUNC_6A284_(arg1)
				local registerVal1 = Engine.GetModelValue(arg1)
				if registerVal1 ~= nil then
					__FUNC_6A0DF_(arg0, registerVal1)
				end
			end

			arg1:subscribeToModel(registerVal14, __FUNC_6A284_, false)
		end
	end
end

registerVal2.prepare = __FUNC_69B29_
local function __FUNC_6A308_(arg0, arg1, arg2)
	local registerVal3 = DataSources.PlayerList.getModelForPlayer(arg0, arg1, arg2)
	if registerVal3 ~= nil then
		local registerVal4 = Engine.GetPlayerListData(arg0, arg2)
		local registerVal5, registerVal6, registerVal7 = pairs(DataSources.PlayerList.modelLinks)
		for index8,value9 in registerVal5, registerVal6, registerVal7 do
			local registerVal10 = Engine.GetModel(registerVal3, value9)
			if registerVal10 then
				Engine.SetModelValue(registerVal10, registerVal4[index8])
			end
		end
		arg1:updateDataSource()
	end
end

registerVal2["updateModelsForClient"] = __FUNC_6A308_
local function __FUNC_6A4DA_(arg0)
	local registerVal2, registerVal3, registerVal4 = pairs(arg0.playerListInfoList)
	for index5,value6 in registerVal2, registerVal3, registerVal4 do
		local registerVal7 = Engine.GetModel(value6, "playerConnected")
		local registerVal8 = Engine.GetModelValue(registerVal7)
		if registerVal7 and registerVal8 ~= 0.000000 then
		end
	end
	if 1.000000 < (0.000000 + 1.000000) then
		return (0.000000 + 1.000000)
	end
	return 0.000000
end

registerVal2.getCount = __FUNC_6A4DA_
local function __FUNC_6A60B_(arg0, arg1, arg2)
	local registerVal5 = Dvar.com_maxclients:get()
	for index4=1.000000, registerVal5, 1.000000 do
		local registerVal10 = Engine.GetModel(arg1.playerListInfoList[arg1.playerListInfoOrder[index4]], "playerConnected")
		local registerVal11 = Engine.GetModelValue(registerVal10)
		if registerVal10 and registerVal11 ~= 0.000000 and (0.000000 + 1.000000) == arg2 then
			return arg1.playerListInfoList[arg1.playerListInfoOrder[index4]]
		end
	end
	DebugPrint("WARNING: returning invalid playerListInfoList row")
	return arg1.playerListInfoList[arg1.playerListInfoOrder[0.000000]]
end

registerVal2.getItem = __FUNC_6A60B_
local function __FUNC_6A83B_(arg0, arg1, arg2)
	return arg1.playerListInfoList[(arg2 + 1.000000)]
end

registerVal2["getModelForPlayer"] = __FUNC_6A83B_
DataSources["PlayerList"] = registerVal2
registerVal2 = {}
registerVal4 = {}
registerVal4["playerName"] = "playerName"
registerVal4["score"] = "playerScore"
registerVal4["scoreVisible"] = "playerScoreVisible"
registerVal4["rankIcon"] = "playerRankIcon"
registerVal4["rankNum"] = "rankNum"
registerVal4["clanAbbrev"] = "clanAbbrev"
registerVal4["clientNum"] = "clientNum"
registerVal4["playerConnected"] = "playerConnected"
registerVal4["zombiePlayerIcon"] = "zombiePlayerIcon"
registerVal4["zombieInventoryIcon"] = "zombieInventoryIcon"
registerVal4["zombieWearableIcon"] = "zombieWearableIcon"
registerVal4["playerScoreShown"] = "playerScoreShown"
registerVal2["modelLinks"] = registerVal4
local function __FUNC_6A8A5_(arg0, arg1, arg2)
	arg1.playerSlots = {}
	arg1.playerListInfoList = {}
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal3, "PlayerList")
	local registerVal5, registerVal6, registerVal7 = pairs(arg1.modelSubscriptions)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		arg1:removeSubscription(value9)
	end
	arg1.modelSubscriptions = {}
	registerVal5 = Engine.GetClientNum(arg0)
	local function __FUNC_6B346_(arg0, arg1)
		if arg0 == arg1 then
			return 1.000000
		end
		if arg0 < arg1 then
			return (2.000000 + arg0)
		end
		return (1.000000 + arg0)
	end

	local function __FUNC_6B3A2_(arg0, arg1, arg2, arg3)
		local registerVal4 = Engine.GetModel(arg0, ("zmInventory.player" .. arg1 .. arg2))
		if registerVal4 then
			local registerVal5 = Engine.GetModelValue(registerVal4)
			arg3[arg2] = registerVal5
			Engine.UnsubscribeAndFreeModel(registerVal4)
			Engine.CreateModel(arg0, ("zmInventory.player" .. arg1 .. arg2))
		end
	end

	local registerVal9 = Dvar.com_maxclients:get()
	for index8=0.000000, (registerVal9 - 1.000000), 1.000000 do
		local registerVal12 = __FUNC_6B346_(index8, registerVal5)
		local registerVal13 = Engine.GetPlayerListData(arg0, index8)
		local registerVal14 = Engine.CreateModel(registerVal4, (registerVal12 - 1.000000))
		local registerVal15, registerVal16, registerVal17 = pairs(DataSources.PlayerListZM.modelLinks)
		for index18,value19 in registerVal15, registerVal16, registerVal17 do
			local registerVal21 = Engine.CreateModel(registerVal14, value19)
			Engine.SetModelValue(registerVal21, registerVal13[index18])
		end
		__FUNC_6B3A2_(registerVal3, index8, "hasItem", registerVal13)
		__FUNC_6B3A2_(registerVal3, index8, "wearableItem", registerVal13)
		if registerVal13.playerConnected == 1.000000 then
			if registerVal13.clientNum == registerVal5 then
				table.insert(arg1.playerSlots, 1.000000, registerVal13)
			else
				table.insert(arg1.playerSlots, registerVal13)
			end
		end
		arg1.playerListInfoList[registerVal12] = registerVal14
	end
	local registerVal8, registerVal9, registerVal10 = ipairs(arg1.playerSlots)
	for index11,value12 in registerVal8, registerVal9, registerVal10 do
		registerVal13 = Engine.CreateModel(registerVal4, (index11 - 1.000000))
		registerVal14, registerVal15, registerVal16 = pairs(DataSources.PlayerListZM.modelLinks)
		for index17,value18 in registerVal14, registerVal15, registerVal16 do
			local registerVal20 = Engine.CreateModel(registerVal13, value18)
			Engine.SetModelValue(registerVal20, value12[index17])
		end
		if CoD.Zombie.InventoryIcon ~= nil then
			registerVal14 = Engine.CreateModel(registerVal3, ("zmInventory.player" .. value12.clientNum .. "hasItem"))
			if not arg1.playerSlots[index11].hasItem then
			end
			Engine.SetModelValue(registerVal14, 0.000000)
			local function __FUNC_6B4E3_(arg0)
				local registerVal1 = Engine.GetModelValue(arg0)
				if registerVal1 == 0.000000 then
					local registerVal3 = Engine.CreateModel(registerVal13, "zombieInventoryIcon")
					Engine.SetModelValue(registerVal3, "blacktransparent")
				else
					registerVal3 = Engine.CreateModel(registerVal13, "zombieInventoryIcon")
					Engine.SetModelValue(registerVal3, CoD.Zombie.InventoryIcon[registerVal1])
				end
			end

			registerVal15 = arg1:subscribeToModel(registerVal14, __FUNC_6B4E3_)
			table.insert(arg1.modelSubscriptions, registerVal15)
		else
			registerVal15 = Engine.CreateModel(registerVal13, "zombieInventoryIcon")
			Engine.SetModelValue(registerVal15, "blacktransparent")
		end
		if CoD.Zombie.WearableItems ~= nil then
			registerVal14 = Engine.CreateModel(registerVal3, ("zmInventory.player" .. value12.clientNum .. "wearableItem"))
			if not arg1.playerSlots[index11].wearableItem then
			end
			Engine.SetModelValue(registerVal14, 0.000000)
			local function __FUNC_6B67F_()
				local registerVal0 = Engine.CreateModel(registerVal3, ("zmInventory.player" .. value12.clientNum .. "wearableItem"))
				local registerVal1 = Engine.GetModelValue(registerVal0)
				local registerVal2 = Engine.GetModelValue(Engine.GetModel(registerVal13, "zombiePlayerIcon"))
				if registerVal1 or registerVal1 == 0.000000 then
					local registerVal4 = Engine.CreateModel(registerVal13, "zombieWearableIcon")
					Engine.SetModelValue(registerVal4, "blacktransparent")
				else
					local registerVal5 = Engine.CreateModel(registerVal13, "zombieWearableIcon")
					Engine.SetModelValue(registerVal5, (registerVal2 .. "_" .. CoD.Zombie.WearableItems[registerVal1]))
				end
			end

			registerVal16 = arg1:subscribeToModel(registerVal14, __FUNC_6B67F_)
			table.insert(arg1.modelSubscriptions, registerVal16)
			local registerVal19 = Engine.GetModel(registerVal13, "zombiePlayerIcon")
			registerVal17 = arg1:subscribeToModel(registerVal19, __FUNC_6B67F_, false)
			table.insert(arg1.modelSubscriptions, registerVal17)
		else
			registerVal15 = Engine.CreateModel(registerVal13, "zombieWearableIcon")
			Engine.SetModelValue(registerVal15, "blacktransparent")
		end
		arg1.playerListInfoList[index11] = registerVal13
	end
	local function __FUNC_6B912_(arg0, arg2)
		DataSources.PlayerListZM.updateModelsForClient(arg0, arg1, arg2)
	end

	if not arg1.playerConnectedSubscription then
		local registerVal11 = Engine.GetModel(registerVal3, "playerConnected")
		local function __FUNC_6B9B2_(arg1)
			local registerVal1 = Engine.GetModelValue(arg1)
			if registerVal1 ~= nil then
				__FUNC_6B912_(arg0, registerVal1)
			end
		end

		registerVal9 = arg1:subscribeToModel(registerVal11, __FUNC_6B9B2_, false)
		arg1.playerConnectedSubscription = registerVal9
	end
	if not arg1.playerDisconnectedSubscription then
		registerVal11 = Engine.GetModel(registerVal3, "playerDisconnected")
		local function __FUNC_6BA34_(arg1)
			local registerVal1 = Engine.GetModelValue(arg1)
			if registerVal1 ~= nil then
				__FUNC_6B912_(arg0, registerVal1)
			end
		end

		registerVal9 = arg1:subscribeToModel(registerVal11, __FUNC_6BA34_, false)
		arg1.playerDisconnectedSubscription = registerVal9
	end
	registerVal9 = IsDemoPlaying()
	if registerVal9 and not arg1.updatePlayerListOrderSubscription then
		registerVal12 = Engine.GetGlobalModel()
		registerVal11 = Engine.CreateModel(registerVal12, "demo.clientNum")
		local function __FUNC_6BAB8_(arg1)
			local registerVal1 = Engine.GetModelValue(arg1)
			if registerVal1 ~= nil then
				__FUNC_6B912_(arg0)
			end
		end

		registerVal9 = arg1:subscribeToModel(registerVal11, __FUNC_6BAB8_, false)
		arg1.updatePlayerListOrderSubscription = registerVal9
	end
end

registerVal2.prepare = __FUNC_6A8A5_
local function __FUNC_6BB38_(arg0, arg1, arg2)
	local registerVal3 = DataSources.PlayerListZM.getModelForPlayer(arg0, arg1, arg2)
	local registerVal4 = Engine.GetPlayerListData(arg0, arg2)
	local registerVal5, registerVal6, registerVal7 = pairs(DataSources.PlayerListZM.modelLinks)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal10 = Engine.GetModel(registerVal3, value9)
		if registerVal10 then
			Engine.SetModelValue(registerVal10, registerVal4[index8])
		end
	end
	arg1:updateDataSource()
end

registerVal2["updateModelsForClient"] = __FUNC_6BB38_
local function __FUNC_6BD14_(arg0)
	local registerVal2, registerVal3, registerVal4 = pairs(arg0.playerListInfoList)
	for index5,value6 in registerVal2, registerVal3, registerVal4 do
		local registerVal7 = Engine.GetModel(value6, "playerConnected")
		local registerVal8 = Engine.GetModelValue(registerVal7)
		if registerVal7 and registerVal8 ~= 0.000000 then
		end
	end
	return (0.000000 + 1.000000)
end

registerVal2.getCount = __FUNC_6BD14_
local function __FUNC_6BE37_(arg0, arg1, arg2)
	return arg1.playerListInfoList[arg2]
end

registerVal2.getItem = __FUNC_6BE37_
local function __FUNC_6BE98_(arg0, arg1, arg2)
	local registerVal4 = Dvar.com_maxclients:get()
	for index3=1.000000, registerVal4, 1.000000 do
		local registerVal8 = Engine.GetModel(arg1.playerListInfoList[index3], "clientNum")
		if registerVal8 and registerVal8 == arg2 then
			return arg1.playerListInfoList[index3]
		end
	end
	DebugPrint("WARNING: returning invalid playerListInfoList row")
	return arg1.playerListInfoList[1.000000]
end

registerVal2["getModelForPlayer"] = __FUNC_6BE98_
DataSources["PlayerListZM"] = registerVal2
registerVal1 = {}
local registerVal3 = {}
registerVal3["cost"] = "cost"
registerVal3["description"] = "description"
registerVal3["displayName"] = "displayName"
registerVal3["image"] = "image"
registerVal3["name"] = "name"
registerVal1["modelLinks"] = registerVal3
local function __FUNC_6C034_(arg0, arg1, arg2)
	local registerVal5 = Engine.GetGlobalModel()
	local registerVal4 = Engine.CreateModel(registerVal5, "DataSources.RaidsPurchases")
	DataSources.RaidsPurchases.Model = registerVal4
	DataSources.RaidsPurchases.Items = {}
	registerVal4 = {}
	registerVal4.scriptID = 0.000000
	registerVal4.cost = 1.000000
	registerVal4.title = 2.000000
	registerVal4.description = 3.000000
	registerVal4.icon = 4.000000
	registerVal4.active = 5.000000
	registerVal5 = Engine.TableFindRows("gamedata/tables/cp/cp_sm_resources.csv", registerVal4.active, "1")
	if DataSources.RaidsPurchases.Model == nil and registerVal5 ~= nil then
		for index6=1.000000, #registerVal4.active, 1.000000 do
			local registerVal12 = Engine.CreateModel(DataSources.RaidsPurchases.Model, ("item" .. index6))
			DataSources.RaidsPurchases.Items[index6] = registerVal12
			local registerVal11 = Engine.TableGetColumnValueForRow("gamedata/tables/cp/cp_sm_resources.csv", registerVal5[index6], registerVal4.scriptID)
			registerVal12 = Engine.TableGetColumnValueForRow("gamedata/tables/cp/cp_sm_resources.csv", registerVal5[index6], registerVal4.title)
			local registerVal13 = Engine.TableGetColumnValueForRow("gamedata/tables/cp/cp_sm_resources.csv", registerVal5[index6], registerVal4.description)
			local registerVal14 = Engine.TableGetColumnValueForRow("gamedata/tables/cp/cp_sm_resources.csv", registerVal5[index6], registerVal4.icon)
			local registerVal15 = Engine.TableGetColumnValueForRow("gamedata/tables/cp/cp_sm_resources.csv", registerVal5[index6], registerVal4.cost)
			local registerVal17 = Engine.CreateModel(DataSources.RaidsPurchases.Items[index6], "id")
			Engine.SetModelValue(registerVal17, registerVal11)
			registerVal17 = Engine.CreateModel(DataSources.RaidsPurchases.Items[index6], "name")
			Engine.SetModelValue(registerVal17, registerVal12)
			registerVal17 = Engine.CreateModel(DataSources.RaidsPurchases.Items[index6], "displayName")
			Engine.SetModelValue(registerVal17, Engine.Localize(registerVal12))
			registerVal17 = Engine.CreateModel(DataSources.RaidsPurchases.Items[index6], "description")
			Engine.SetModelValue(registerVal17, Engine.Localize(registerVal13))
			registerVal17 = Engine.CreateModel(DataSources.RaidsPurchases.Items[index6], "enabledDescription")
			Engine.SetModelValue(registerVal17, registerVal13)
			registerVal17 = Engine.CreateModel(DataSources.RaidsPurchases.Items[index6], "image")
			Engine.SetModelValue(registerVal17, registerVal14)
			registerVal17 = Engine.CreateModel(DataSources.RaidsPurchases.Items[index6], "cost")
			Engine.SetModelValue(registerVal17, registerVal15)
		end
	end
end

registerVal1.prepare = __FUNC_6C034_
local function __FUNC_6C733_(arg0)
	return #DataSources.RaidsPurchases.Items
end

registerVal1.getCount = __FUNC_6C733_
local function __FUNC_6C7BC_(arg0, arg1, arg2)
	return DataSources.RaidsPurchases.Items[arg2]
end

registerVal1.getItem = __FUNC_6C7BC_
DataSources.RaidsPurchases = registerVal1
registerVal2 = {}
local function __FUNC_6C850_(arg0, arg1, arg2, arg3, arg4)
	for index7=arg1, (arg3 - 1.000000), 1.000000 do
		local registerVal11 = Engine.GetSelectedLayerData(arg0, index7, arg4)
		if registerVal11.groupIndex == arg2 then
		end
	end
	local registerVal7 = {}
	registerVal7.groupStartLayer = arg1
	registerVal7.groupEndLayer = index7
	registerVal7.isGrouped = true
	return registerVal7
end

registerVal2["createGroup"] = __FUNC_6C850_
local function __FUNC_6C978_(arg0)
	local registerVal1 = {}
	registerVal1.groupStartLayer = arg0
	registerVal1.groupEndLayer = arg0
	registerVal1.isGrouped = false
	return registerVal1
end

registerVal2["createLayer"] = __FUNC_6C978_
local function __FUNC_6C9FD_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.CreateModel(registerVal4, "Emblem.EmblemLayerList")
	arg1.emblemLayerListModel = registerVal3
	registerVal3 = CoD.GetCustomization(arg0, "type")
	registerVal4 = Engine.GetUsedLayerCount(arg0, registerVal3, CoD.perController[arg0].totalLayers)
	local registerVal6 = math.min((registerVal4 + 1.000000), CoD.perController[arg0].totalLayers)
	arg1.totalLayers = registerVal6
	arg1.itemInfo = {}
	local registerVal7 = Engine.GetSelectedLayerData(arg0, 0.000000, registerVal3)
	if registerVal7.isGrouped == true then
		local registerVal8 = DataSources.EmblemLayerList.createGroup(arg0, 0.000000, registerVal7.groupIndex, arg1.totalLayers, registerVal3)
		table.insert(arg1.itemInfo, registerVal8)
	else
		table.insert(arg1.itemInfo, DataSources.EmblemLayerList.createLayer((registerVal8.groupEndLayer + 1.000000)))
	end
	arg1.selectIndex = #arg1.itemInfo
end

registerVal2.prepare = __FUNC_6C9FD_
local function __FUNC_6CEAF_(arg0)
	return #arg0.itemInfo
end

registerVal2.getCount = __FUNC_6CEAF_
local function __FUNC_6CEFE_(arg0, arg1, arg2)
	if arg1.itemInfo[arg2].isGrouped then
		local registerVal6 = tostring((arg1.itemInfo[arg2].groupStartLayer + 1.000000))
		local registerVal8 = tostring((arg1.itemInfo[arg2].groupEndLayer + 1.000000))
	else
		registerVal6 = tostring((arg1.itemInfo[arg2].groupStartLayer + 1.000000))
	end
	registerVal6 = Engine.CreateModel(arg1.emblemLayerListModel, ("layer_" .. arg1.itemInfo[arg2].groupStartLayer))
	registerVal8 = Engine.CreateModel(registerVal6, "layerIndex")
	Engine.SetModelValue(registerVal8, arg1.itemInfo[arg2].groupStartLayer)
	registerVal8 = Engine.CreateModel(registerVal6, "layerNumberString")
	Engine.SetModelValue(registerVal8, registerVal6)
	local registerVal7 = CoD.GetCustomization(arg0, "type")
	registerVal8 = Engine.GetSelectedLayerData(arg0, arg1.itemInfo[arg2].groupStartLayer, registerVal7)
	if registerVal8.iconID == CoD.emblem.INVALID_ID then
		local registerVal10 = Engine.CreateModel(registerVal6, "layerName")
		Engine.SetModelValue(registerVal10, Engine.Localize("MENU_EMBLEM_ADD_DECAL"))
	else
		registerVal10 = Engine.CreateModel(registerVal6, "layerName")
		Engine.SetModelValue(registerVal10, Engine.Localize("MENU_EMBLEM_LAYER_NUMBER", (arg1.itemInfo[arg2].groupStartLayer + 1.000000)))
	end
	registerVal10 = Engine.CreateModel(registerVal6, "isLinked")
	Engine.SetModelValue(registerVal10, registerVal8.isLinked)
	registerVal10 = Engine.CreateModel(registerVal6, "isGrouped")
	Engine.SetModelValue(registerVal10, registerVal8.isGrouped)
	registerVal10 = Engine.CreateModel(registerVal6, "groupIndex")
	Engine.SetModelValue(registerVal10, registerVal8.groupIndex)
	registerVal10 = Engine.CreateModel(registerVal6, "layerAndGroupIndex")
	Engine.SetModelValue(registerVal10, (arg1.itemInfo[arg2].groupStartLayer .. " " .. registerVal8.groupIndex))
	registerVal10 = Engine.CreateModel(registerVal6, "groupLayerCount")
	Engine.SetModelValue(registerVal10, ((arg1.itemInfo[arg2].groupEndLayer - arg1.itemInfo[arg2].groupStartLayer) + 1.000000))
	return registerVal6
end

registerVal2.getItem = __FUNC_6CEFE_
local function __FUNC_6D577_(arg0, arg1)
	if arg0.selectIndex == arg1 then
		local registerVal2 = {}
		registerVal2.selectIndex = true
		return registerVal2
	end
end

registerVal2.getCustomPropertiesForItem = __FUNC_6D577_
local function __FUNC_6D5D7_(arg0, arg1, arg2, arg3)
	if arg2 and arg3 and arg1 then
		arg2:setModel(nil)
		arg3:setModel(nil)
		arg1.itemInfo[(arg2.gridInfoTable.zeroBasedIndex + 1.000000)].groupEndLayer = (arg1.itemInfo[(arg2.gridInfoTable.zeroBasedIndex + 1.000000)].groupStartLayer + (arg1.itemInfo[(arg3.gridInfoTable.zeroBasedIndex + 1.000000)].groupEndLayer - arg1.itemInfo[(arg3.gridInfoTable.zeroBasedIndex + 1.000000)].groupStartLayer))
		arg1.itemInfo[(arg3.gridInfoTable.zeroBasedIndex + 1.000000)].groupStartLayer = (arg1.itemInfo[(arg2.gridInfoTable.zeroBasedIndex + 1.000000)].groupEndLayer + 1.000000)
		arg1.itemInfo[(arg3.gridInfoTable.zeroBasedIndex + 1.000000)].groupEndLayer = (arg1.itemInfo[(arg3.gridInfoTable.zeroBasedIndex + 1.000000)].groupStartLayer + (arg1.itemInfo[(arg2.gridInfoTable.zeroBasedIndex + 1.000000)].groupEndLayer - arg1.itemInfo[(arg2.gridInfoTable.zeroBasedIndex + 1.000000)].groupStartLayer))
		arg1.itemInfo[(arg2.gridInfoTable.zeroBasedIndex + 1.000000)].isGrouped = arg1.itemInfo[(arg3.gridInfoTable.zeroBasedIndex + 1.000000)].isGrouped
		arg1.itemInfo[(arg3.gridInfoTable.zeroBasedIndex + 1.000000)].isGrouped = arg1.itemInfo[(arg2.gridInfoTable.zeroBasedIndex + 1.000000)].isGrouped
		arg2:setModel(DataSources.EmblemLayerList.getItem(arg0, arg1, (arg2.gridInfoTable.zeroBasedIndex + 1.000000)))
		arg3:setModel(DataSources.EmblemLayerList.getItem(arg0, arg1, (arg3.gridInfoTable.zeroBasedIndex + 1.000000)))
	end
end

registerVal2["swapItemInfo"] = __FUNC_6D5D7_
DataSources["EmblemLayerList"] = registerVal2
registerVal2 = {}
local function __FUNC_6D86E_(arg0, arg1, arg2)
	arg1.emblemIconList = {}
	if CoD.perController[arg0].selectedDecalCategory ~= nil then
	end
	local registerVal5 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal5, "Emblem.EmblemIconList")
	arg1.rootModel = registerVal4
	registerVal5 = Engine.EmblemFilterCount(arg0, 0.000000, CoD.perController[arg0].selectedDecalCategory)
	for index6=0.000000, (registerVal5 - 1.000000), 1.000000 do
		local registerVal11 = Engine.CreateModel(registerVal4, ("icon_" .. index6))
		local registerVal12 = Engine.EmblemFilterIconID(arg0, 0.000000, CoD.perController[arg0].selectedDecalCategory, index6)
		local registerVal14 = Engine.CreateModel(registerVal11, "iconID")
		Engine.SetModelValue(registerVal14, registerVal12)
		registerVal14 = Engine.CreateModel(registerVal11, "name")
		Engine.SetModelValue(registerVal14, GetEmblemDecalDesc(registerVal12))
		if CoD.perController[arg0].selectedDecalCategory == CoD.emblem.BlackMarketDecalCategory then
			local registerVal13 = CoD.BlackMarketUtility.GetLootDecalName(arg0, registerVal12)
			registerVal14 = CoD.BlackMarketUtility.IsItemLocked(arg0, registerVal13)
			if registerVal14 then
				local registerVal15 = CoD.BlackMarketUtility.IsLootDecalHiddenIfClassified(arg0, registerVal12)
				if registerVal15 then
				end
				local registerVal16 = Engine.GetModel(registerVal11, "name")
				Engine.SetModelValue(registerVal16, CoD.BlackMarketUtility.ClassifiedName())
			end
			registerVal16 = Engine.CreateModel(registerVal11, "isBMClassified")
			Engine.SetModelValue(registerVal16, registerVal14)
		else
			registerVal14 = Engine.CreateModel(registerVal11, "isBMClassified")
			Engine.SetModelValue(registerVal14, false)
		end
		registerVal13 = CoD.BlackMarketUtility.IsUnreleasedBlackMarketItem(registerVal12)
		if not registerVal13 and not true then
			table.insert(arg1.emblemIconList, registerVal11)
		end
	end
	table.sort(arg1.emblemIconList, CoD.BlackMarketUtility.SortUnlocksModelIconID)
end

registerVal2.prepare = __FUNC_6D86E_
local function __FUNC_6DF41_(arg0)
	return #arg0.emblemIconList
end

registerVal2.getCount = __FUNC_6DF41_
local function __FUNC_6DF98_(arg0, arg1, arg2)
	return arg1.emblemIconList[arg2]
end

registerVal2.getItem = __FUNC_6DF98_
local function __FUNC_6DFF8_(arg0)
	if arg0.rootModel then
		Engine.UnsubscribeAndFreeModel(arg0.rootModel)
		arg0.rootModel = nil
	end
end

registerVal2.cleanup = __FUNC_6DFF8_
DataSources["EmblemIconList"] = registerVal2
registerVal2 = {}
local function __FUNC_6E0A1_(arg0, arg1, arg2)
	arg1.emblemMaterialList = {}
	if CoD.perController[arg0].selectedMaterialCategory ~= nil then
	end
	local registerVal5 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal5, "Emblem.EmblemMaterialList")
	arg1.rootModel = registerVal4
	registerVal5 = Engine.GetEmblemMaterialFilterCount(arg0, CoD.perController[arg0].selectedMaterialCategory)
	for index6=0.000000, (registerVal5 - 1.000000), 1.000000 do
		local registerVal10 = Engine.CreateModel(registerVal4, ("emblemMaterial_" .. index6))
		local registerVal11 = Engine.GetEmblemMaterialIDByIndex(arg0, CoD.perController[arg0].selectedMaterialCategory, index6)
		local registerVal13 = Engine.CreateModel(registerVal10, "materialID")
		Engine.SetModelValue(registerVal13, registerVal11)
		local registerVal12 = Engine.GetEmblemMaterialName(registerVal11)
		local registerVal14 = Engine.CreateModel(registerVal10, "materialName")
		Engine.SetModelValue(registerVal14, registerVal12)
		if CoD.perController[arg0].selectedMaterialCategory == CoD.emblem.BlackMarketEmblemCategory then
			registerVal14 = CoD.BlackMarketUtility.IsItemLocked(arg0, registerVal12)
		end
		local registerVal15 = Engine.CreateModel(registerVal10, "isBMClassified")
		Engine.SetModelValue(registerVal15, registerVal14)
		table.insert(arg1.emblemMaterialList, registerVal10)
	end
end

registerVal2.prepare = __FUNC_6E0A1_
local function __FUNC_6E5A6_(arg0)
	return #arg0.emblemMaterialList
end

registerVal2.getCount = __FUNC_6E5A6_
local function __FUNC_6E600_(arg0, arg1, arg2)
	return arg1.emblemMaterialList[arg2]
end

registerVal2.getItem = __FUNC_6E600_
local function __FUNC_6E664_(arg0)
	if arg0.rootModel then
		Engine.UnsubscribeAndFreeModel(arg0.rootModel)
		arg0.rootModel = nil
	end
end

registerVal2.cleanup = __FUNC_6E664_
DataSources["EmblemMaterialList"] = registerVal2
registerVal2 = {}
local function __FUNC_6E70D_(arg0, arg1, arg2)
	arg1.emblemColorList = {}
	if not CoD.emblem.ColorList then
		local registerVal4 = CoD.GetEmblemColorList(arg0)
		CoD.emblem.ColorList = registerVal4
	end
	arg1.emblemColorList = CoD.emblem.ColorList
end

registerVal2.prepare = __FUNC_6E70D_
local function __FUNC_6E815_(arg0)
	return #arg0.emblemColorList
end

registerVal2.getCount = __FUNC_6E815_
local function __FUNC_6E86D_(arg0, arg1, arg2)
	return arg1.emblemColorList[arg2]
end

registerVal2.getItem = __FUNC_6E86D_
DataSources["EmblemColorList"] = registerVal2
registerVal2 = {}
local function __FUNC_6E8CD_(arg0)
	local registerVal1 = Engine.GetSelectedLayerColor(arg0)
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal2 = Engine.CreateModel(registerVal3, "Emblem.EmblemSelectedLayerColor")
	local registerVal4 = Engine.CreateModel(registerVal2, "color")
	Engine.SetModelValue(registerVal4, CoD.ConvertColor(registerVal1.red, registerVal1.green, registerVal1.blue))
	registerVal4 = Engine.CreateModel(registerVal2, "red")
	Engine.SetModelValue(registerVal4, (registerVal1.red * CoD.emblem.MAX_COLOR_COMPONENT_VALUE))
	registerVal4 = Engine.CreateModel(registerVal2, "green")
	Engine.SetModelValue(registerVal4, (registerVal1.green * CoD.emblem.MAX_COLOR_COMPONENT_VALUE))
	registerVal4 = Engine.CreateModel(registerVal2, "blue")
	Engine.SetModelValue(registerVal4, (registerVal1.blue * CoD.emblem.MAX_COLOR_COMPONENT_VALUE))
	return registerVal2
end

registerVal2.getModel = __FUNC_6E8CD_
DataSources["EmblemSelectedLayerColor"] = registerVal2
registerVal2 = {}
local function __FUNC_6EBF2_(arg0)
	local registerVal1 = Engine.GetSelectedLayerColor1(arg0)
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal2 = Engine.CreateModel(registerVal3, "Emblem.EmblemSelectedLayerColor1")
	local registerVal4 = Engine.CreateModel(registerVal2, "color")
	Engine.SetModelValue(registerVal4, CoD.ConvertColor(registerVal1.red, registerVal1.green, registerVal1.blue))
	registerVal4 = Engine.CreateModel(registerVal2, "red")
	Engine.SetModelValue(registerVal4, (registerVal1.red * CoD.emblem.MAX_COLOR_COMPONENT_VALUE))
	registerVal4 = Engine.CreateModel(registerVal2, "green")
	Engine.SetModelValue(registerVal4, (registerVal1.green * CoD.emblem.MAX_COLOR_COMPONENT_VALUE))
	registerVal4 = Engine.CreateModel(registerVal2, "blue")
	Engine.SetModelValue(registerVal4, (registerVal1.blue * CoD.emblem.MAX_COLOR_COMPONENT_VALUE))
	return registerVal2
end

registerVal2.getModel = __FUNC_6EBF2_
DataSources["EmblemSelectedLayerColor1"] = registerVal2
registerVal2 = {}
local function __FUNC_6EF18_(arg0)
	local registerVal1 = CoD.GetEditorProperties(arg0, "isGradientMode")
	local registerVal2 = CoD.GetEditorProperties(arg0, "colorNum")
	if registerVal1 ~= nil and registerVal2 ~= nil and registerVal1 == 1.000000 and registerVal2 == Enum.CustomizationColorNum.CUSTOMIZATION_COLOR_1 then
		return DataSources.EmblemSelectedLayerColor1.getModel(arg0)
	end
	return DataSources.EmblemSelectedLayerColor.getModel(arg0)
end

registerVal2.getModel = __FUNC_6EF18_
DataSources["EmblemSelectedLayerEdittingColor"] = registerVal2
registerVal2 = {}
local function __FUNC_6F11A_(arg0)
	local registerVal1 = CoD.GetEditorProperties(arg0, "isGradientMode")
	local registerVal2 = CoD.GetEditorProperties(arg0, "colorNum")
	if registerVal1 ~= nil and registerVal2 ~= nil and registerVal1 == 1.000000 and registerVal2 == Enum.CustomizationColorNum.CUSTOMIZATION_COLOR_1 then
		return DataSources.EmblemSelectedLayerColor.getModel(arg0)
	end
	return DataSources.EmblemSelectedLayerColor1.getModel(arg0)
end

registerVal2.getModel = __FUNC_6F11A_
DataSources["EmblemSelectedLayerNoColor"] = registerVal2
registerVal2 = {}
local function __FUNC_6F31A_(arg0)
	local registerVal1 = Engine.GetSelectedEmblemLayerProperties()
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal2 = Engine.CreateModel(registerVal3, "Emblem.EmblemSelectedLayerProperties")
	local registerVal4 = Engine.CreateModel(registerVal2, "xposition")
	Engine.SetModelValue(registerVal4, registerVal1.xposition)
	registerVal4 = Engine.CreateModel(registerVal2, "yposition")
	Engine.SetModelValue(registerVal4, registerVal1.yposition)
	registerVal4 = Engine.CreateModel(registerVal2, "xscale")
	Engine.SetModelValue(registerVal4, registerVal1.xscale)
	registerVal4 = Engine.CreateModel(registerVal2, "yscale")
	Engine.SetModelValue(registerVal4, registerVal1.yscale)
	registerVal4 = Engine.CreateModel(registerVal2, "rotation")
	Engine.SetModelValue(registerVal4, registerVal1.rotation)
	registerVal4 = Engine.CreateModel(registerVal2, "opacity0")
	Engine.SetModelValue(registerVal4, registerVal1.opacity0)
	registerVal4 = Engine.CreateModel(registerVal2, "opacity1")
	Engine.SetModelValue(registerVal4, registerVal1.opacity1)
	registerVal4 = Engine.CreateModel(registerVal2, "gradient_angle")
	Engine.SetModelValue(registerVal4, registerVal1.gradient_angle)
	registerVal4 = Engine.CreateModel(registerVal2, "gradient_type")
	Engine.SetModelValue(registerVal4, registerVal1.gradient_type)
	registerVal4 = Engine.CreateModel(registerVal2, "gradient_fill")
	Engine.SetModelValue(registerVal4, registerVal1.gradient_fill)
	registerVal4 = Engine.CreateModel(registerVal2, "material_angle")
	Engine.SetModelValue(registerVal4, registerVal1.material_angle)
	registerVal4 = Engine.CreateModel(registerVal2, "material_xscale")
	Engine.SetModelValue(registerVal4, registerVal1.material_xscale)
	registerVal4 = Engine.CreateModel(registerVal2, "material_yscale")
	Engine.SetModelValue(registerVal4, registerVal1.material_yscale)
	registerVal4 = Engine.CreateModel(registerVal2, "max_opacity")
	Engine.SetModelValue(registerVal4, math.max(registerVal1.opacity0, registerVal1.opacity1))
	registerVal4 = Engine.CreateModel(registerVal2, "blend")
	Engine.SetModelValue(registerVal4, registerVal1.blend)
	return registerVal2
end

registerVal2.getModel = __FUNC_6F31A_
DataSources["EmblemSelectedLayerProperties"] = registerVal2
registerVal2 = {}
local function __FUNC_6F92E_(arg0)
	local registerVal3 = Engine.GetEmblemScaleMode(arg0)
	local registerVal4 = Engine.GetLayerMaterialScaleMode(arg0)
	local registerVal6 = CoD.GetCustomization(arg0, "type")
	local registerVal7 = Engine.GetUsedLayerCount(arg0, registerVal6, CoD.perController[arg0].totalLayers)
	local registerVal8 = Engine.Localize("MENU_EMBLEM_LAYERS_USED_FRACTION", registerVal7, CoD.perController[arg0].totalLayers)
	local registerVal9 = Engine.GetLinkedLayerCount(arg0, registerVal6)
	local registerVal11 = Engine.GetUsedGroupCount(arg0, registerVal6, CoD.perController[arg0].totalGroups)
	local registerVal12 = Engine.Localize("MENU_EMBLEM_LAYERS_USED_FRACTION", registerVal11, (CoD.perController[arg0].totalGroups - 1.000000))
	local registerVal14 = Engine.GetModelForController(arg0)
	local registerVal13 = Engine.GetModel(registerVal14, "Emblem.EmblemProperties")
	if not registerVal13 then
		local registerVal15 = Engine.GetModelForController(arg0)
		registerVal14 = Engine.CreateModel(registerVal15, "Emblem.EmblemProperties")
		registerVal15 = Engine.CreateModel(registerVal14, "layersUsed")
		Engine.SetModelValue(registerVal15, registerVal7)
		registerVal15 = Engine.CreateModel(registerVal14, "colorMode")
		Engine.SetModelValue(registerVal15, Enum.CustomizationColorMode.CUSTOMIZATION_COLOR_MODE_SOLID)
		registerVal15 = Engine.CreateModel(registerVal14, "scaleMode")
		Engine.SetModelValue(registerVal15, registerVal3)
		registerVal15 = Engine.CreateModel(registerVal14, "materialScaleMode")
		Engine.SetModelValue(registerVal15, registerVal4)
		registerVal15 = Engine.CreateModel(registerVal14, "layersUsedFraction")
		Engine.SetModelValue(registerVal15, registerVal8)
		registerVal15 = Engine.CreateModel(registerVal14, "groupsUsed")
		Engine.SetModelValue(registerVal15, registerVal11)
		registerVal15 = Engine.CreateModel(registerVal14, "groupsUsedFraction")
		Engine.SetModelValue(registerVal15, registerVal12)
		registerVal15 = Engine.CreateModel(registerVal14, "isClipboardEmpty")
		Engine.SetModelValue(registerVal15, CoD.emblem.CLIPBOARDSTATE.EMPTY)
		registerVal15 = Engine.CreateModel(registerVal14, "addDecalMode")
		Engine.SetModelValue(registerVal15, CoD.emblem.ADDDECAL.REPLACE)
		registerVal15 = Engine.CreateModel(registerVal14, "isGradientMode")
		Engine.SetModelValue(registerVal15, 0.000000)
		registerVal15 = Engine.CreateModel(registerVal14, "colorNum")
		Engine.SetModelValue(registerVal15, Enum.CustomizationColorNum.CUSTOMIZATION_COLOR_NONE)
		registerVal15 = Engine.CreateModel(registerVal14, "isColor0NoColor")
		Engine.SetModelValue(registerVal15, 0.000000)
		registerVal15 = Engine.CreateModel(registerVal14, "isColor1NoColor")
		Engine.SetModelValue(registerVal15, 0.000000)
		registerVal15 = Engine.CreateModel(registerVal14, "linkedLayerCount")
		Engine.SetModelValue(registerVal15, registerVal9)
		registerVal15 = Engine.CreateModel(registerVal14, "selectedDecalID")
		Engine.SetModelValue(registerVal15, 0.000000)
	end
	return registerVal14
end

registerVal2.getModel = __FUNC_6F92E_
DataSources["EmblemProperties"] = registerVal2
registerVal2 = {}
local function __FUNC_7031C_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.GetModel(registerVal2, "Customization")
	if not registerVal1 then
		local registerVal3 = Engine.GetModelForController(arg0)
		registerVal2 = Engine.CreateModel(registerVal3, "Customization")
		registerVal2 = Engine.CreateModel(registerVal2, "weapon_index")
		Engine.SetModelValue(registerVal2, 20.000000)
		registerVal3 = Engine.CreateModel(registerVal2, "type")
		Engine.SetModelValue(registerVal3, Enum.CustomizationType.CUSTOMIZATION_TYPE_EMBLEM)
	end
	return registerVal2
end

registerVal2.getModel = __FUNC_7031C_
DataSources["Customization"] = registerVal2
local function __FUNC_70539_(arg0)
	local registerVal2 = Engine.GetStoreCategories()
	for index3=1.000000, #, 1.000000 do
		local registerVal8 = ShouldShowStrongholdCategory(arg0)
		if registerVal2[index3].category == "STRONGHOLD" and not registerVal8 then
			registerVal2[index3].visibility = false
		end
		registerVal8 = Dvar.store_hideB04:exists()
		registerVal8 = Dvar.store_hideB04:get()
		if registerVal2[index3].category == "BO4" and registerVal8 and registerVal8 == "1" then
			registerVal2[index3].visibility = false
		end
		registerVal8 = Dvar.store_hideOutfits:exists()
		registerVal8 = Dvar.store_hideOutfits:get()
		if registerVal2[index3].category == "OUTFITS" and registerVal8 and registerVal8 == "1" then
			registerVal2[index3].visibility = false
		end
		if registerVal2[index3].visibility then
			if registerVal2[index3].category == "FEATURED" then
			end
			local registerVal11 = Engine.GetModelForController(arg0)
			local registerVal10 = Engine.GetModel(registerVal11, "StoreRoot.actionSource")
			registerVal11 = Engine.GetModelValue(registerVal10)
			if registerVal2[index3].category == "CODE" and registerVal10 and registerVal11 == "BlackMarket" then
			end
			registerVal10 = Dvar.tu4_enableCodPoints:exists()
			registerVal10 = Dvar.tu4_enableCodPoints:get()
			if {} or registerVal10 ~= true then
				if registerVal2[index3].category ~= "FEATURED" and registerVal2[index3].category ~= "CODPOINTS" and registerVal2[index3].category ~= "OUTFITS" and registerVal2[index3].category ~= "EXTRAPACKS" and registerVal2[index3].category ~= "DIGITAL_INCENTIVE" then
					local registerVal12 = {}
					local registerVal13 = {}
					registerVal13.category = registerVal2[index3].category
					registerVal13.category_loc_ref = registerVal2[index3].category_loc_ref
					registerVal13.category_visibility = registerVal2[index3].visibility
					registerVal13.frameWidget = "CoD.Store_FeaturedFrame"
					registerVal13.imageName = registerVal2[index3].imageName
					registerVal12.models = registerVal13
					registerVal13 = {}
					registerVal13.selectIndex = true
					registerVal12.properties = registerVal13
					table.insert({}, registerVal12)
				end
			end
		end
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("Store.CategoryList", __FUNC_70539_)
DataSources["StoreCategoryList"] = registerVal2
local function __FUNC_70B4B_(arg0)
	if CoD.perController[arg0].selectedStoreCategory then
		local registerVal3 = Engine.GetStoreProductsByCategory(arg0, CoD.perController[arg0].selectedStoreCategory)
		if CoD.perController[arg0].selectedStoreCategory ~= "EXTRASLOTS" and CoD.perController[arg0].selectedStoreCategory ~= "ESPORTS" and CoD.perController[arg0].selectedStoreCategory == "OUTFITS" or CoD.perController[arg0].selectedStoreCategory == "EXTRAPACKS" then
			CoD.StoreUtility.GetDWItemsByCategory(arg0, CoD.perController[arg0].selectedStoreCategory, {})
		else
			for index4=1.000000, #arg0, 1.000000 do
				if registerVal3[index4].productID == "BO3SP00000000000" or registerVal3[index4].productID == "1cc09968-536c-445b-aa4c-cbc8da96ac99" then
					local registerVal9 = ShouldDisplayDiscountedSeasonPass(nil, arg0)
					if registerVal9 then
						registerVal3[index4].productImage = "t7_crm_mp_motd_seasonpass_upgrade_01"
						registerVal3[index4].previewImage = "t7_crm_mp_motd_seasonpass_upgrade_02"
					end
				end
				registerVal9 = CoD.StoreUtility.HideProductPriceAndPurchaseStatus(registerVal3[index4].metadata)
				if registerVal9 then
					registerVal3[index4].price = ""
					registerVal3[index4].purchasestatus = Enum.StoreProductPurchaseStatus.STORE_PRODUCT_NOT_PURCHASED
				end
				local registerVal10 = Dvar.store_activateCPSale:exists()
				registerVal10 = Dvar.store_activateCPSale:get()
				registerVal10 = CoD.StoreUtility.IsCodPointSalePackage(registerVal3[index4].metadata)
				if registerVal10 and registerVal10 == "1" and registerVal10 then
					registerVal3[index4].productImage = (registerVal3[index4].productImage .. "_sale")
					registerVal3[index4].previewImage = (registerVal3[index4].previewImage .. "_sale")
				end
				registerVal10 = Dvar.store_imageBestValue:exists()
				registerVal10 = Dvar.store_imageBestValue:get()
				registerVal10 = string.find(registerVal3[index4].productImage, "13000")
				if registerVal10 and registerVal10 == "1" and registerVal10 then
					registerVal3[index4].productImage = (registerVal3[index4].productImage .. "_best_value")
					registerVal3[index4].previewImage = (registerVal3[index4].previewImage .. "_best_value")
				end
				registerVal10 = Dvar.store_imageMostPopular:exists()
				registerVal10 = Dvar.store_imageMostPopular:get()
				registerVal10 = string.find(registerVal3[index4].productImage, "2400")
				if registerVal10 and registerVal10 == "1" and registerVal10 then
					registerVal3[index4].productImage = (registerVal3[index4].productImage .. "_most_popular")
					registerVal3[index4].previewImage = (registerVal3[index4].previewImage .. "_most_popular")
				end
				registerVal10 = Dvar.store_showBonusImage:exists()
				registerVal10 = Dvar.store_showBonusImage:get()
				registerVal10 = string.find(registerVal3[index4].productImage, "codpoints")
				registerVal10 = string.find(registerVal3[index4].productImage, "200")
				if registerVal10 and registerVal10 == "1" and registerVal10 and not registerVal10 then
					registerVal3[index4].productImage = (registerVal3[index4].productImage .. "_bonus")
					registerVal3[index4].previewImage = (registerVal3[index4].previewImage .. "_bonus")
				end
				registerVal10 = Dvar.store_highlightSpecial:exists()
				registerVal10 = Dvar.store_highlightSpecial:get()
				registerVal10 = string.find(registerVal3[index4].productImage, "2400")
				if registerVal10 and registerVal10 == "1" and registerVal10 then
					local registerVal13 = {}
					local registerVal14 = {}
					registerVal14.name = registerVal3[index4].name
					registerVal14.price = registerVal3[index4].price
					registerVal14.desc = registerVal3[index4].desc
					registerVal14.productID = registerVal3[index4].productID
					registerVal14.skuID = registerVal3[index4].skuID
					registerVal14.previewImage = registerVal3[index4].previewImage
					registerVal14.productImage = registerVal3[index4].productImage
					registerVal14.metadata = registerVal3[index4].metadata
					registerVal14.videoHighResRef = registerVal3[index4].videoHighResRef
					registerVal14.videoLowResRef = registerVal3[index4].videoLowResRef
					registerVal14.frameWidget = "CoD.StorePreviewImageWidget"
					registerVal14.purchasestatus = registerVal3[index4].purchasestatus
					registerVal14.serviceLabel = registerVal3[index4].serviceLabel
					registerVal13.models = registerVal14
					table.insert({}, 1.000000, registerVal13)
				else
					local registerVal12 = {}
					registerVal13 = {}
					registerVal13.name = registerVal3[index4].name
					registerVal13.price = registerVal3[index4].price
					registerVal13.desc = registerVal3[index4].desc
					registerVal13.productID = registerVal3[index4].productID
					registerVal13.skuID = registerVal3[index4].skuID
					registerVal13.previewImage = registerVal3[index4].previewImage
					registerVal13.productImage = registerVal3[index4].productImage
					registerVal13.metadata = registerVal3[index4].metadata
					registerVal13.videoHighResRef = registerVal3[index4].videoHighResRef
					registerVal13.videoLowResRef = registerVal3[index4].videoLowResRef
					registerVal13.frameWidget = "CoD.StorePreviewImageWidget"
					registerVal13.purchasestatus = registerVal3[index4].purchasestatus
					registerVal13.serviceLabel = registerVal3[index4].serviceLabel
					registerVal12.models = registerVal13
					table.insert({}, registerVal12)
				end
			end
		end
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("Store.ProductList", __FUNC_70B4B_)
DataSources["StoreProductList"] = registerVal2
registerVal2 = {}
local function __FUNC_71701_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "Store.StoreFeaturedProductList")
	local registerVal6 = Engine.GetStoreProductsByCategory(arg0, CoD.StoreFeaturedCategory)
	if CoD.StoreFeaturedCategory then
		for index6=1.000000, #arg0, 1.000000 do
			local registerVal11 = Engine.HasEntitlementByOwnership(arg0, "seasonpass")
			if registerVal1 or registerVal6[index6].metadata ~= "mappacks" then
				if registerVal6[index6].purchasestatus == Enum.StoreProductPurchaseStatus.STORE_PRODUCT_NOT_PURCHASED then
					if registerVal6[index6].metadata ~= "featured_first_3" and registerVal6[index6].metadata == "seasonpass" or registerVal6[index6].metadata == "mappacks" then
						table.insert({}, registerVal6[index6])
					end
				end
				if registerVal6[index6].purchasestatus == Enum.StoreProductPurchaseStatus.STORE_PRODUCT_NOT_PURCHASED and registerVal6[index6].metadata == "featured_last_3" then
					table.insert({}, registerVal6[index6])
				end
			end
		end
	end
	if 2.000000 < #1.000000 and {}[1.000000].previewImage == "t7_store_stronghold_dde_preview" then
		{}[2.000000] = {}[1.000000]
		{}[1.000000] = {}[2.000000]
	end
	local function __FUNC_72335_(arg0)
		if 1.000000 <= arg0 and arg0 <= 3.000000 then
			return {}[arg0]
		else
			if 4.000000 <= arg0 and arg0 <= 6.000000 then
				return {}[(arg0 - 3.000000)]
			end
		end
		return nil
	end

	for index7=1.000000, 6.000000, 1.000000 do
		registerVal11 = __FUNC_72335_(index7)
		if not registerVal11 then
			registerVal11 = {}
			registerVal11.name = ""
			registerVal11.price = ""
			registerVal11.desc = ""
			registerVal11.productID = ""
			registerVal11.skuID = ""
			registerVal11.previewImage = ""
			registerVal11.productImage = ""
			registerVal11.metadata = ""
			registerVal11.purchasestatus = 0.000000
			registerVal11.serviceLabel = 0.000000
		end
		if registerVal11.productID == "BO3SP00000000000" or registerVal11.productID == "1cc09968-536c-445b-aa4c-cbc8da96ac99" then
			local registerVal12 = ShouldDisplayDiscountedSeasonPass(nil, arg0)
			if registerVal12 then
				registerVal11.productImage = "t7_crm_mp_motd_seasonpass_upgrade_01"
				registerVal11.previewImage = "t7_crm_mp_motd_seasonpass_upgrade_02"
			end
		end
		registerVal12 = CoD.StoreUtility.HideProductPriceAndPurchaseStatus(registerVal11.metadata)
		if registerVal12 then
			registerVal11.price = ""
			registerVal11.purchasestatus = Enum.StoreProductPurchaseStatus.STORE_PRODUCT_NOT_PURCHASED
		end
		registerVal12 = Dvar.store_activateCPSale:exists()
		registerVal12 = Dvar.store_activateCPSale:get()
		registerVal12 = CoD.StoreUtility.IsCodPointSalePackage(registerVal11.metadata)
		if registerVal12 and registerVal12 == "1" and registerVal12 then
			registerVal11.productImage = (registerVal11.productImage .. "_sale")
			registerVal11.previewImage = (registerVal11.previewImage .. "_sale")
		end
		registerVal12 = Dvar.store_showBonusImage:exists()
		registerVal12 = Dvar.store_showBonusImage:get()
		registerVal12 = string.find(registerVal11.productImage, "codpoints")
		registerVal12 = string.find(registerVal11.productImage, "200")
		if registerVal12 and registerVal12 == "1" and registerVal12 and not registerVal12 then
			registerVal11.productImage = (registerVal11.productImage .. "_bonus")
			registerVal11.previewImage = (registerVal11.previewImage .. "_bonus")
		end
		registerVal12 = Dvar.store_imageMostPopular:exists()
		registerVal12 = Dvar.store_imageMostPopular:get()
		registerVal12 = string.find(registerVal11.productImage, "2400")
		if registerVal12 and registerVal12 == "1" and registerVal12 then
			registerVal11.productImage = (registerVal11.productImage .. "_most_popular")
			registerVal11.previewImage = (registerVal11.previewImage .. "_most_popular")
		end
		registerVal12 = Engine.CreateModel(registerVal1, ("button" .. index7))
		if index7 ~= 1.000000 or not "CoD.StoreFeaturePreviewImageWidget" then
		end
		local registerVal16 = {}
		registerVal16.name = registerVal11.name
		registerVal16.price = registerVal11.price
		registerVal16.desc = registerVal11.desc
		registerVal16.productID = registerVal11.productID
		registerVal16.skuID = registerVal11.skuID
		registerVal16.previewImage = registerVal11.previewImage
		registerVal16.productImage = registerVal11.productImage
		registerVal16.metadata = registerVal11.metadata
		registerVal16.videoHighResRef = registerVal11.videoHighResRef
		registerVal16.videoLowResRef = registerVal11.videoLowResRef
		registerVal16.videoHighResRef = registerVal11.videoHighResRef
		registerVal16.videoLowResRef = registerVal11.videoLowResRef
		registerVal16.frameWidget = "CoD.StoreVideoProductButtonImageWidget"
		registerVal16.purchasestatus = registerVal11.purchasestatus
		registerVal16.serviceLabel = registerVal11.serviceLabel
		ListHelper_CreateModelsFromTable(registerVal12, registerVal16)
	end
	return registerVal1
end

registerVal2.getModel = __FUNC_71701_
DataSources["StoreFeaturedProductList"] = registerVal2
registerVal2 = {}
local function __FUNC_723CC_(arg0)
	local registerVal1 = Engine.GetModelForController(arg0)
	local registerVal2 = Engine.GetModel(registerVal1, "StoreRoot")
	return registerVal2
end

registerVal2.getModel = __FUNC_723CC_
DataSources["StoreRoot"] = registerVal2
local function __FUNC_72484_(arg0)
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.GetModel(registerVal4, "ChooseClassCPClientMenu")
	registerVal4 = Engine.GetModel(registerVal3, "numActiveClients")
	if registerVal3 and registerVal4 then
		local registerVal5 = Engine.GetModelValue(registerVal4)
	end
	for index4=1.000000, registerVal5, 1.000000 do
		local registerVal10 = {}
		local registerVal11 = {}
		registerVal11.clientIndex = index4
		registerVal10.models = registerVal11
		table.insert({}, registerVal10)
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("ChooseClassClients", __FUNC_72484_)
DataSources["ChooseClassClients"] = registerVal2
registerVal2 = {}
local function __FUNC_7264C_(arg0, arg1, arg2)
	arg1.customClassList = {}
	local registerVal3 = Engine.GetCustomClassCount(arg0)
	local registerVal5 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal5, "CustomClassList")
	for index5=1.000000, registerVal3, 1.000000 do
		arg1.customClassList[index5] = {}
		local registerVal11 = Engine.CreateModel(registerVal4, ("class" .. index5))
		arg1.customClassList[index5].models = registerVal11
		CoD.CACUtility.GetCustomClassModel(arg0, (index5 - 1.000000), arg1.customClassList[index5].models)
		registerVal11 = {}
		registerVal11.classNum = (index5 - 1.000000)
		arg1.customClassList[index5].properties = registerVal11
	end
end

registerVal2.prepare = __FUNC_7264C_
local function __FUNC_728C3_(arg0)
	return #arg0.customClassList
end

registerVal2.getCount = __FUNC_728C3_
local function __FUNC_72919_(arg0, arg1, arg2)
	return arg1.customClassList[arg2].models
end

registerVal2.getItem = __FUNC_72919_
local function __FUNC_72995_(arg0, arg1)
	return arg0.customClassList[arg1].properties
end

registerVal2.getCustomPropertiesForItem = __FUNC_72995_
DataSources["ChooseClassList"] = registerVal2
registerVal2 = {}
local function __FUNC_72A15_(arg0, arg1, arg2, arg3)
	local registerVal5 = CanUseSharedLoadouts(arg3)
	local registerVal6 = Engine.GetModelForController(arg3)
	registerVal5 = Engine.GetModel(registerVal6, "ChooseClassCPClientMenu")
	registerVal6 = Engine.GetModel(registerVal5, "selectedClientIndex")
	local registerVal7 = Engine.GetModelValue(registerVal6)
	local registerVal8 = Engine.GetModel(registerVal5, ("client" .. registerVal7))
	if registerVal5 and registerVal5 and registerVal6 and registerVal8 then
		local registerVal9 = Engine.GetModelValue(Engine.GetModel(registerVal8, "xuid"))
	end
	registerVal5 = Engine.CreateModel(arg0, ("class" .. arg1))
	CoD.CACUtility.GetCustomClassModel(arg3, arg2, registerVal5, registerVal9)
	return registerVal5
end

registerVal2["prepareModelForIndex"] = __FUNC_72A15_
local function __FUNC_72CB8_(arg0, arg1, arg2)
	local registerVal3 = CoD.GetTeamID(arg0)
	local registerVal5 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.GetModel(registerVal5, "CustomClassList.prepared")
	if not registerVal4 then
		local registerVal6 = Engine.GetModelForController(arg0)
		registerVal5 = Engine.CreateModel(registerVal6, "CustomClassList.prepared")
		Engine.SetModelValue(registerVal5, -1.000000)
	end
	registerVal5 = Engine.GetModelValue(registerVal5)
	local registerVal9 = Engine.GetModelForController(arg0)
	local registerVal8 = Engine.GetModel(registerVal9, "classSetValue")
	if registerVal8 then
		registerVal9 = Engine.GetModelValue(registerVal8)
		if registerVal9 ~= CoD.PrestigeUtility.ChooseClassSets.Default and registerVal9 ~= CoD.PrestigeUtility.ChooseClassSets.Custom then
		end
	end
	registerVal9 = Engine.GetCustomClassCount(arg0)
	arg1.customClassCount = registerVal9
	local registerVal11 = math.max((10.000000 - arg1.customClassCount), 0.000000)
	local registerVal10 = math.min(registerVal11, 5.000000)
	if registerVal5 ~= registerVal3 or true then
		Engine.SetModelValue(registerVal5, registerVal3)
		CoD.CACUtility.classModels[arg0] = {}
		registerVal11 = Engine.GetModelForController(arg0)
		registerVal10 = Engine.CreateModel(registerVal11, "CustomClassList")
		arg1.classModels = {}
		registerVal11 = CustomClassesEnabled()
		if registerVal11 then
			if true then
				if true and registerVal9 == CoD.PrestigeUtility.ChooseClassSets.Custom then
					for index11=1.000000, arg1.customClassCount, 1.000000 do
						local registerVal17 = {}
						local registerVal18 = DataSources.ChooseClass_InGame.prepareModelForIndex(registerVal10, index11, (index11 - 1.000000), arg0)
						registerVal17.models = registerVal18
						registerVal18 = {}
						registerVal18.classNum = (index11 - 1.000000)
						registerVal17.properties = registerVal18
						table.insert(arg1.classModels, registerVal17)
					end
				end
			end
		end
		registerVal11 = IsMultiplayer()
		if registerVal11 then
			if not true then
				for index12=11.000000, ((11.000000 + registerVal10) - 1.000000), 1.000000 do
					registerVal18 = {}
					local registerVal19 = DataSources.ChooseClass_InGame.prepareModelForIndex(registerVal10, index12, (index12 - 1.000000), arg0)
					registerVal18.models = registerVal19
					registerVal19 = {}
					registerVal19.classNum = (index12 - 1.000000)
					registerVal18.properties = registerVal19
					table.insert(arg1.classModels, registerVal18)
				end
			else
				if true and registerVal9 == CoD.PrestigeUtility.ChooseClassSets.Default then
					for index12=11.000000, ((11.000000 + 5.000000) - 1.000000), 1.000000 do
						registerVal18 = {}
						registerVal19 = DataSources.ChooseClass_InGame.prepareModelForIndex(registerVal10, index12, (index12 - 1.000000), arg0)
						registerVal18.models = registerVal19
						registerVal19 = {}
						registerVal19.classNum = (index12 - 1.000000)
						registerVal18.properties = registerVal19
						table.insert(arg1.classModels, registerVal18)
					end
				end
			end
		end
		registerVal11 = IsCampaign()
		if registerVal11 and CoD.perController[arg0].fieldOpsKitClassNum ~= nil then
			local registerVal14 = {}
			local registerVal15 = DataSources.ChooseClass_InGame.prepareModelForIndex(registerVal10, (arg1.customClassCount + 1.000000), (CoD.perController[arg0].fieldOpsKitClassNum - 1.000000), arg0)
			registerVal14.models = registerVal15
			registerVal15 = {}
			registerVal15.classNum = (CoD.perController[arg0].fieldOpsKitClassNum - 1.000000)
			registerVal14.properties = registerVal15
			table.insert(arg1.classModels, registerVal14)
		end
		CoD.CACUtility.classModels[arg0] = arg1.classModels
	else
		arg1.classModels = CoD.CACUtility.classModels[arg0]
		registerVal10 = IsCampaign()
		registerVal11 = Engine.GetModelForController(arg0)
		registerVal10 = Engine.GetModel(registerVal11, "CustomClassList")
		if CoD.CACUtility.classModels[arg0] and registerVal10 and CoD.perController[arg0].fieldOpsKitClassNum ~= nil then
			if (arg1.customClassCount + 1.000000) <= #arg1.classModels then
				local registerVal13 = DataSources.ChooseClass_InGame.prepareModelForIndex(registerVal10, (arg1.customClassCount + 1.000000), (CoD.perController[arg0].fieldOpsKitClassNum - 1.000000), arg0)
				arg1.classModels[(arg1.customClassCount + 1.000000)].models = registerVal13
				arg1.classModels[(arg1.customClassCount + 1.000000)].properties.classNum = (CoD.perController[arg0].fieldOpsKitClassNum - 1.000000)
			else
				registerVal14 = {}
				registerVal15 = DataSources.ChooseClass_InGame.prepareModelForIndex(registerVal10, (arg1.customClassCount + 1.000000), (CoD.perController[arg0].fieldOpsKitClassNum - 1.000000), arg0)
				registerVal14.models = registerVal15
				registerVal15 = {}
				registerVal15.classNum = (CoD.perController[arg0].fieldOpsKitClassNum - 1.000000)
				registerVal14.properties = registerVal15
				table.insert(arg1.classModels, registerVal14)
			end
		end
	end
end

registerVal2.prepare = __FUNC_72CB8_
local function __FUNC_73785_(arg0)
	if arg0.classModels then
		return #arg0.classModels
	end
	return 0.000000
end

registerVal2.getCount = __FUNC_73785_
local function __FUNC_737FA_(arg0, arg1, arg2)
	if arg1.classModels then
		return arg1.classModels[arg2].models
	end
end

registerVal2.getItem = __FUNC_737FA_
local function __FUNC_73885_(arg0, arg1)
	return arg0.classModels[arg1].properties
end

registerVal2.getCustomPropertiesForItem = __FUNC_73885_
local function __FUNC_73901_(arg0, arg1, arg2)
	if arg1 == arg0.customClassCount then
		return 20.000000
	end
	return 0.000000
end

registerVal2["getSpacerAfterRow"] = __FUNC_73901_
DataSources["ChooseClass_InGame"] = registerVal2
registerVal2 = {}
local function __FUNC_73974_(arg0)
	local registerVal2 = Engine.GetModelValue(Engine.GetModel(CoD.perController[arg0].classModel, "customClassName"))
	local registerVal5 = IsClassSetsAvailableForCurrentGameMode()
	if registerVal5 then
		registerVal5 = Engine.GetCurrentClassSetIndex(arg0)
		registerVal5 = Engine.GetClassSetName(arg0, registerVal5)
	end
	local registerVal6 = Engine.GetModelForController(arg0)
	registerVal5 = Engine.CreateModel(registerVal6, "CustomClassMenu")
	local registerVal7 = Engine.CreateModel(registerVal5, "currentClassName")
	Engine.SetModelValue(registerVal7, registerVal2)
	registerVal7 = Engine.CreateModel(registerVal5, "currentClassSetName")
	Engine.SetModelValue(registerVal7, registerVal5)
	registerVal7 = Engine.CreateModel(CoD.perController[arg0].classModel, "customClassOptionsHintText")
	Engine.SetModelValue(registerVal7, "")
	registerVal7 = Engine.CreateModel(CoD.perController[arg0].classModel, "customClassSetName")
	Engine.SetModelValue(registerVal7, registerVal5)
	return CoD.perController[arg0].classModel
end

registerVal2.getModel = __FUNC_73974_
local function __FUNC_73D2E_(arg0, arg1, arg2)
	local registerVal3 = Engine.GetModel(arg0, arg1)
	if registerVal3 == nil then
		return 
	end
	local registerVal4 = Engine.GetModelValue(Engine.GetModel(registerVal3, "itemIndex"))
	local registerVal6 = Engine.GetModel(arg0, (arg1 .. "attachment1"))
	local registerVal7 = Engine.GetModelValue(Engine.GetModel(registerVal6, "itemIndex"))
	if CoD.CACUtility.EmptyItemIndex < registerVal4 and registerVal6 and CoD.CACUtility.EmptyItemIndex < registerVal7 then
		local registerVal8 = Engine.GetModelValue(Engine.GetModel(registerVal3, "name"))
		local registerVal10 = Engine.CreateModel(registerVal6, "name")
		Engine.SetModelValue(registerVal10, registerVal8)
		registerVal10 = Engine.CreateModel(registerVal6, "image")
		Engine.SetModelValue(registerVal10, Engine.GetModelValue(Engine.GetModel(registerVal3, "image")))
		registerVal10 = Engine.CreateModel(registerVal6, "desc")
		Engine.SetModelValue(registerVal10, Engine.GetModelValue(Engine.GetModel(registerVal3, "desc")))
		registerVal10 = Engine.CreateModel(registerVal6, "itemIndex")
		Engine.SetModelValue(registerVal10, 1.000000)
		registerVal10 = Engine.CreateModel(registerVal6, "weaponSlot")
		Engine.SetModelValue(registerVal10, (arg1 .. "attachment1"))
	end
end

registerVal2["updateCustomSlotModel"] = __FUNC_73D2E_
local function __FUNC_740EF_(arg0, arg1, arg2, arg3)
	local registerVal4 = Engine.GetModel(arg1, arg2)
	if not registerVal4 then
		return 
	end
	local function __FUNC_7446D_(arg0, arg1, arg3, arg4, arg5)
		local registerVal5 = CoD.PrestigeUtility.GetPermanentUnlockMode()
		local registerVal7 = Engine.CreateModel(arg0, ("cust" .. arg2 .. "weaponattachment" .. arg1))
		local registerVal8 = Engine.GetAttachmentName(arg4, arg5, registerVal5)
		local registerVal10 = Engine.CreateModel(registerVal7, "name")
		Engine.SetModelValue(registerVal10, registerVal8)
		local registerVal9 = Engine.GetAttachmentImageByWeaponAndAttachIndex(arg4, arg5, registerVal5)
		local registerVal11 = Engine.CreateModel(registerVal7, "image")
		Engine.SetModelValue(registerVal11, registerVal9)
		registerVal11 = Engine.CreateModel(registerVal7, "weaponSlot")
		Engine.SetModelValue(registerVal11, (arg2 .. "attachment" .. arg3))
		registerVal10 = Engine.GetAttachmentRef(arg4, arg5, registerVal5)
		local registerVal12 = Engine.CreateModel(registerVal7, "ref")
		Engine.SetModelValue(registerVal12, registerVal10)
	end

	if arg2 == "primary" or arg2 == "secondary" then
		local registerVal6 = Engine.GetModel(registerVal4, "itemIndex")
		if registerVal6 then
			for index7=1.000000, arg3, 1.000000 do
				local registerVal12 = Engine.GetModel(registerVal4, ("cust" .. arg2 .. "weaponattachment" .. index7))
				if registerVal12 then
					Engine.UnsubscribeAndFreeModel(registerVal12)
				end
			end
			local registerVal7 = Engine.GetModelValue(registerVal6)
			if CoD.CACUtility.EmptyItemIndex < registerVal7 then
				local registerVal9 = CoD.CACUtility.GetAttachmentListForSlot(arg2)
				local registerVal10, registerVal11, registerVal12 = ipairs(registerVal9)
				for index13,value14 in registerVal10, registerVal11, registerVal12 do
					local registerVal15 = CoD.CACUtility.GetItemEquippedInSlot(value14, arg0, arg1)
					if CoD.CACUtility.EmptyItemIndex < registerVal15 then
						__FUNC_7446D_(registerVal4, 1.000000, index13, registerVal7, registerVal15)
					end
				end
				for index10=(1.000000 + 1.000000), #registerVal11, 1.000000 do
					registerVal15 = Engine.CreateModel(registerVal4, ("cust" .. arg2 .. "weaponattachment" .. index10))
				end
			end
		end
	end
end

registerVal2["updateWeaponAttachmentList"] = __FUNC_740EF_
DataSources["CustomClassMenu"] = registerVal2
registerVal2 = {}
local function __FUNC_74787_(arg0, arg1, arg2)
	arg1.resetDefaultClassList = {}
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.CreateModel(registerVal4, "ResetDefaultClassList")
	for index4=1.000000, CoD.CACUtility.maxDefaultClass, 1.000000 do
		local registerVal9 = Engine.CreateModel(registerVal3, ("DefaultClass" .. index4))
		arg1.resetDefaultClassList[index4] = registerVal9
		registerVal9 = Engine.CreateModel(arg1.resetDefaultClassList[index4], "customClassName")
		Engine.SetModelValue(registerVal9, Engine.Localize(("CLASS_SLOT" .. index4)))
		registerVal9 = Engine.CreateModel(arg1.resetDefaultClassList[index4], "index")
		Engine.SetModelValue(registerVal9, index4)
	end
end

registerVal2.prepare = __FUNC_74787_
local function __FUNC_74A30_(arg0)
	return #arg0.resetDefaultClassList
end

registerVal2.getCount = __FUNC_74A30_
local function __FUNC_74A8F_(arg0, arg1, arg2)
	return arg1.resetDefaultClassList[arg2]
end

registerVal2.getItem = __FUNC_74A8F_
DataSources["ResetDefaultClass"] = registerVal2
local function __FUNC_74AF3_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	local registerVal2, registerVal3, registerVal4 = ipairs(CoD.Craft.WeaponGroupNames)
	for index5,value6 in registerVal2, registerVal3, registerVal4 do
		local registerVal9 = {}
		local registerVal10 = {}
		local registerVal11 = Engine.Localize(value6.name)
		registerVal10.tabName = registerVal11
		registerVal9.models = registerVal10
		registerVal10 = {}
		registerVal10.filter = value6.weapon_category
		registerVal9.properties = registerVal10
		table.insert({}, registerVal9)
	end
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderr
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	return {}
end

registerVal2 = ListHelper_SetupDataSource("Paintshop.PaintshopWeaponTabType", __FUNC_74AF3_)
DataSources["PaintshopWeaponTabType"] = registerVal2
local function __FUNC_74DB0_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	local registerVal2, registerVal3, registerVal4 = ipairs(CoD.emblem.MaterialCategory)
	for index5,value6 in registerVal2, registerVal3, registerVal4 do
		local registerVal7 = IsBooleanDvarSet("enable_camo_materials_tab")
		if value6.type ~= "camo" or registerVal7 then
			local registerVal8 = Engine.GetEmblemMaterialFilterCount(arg0, value6.category)
			for index9=0.000000, (registerVal8 - 1.000000), 1.000000 do
				local registerVal13 = Engine.GetEmblemMaterialIDByIndex(arg0, value6.category, index9)
				if value6.category == CoD.emblem.BlackMarketEmblemCategory then
					local registerVal15 = Engine.GetEmblemMaterialName(registerVal13)
					local registerVal16 = CoD.BlackMarketUtility.IsItemLocked(arg0, registerVal15)
				end
				registerVal15 = CoD.CraftUtility.Emblems.IsMaterialNew(arg0, registerVal13)
				if not registerVal16 and registerVal15 then
				end
			end
			if value6.type == "general" then
			end
			local registerVal11 = {}
			local registerVal12 = {}
			registerVal13 = Engine.Localize(value6.name)
			registerVal12.tabName = registerVal13
			registerVal12.breadcrumbCount = 0.000000
			registerVal11.models = registerVal12
			registerVal12 = {}
			registerVal12.filter = value6.category
			registerVal11.properties = registerVal12
			table.insert({}, registerVal11)
		end
	end
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderr
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	return {}
end

registerVal2 = ListHelper_SetupDataSource("Emblem.EmblemMaterialTabType", __FUNC_74DB0_)
DataSources["EmblemMaterialTabType"] = registerVal2
local function __FUNC_7535B_(arg0)
	if CoD.perController[arg0].gunsmithCamoIndexModel then
	end
	local registerVal3 = Engine.CurrentSessionMode()
	if not CoD.perController[arg0].gunsmithCamoIndexModel and not {} or CoD.perController[arg0].editingWeaponBuildKits then
		local registerVal5 = CoD.GetCustomization(arg0, "weapon_index")
	else
		local registerVal7 = CoD.CACUtility.GetItemEquippedInSlot(CoD.perController[arg0].weaponCategory, arg0, CoD.perController[arg0].classModel)
	end
	if registerVal3 < Enum.eModes.MODE_COUNT then
		local registerVal6 = Engine.GetItemRef(registerVal7, registerVal3)
	else
		registerVal6 = Engine.GetItemRef(registerVal7, Enum.eModes.MODE_MULTIPLAYER)
	end
	local function __FUNC_75DF3_(arg0, arg1)
		if arg1 < Enum.WeaponOptionFilter.WEAPONOPTION_FILTER_MODE_COUNT then
			if arg1 == registerVal3 then
			else
			end
		end
		local registerVal5 = {}
		local registerVal6 = {}
		registerVal6.tabName = arg0
		registerVal6.tabIcon = ""
		registerVal6.breadcrumbCount = 0.000000
		registerVal5.models = registerVal6
		registerVal6 = {}
		registerVal6.filterEnum = arg1
		local registerVal7 = CoD.WeaponOptionFilterToString(arg1)
		registerVal6.filterString = registerVal7
		registerVal6.selectIndex = true
		registerVal5.properties = registerVal6
		table.insert({}, registerVal5)
	end

	local registerVal9 = {}
	local registerVal10 = {}
	registerVal10.tabIcon = CoD.buttonStrings.shoulderl
	registerVal9.models = registerVal10
	registerVal10 = {}
	registerVal10.m_mouseDisabled = true
	registerVal9.properties = registerVal10
	table.insert({}, registerVal9)
	if CoD.perController[arg0].customizationType == Enum.eWeaponOptionGroup.WEAPONOPTION_GROUP_RETICLE then
		__FUNC_75DF3_("MENU_CAMPAIGN_CAPS", Enum.WeaponOptionFilter.WEAPONOPTION_FILTER_CP)
		__FUNC_75DF3_("MENU_MULTIPLAYER_CAPS", Enum.WeaponOptionFilter.WEAPONOPTION_FILTER_MP)
		__FUNC_75DF3_("MENU_ZOMBIES_CAPS", Enum.WeaponOptionFilter.WEAPONOPTION_FILTER_ZM)
		registerVal7 = IsLive()
		if registerVal7 then
			__FUNC_75DF3_("MENU_BLACK_MARKET", Enum.WeaponOptionFilter.WEAPONOPTION_FILTER_BM)
		else
			if CoD.CACUtility.WeaponsWithNoCPCamos[registerVal6] == nil then
				__FUNC_75DF3_("MENU_CAMPAIGN_CAPS", Enum.WeaponOptionFilter.WEAPONOPTION_FILTER_CP)
			end
			registerVal7 = IsLive()
			if {} or CoD.CACUtility.WeaponsWithNoMPCamos[registerVal6] == nil then
				__FUNC_75DF3_("MENU_MULTIPLAYER_CAPS", Enum.WeaponOptionFilter.WEAPONOPTION_FILTER_MP)
			end
			registerVal7 = IsLive()
			if {} or CoD.CACUtility.WeaponsWithNoZMCamos[registerVal6] == nil then
				__FUNC_75DF3_("MENU_ZOMBIES_CAPS", Enum.WeaponOptionFilter.WEAPONOPTION_FILTER_ZM)
			end
			registerVal7 = IsLive()
			if registerVal7 and CoD.BlackMarketUtility.WeaponsWithNoBMCamos[registerVal6] == nil then
				__FUNC_75DF3_("MENU_BLACK_MARKET", Enum.WeaponOptionFilter.WEAPONOPTION_FILTER_BM)
			end
		end
	end
	__FUNC_75DF3_("MENU_EXTRAS_CAPS", Enum.WeaponOptionFilter.WEAPONOPTION_FILTER_EXTRAS)
	registerVal9 = {}
	registerVal10 = {}
	registerVal10.tabIcon = CoD.buttonStrings.shoulderr
	registerVal9.models = registerVal10
	registerVal10 = {}
	registerVal10.m_mouseDisabled = true
	registerVal9.properties = registerVal10
	table.insert({}, registerVal9)
	return {}
end

registerVal2 = DataSourceHelpers.ListSetup("CACCustomizationTabs", __FUNC_7535B_, false)
DataSources["CACCustomizationTabs"] = registerVal2
local function __FUNC_7600F_(arg0)
	local registerVal2 = CoD.CraftUtility.GetCraftMode()
	if CoD.perController[arg0].gunsmithAttachmentIsZombieMode == "true" then
	end
	local registerVal3 = CoD.GetCustomization(arg0, "weapon_index")
	local registerVal4 = Engine.GetNumAttachments(registerVal3, Enum.eModes.MODE_ZOMBIES)
	local registerVal7 = Engine.GetModelValue(CoD.perController[arg0].gunsmithAttachmentModel)
	local registerVal9 = CoD.GetCustomization(arg0, "weapon_ref")
	local registerVal17 = {}
	registerVal17.damage = 0.000000
	registerVal17.range = 0.000000
	registerVal17.fireRate = 0.000000
	registerVal17.accuracy = 0.000000
	for index19=1.000000, CoD.CraftUtility.Gunsmith.MAX_ATTACHMENTS, 1.000000 do
		local registerVal23 = Engine.GetModelValue(Engine.GetModel(CoD.perController[arg0].gunsmithVariantModel, ("attachment" .. index19)))
		if registerVal7 ~= registerVal23 and CoD.CACUtility.EmptyItemIndex < registerVal23 then
			local registerVal24 = Engine.GetAttachmentRefByIndex(registerVal23)
			table.insert({}, registerVal24)
			local registerVal25 = Engine.TableLookup(nil, "gamedata/weapons/mp/mp_attributesTable.csv", Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_REFERENCE, registerVal24, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_WEAPON_NAME, registerVal9, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_DAMAGE)
			local registerVal26 = Engine.TableLookup(nil, "gamedata/weapons/mp/mp_attributesTable.csv", Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_REFERENCE, registerVal24, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_WEAPON_NAME, registerVal9, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_RANGE)
			local registerVal27 = Engine.TableLookup(nil, "gamedata/weapons/mp/mp_attributesTable.csv", Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_REFERENCE, registerVal24, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_WEAPON_NAME, registerVal9, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_FIRE_RATE)
			local registerVal28 = Engine.TableLookup(nil, "gamedata/weapons/mp/mp_attributesTable.csv", Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_REFERENCE, registerVal24, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_WEAPON_NAME, registerVal9, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_ACCURACY)
			if registerVal25 ~= "" or not 0.000000 then
			end
			registerVal17.damage = (registerVal17.damage + registerVal25)
			if registerVal26 ~= "" or not 0.000000 then
			end
			registerVal17.range = (registerVal17.range + registerVal26)
			if registerVal27 ~= "" or not 0.000000 then
			end
			registerVal17.fireRate = (registerVal17.fireRate + registerVal27)
			if registerVal28 ~= "" or not 0.000000 then
			end
			registerVal17.accuracy = (registerVal17.accuracy + registerVal28)
		end
	end
	local registerVal19 = Engine.GetModelForController(arg0)
	for index20=1.000000, (registerVal4 - 1.000000), 1.000000 do
		registerVal26 = IsToggleVariantEnabled()
		if registerVal26 then
			registerVal26 = Engine.Localize("MENU_BUTTON_EMBLEM_ACV")
		end
		if CoD.perController[arg0].gunsmithAttachmentType == "attachment" then
			registerVal26 = Engine.IsOptic(registerVal3, index20, Enum.eModes.MODE_ZOMBIES)
			registerVal26 = Engine.GetItemAttachment(registerVal3, index20, Enum.eModes.MODE_ZOMBIES)
			registerVal26 = Engine.IsOptic(registerVal3, index20, Enum.eModes.MODE_ZOMBIES)
			if registerVal26 == false and CoD.perController[arg0].gunsmithAttachmentType == "optic" and registerVal26 == true then
				registerVal26 = Engine.GetItemAttachment(registerVal3, index20, Enum.eModes.MODE_ZOMBIES)
			end
		end
		registerVal26 = Engine.GetAttachmentAllocationCost(registerVal3, index20, Enum.eModes.MODE_ZOMBIES)
		if CoD.CraftUtility.Gunsmith.EMPTY_ITEM_INDEX < registerVal26 and 0.000000 < registerVal26 then
			registerVal27 = Engine.GetAttachmentRef(registerVal3, index20, Enum.eModes.MODE_ZOMBIES)
			registerVal28 = Engine.GetAttachmentNameByIndex(registerVal26)
			local registerVal29 = Engine.GetAttachmentUniqueImageByAttachmentIndex(Enum.eModes.MODE_MULTIPLAYER, registerVal3, registerVal26)
			local registerVal32 = Engine.GetGlobalModel()
			local registerVal31 = Engine.GetModel(registerVal32, "CraftWeaponList")
			if Enum.eModes.MODE_ZOMBIES == Enum.eModes.MODE_ZOMBIES then
				CoD.GetUnlockablesTable(arg0)
				local registerVal33 = Engine.GetGlobalModel()
				registerVal32 = Engine.GetModel(registerVal33, "Unlockables")
			end
			registerVal32 = Engine.GetModel(registerVal32, (registerVal3 .. ".weaponAttributes"))
			local function __FUNC_76F61_(arg0, arg1)
				local registerVal2 = Engine.GetModelValue(Engine.GetModel(registerVal32, arg0))
				local registerVal3 = Engine.TableLookup(nil, "gamedata/weapons/mp/mp_attributesTable.csv", Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_REFERENCE, registerVal27, Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_WEAPON_NAME, registerVal9, arg1)
				if registerVal2 == "" then
				end
				if registerVal3 == "" then
				end
				local registerVal5, registerVal6, registerVal7 = ipairs({})
				for index8,value9 in registerVal5, registerVal6, registerVal7 do
					if value9 == registerVal27 then
					else
					end
				end
				if not true then
				end
				return (0.000000 .. "," .. ((0.000000 + registerVal17[arg0]) + 0.000000))
			end

			local registerVal34 = {}
			local registerVal35 = {}
			registerVal35.name = registerVal28
			registerVal35.image = registerVal29
			registerVal35.itemIndex = index20
			registerVal35.weaponIndex = registerVal3
			registerVal35.attachmentIndex = registerVal26
			local registerVal36 = Engine.GetAttachmentDesc(registerVal3, index20, Enum.eModes.MODE_ZOMBIES)
			registerVal35.description = registerVal36
			registerVal35.acvIndex = CoD.CraftUtility.Gunsmith.EMPTY_ITEM_INDEX
			registerVal36 = {}
			local registerVal37 = __FUNC_76F61_("damage", Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_DAMAGE)
			registerVal36.damage = registerVal37
			registerVal37 = __FUNC_76F61_("range", Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_RANGE)
			registerVal36.range = registerVal37
			registerVal37 = __FUNC_76F61_("fireRate", Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_FIRE_RATE)
			registerVal36.fireRate = registerVal37
			registerVal37 = __FUNC_76F61_("accuracy", Enum.WeaponAttributesColumn.WEAPONATTRIBUTES_ACCURACY)
			registerVal36.accuracy = registerVal37
			registerVal35.weaponAttributes = registerVal36
			registerVal35.hintText = nil
			registerVal34.models = registerVal35
			registerVal35 = {}
			if registerVal7 ~= registerVal26 then
			end
			registerVal35.selectIndex = true
			registerVal34.properties = registerVal35
			table.insert({}, registerVal34)
		end
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("GunsmithWeaponAttachments", __FUNC_7600F_, true)
DataSources["GunsmithWeaponAttachments"] = registerVal2
registerVal2 = {}
local function __FUNC_770E0_(arg0, arg1, arg2)
	arg1.controller = arg0
	local registerVal3 = CoD.GetCustomization(arg0, "weapon_index")
	if not registerVal3 then
		return 
	end
	local registerVal5 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal5, "Gunsmith.VariantList")
	arg1.variantListModel = registerVal4
	registerVal4 = CoD.CraftUtility.Gunsmith.GetTotalUsedVariants()
	registerVal5 = CoD.CraftUtility.Gunsmith.GetTotalUsedWeaponVariants(registerVal3)
	local registerVal6 = CoD.CraftUtility.Gunsmith.GetTotalAllowedVaraints()
	if registerVal4 == registerVal6 then
		arg1.totalVariants = registerVal5
	else
		arg1.totalVariants = (registerVal5 + 1.000000)
	end
	local registerVal7 = Engine.CreateModel(arg1.variantListModel, "ForceUpdate")
	if not arg1.updateSubscription then
		local function __FUNC_77494_()
			arg1:updateDataSource()
		end

		local registerVal8 = arg1:subscribeToModel(registerVal7, __FUNC_77494_, false)
		arg1.updateSubscription = registerVal8
	end
	arg1.variantList = {}
	registerVal8 = CoD.CraftUtility.Gunsmith.GetSortedWeaponVariantList(registerVal3)
	arg1.variantList = registerVal8
end

registerVal2.prepare = __FUNC_770E0_
local function __FUNC_774E6_(arg0)
	return arg0.totalVariants
end

registerVal2.getCount = __FUNC_774E6_
local function __FUNC_77537_(arg0, arg1, arg2, arg3, arg4)
	local registerVal6 = Engine.CreateModel(arg4, "variantTextEntry")
	Engine.SetModelValue(registerVal6, Engine.Localize("MENU_GUNSMITH_ENTER_VARIANT_NAME"))
	registerVal6 = Engine.CreateModel(arg4, "variantIndex")
	Engine.SetModelValue(registerVal6, arg2.variantIndex)
	local registerVal5 = CoD.GetCustomization(arg0, "weapon_index")
	local registerVal7 = Engine.CreateModel(arg4, "weaponIndex")
	Engine.SetModelValue(registerVal7, registerVal5)
	registerVal6 = CoD.CraftUtility.Gunsmith.IsVariantIndexOccupied(arg2.variantIndex)
	if registerVal6 then
		registerVal7 = Engine.CreateModel(arg4, "variantName")
		Engine.SetModelValue(registerVal7, arg2.variantName)
		registerVal7 = Engine.CreateModel(arg4, "variantNameBig")
		Engine.SetModelValue(registerVal7, arg2.variantName)
	else
		registerVal7 = Engine.CreateModel(arg4, "variantName")
		Engine.SetModelValue(registerVal7, Engine.Localize("MENU_GUNSMITH_CREATE_VARIANT"))
		registerVal7 = Engine.CreateModel(arg4, "variantNameBig")
		Engine.SetModelValue(registerVal7, "")
	end
	registerVal6, registerVal7, registerVal8 = ipairs(arg2.attachment)
	for index9,value10 in registerVal6, registerVal7, registerVal8 do
		local registerVal12 = Engine.CreateModel(arg4, ("attachment" .. index9))
		Engine.SetModelValue(registerVal12, value10)
	end
	registerVal6, registerVal7, registerVal8 = ipairs(arg2.attachmentVariant)
	for index9,value10 in registerVal6, registerVal7, registerVal8 do
		registerVal12 = Engine.CreateModel(arg4, ("attachmentVariant" .. index9))
		Engine.SetModelValue(registerVal12, value10)
	end
	registerVal7 = Engine.CreateModel(arg4, "reticleIndex")
	Engine.SetModelValue(registerVal7, arg2.reticleIndex)
	registerVal8 = CoD.CraftUtility.Gunsmith.GetAttachmentIconList(arg0, ("Gunsmith.VariantList.Variant" .. arg1 .. "AttachmentList"), registerVal5, arg2.attachment)
	DataSources[("Gunsmith.VariantList.Variant" .. arg1 .. "AttachmentList")] = registerVal8
	registerVal8 = Engine.CreateModel(arg4, "listDataSource")
	Engine.SetModelValue(registerVal8, ("Gunsmith.VariantList.Variant" .. arg1 .. "AttachmentList"))
	registerVal8 = Engine.CreateModel(arg4, "sortIndex")
	Engine.SetModelValue(registerVal8, arg3)
	registerVal8 = Engine.CreateModel(arg4, "paintjobSlot")
	Engine.SetModelValue(registerVal8, arg2.paintjobSlot)
	registerVal8 = Engine.CreateModel(arg4, "paintjobIndex")
	Engine.SetModelValue(registerVal8, arg2.paintjobIndex)
	registerVal8 = Engine.CreateModel(arg4, "camoIndex")
	Engine.SetModelValue(registerVal8, arg2.camoIndex)
	registerVal8 = Engine.CreateModel(arg4, "paintjobSlotAndIndex")
	Engine.SetModelValue(registerVal8, (arg2.paintjobSlot .. " " .. arg2.paintjobIndex))
	registerVal7 = Engine.LastInput_Gamepad()
	if registerVal7 then
		registerVal8 = Engine.CreateModel(arg4, "hintText")
		Engine.SetModelValue(registerVal8, Engine.Localize("MPUI_BUTTON_PERSONALIZE_CAPS"))
	else
		if CoD.isPC then
			registerVal8 = Engine.CreateModel(arg4, "hintText")
			Engine.SetModelValue(registerVal8, Engine.Localize("PLATFORM_GUNSMITH_PERSONALIZE_PROMPT"))
		end
	end
	if arg2.readOnly ~= nil then
		registerVal8 = Engine.CreateModel(arg4, "readOnly")
		Engine.SetModelValue(registerVal8, arg2.readOnly)
	end
end

registerVal2["createVariantModel"] = __FUNC_77537_
local function __FUNC_77EDC_(arg0, arg1, arg2)
	local registerVal3 = Engine.CreateModel(arg1.variantListModel, ("variant_" .. arg2))
	local registerVal4 = CoD.CraftUtility.Gunsmith.GetVariantByIndex(arg0, arg1.variantList[arg2].variantIndex)
	DataSources.GunsmithVariantList.createVariantModel(arg0, arg2, registerVal4, arg1.variantList[arg2].sortIndex, registerVal3)
	return registerVal3
end

registerVal2.getItem = __FUNC_77EDC_
DataSources["GunsmithVariantList"] = registerVal2
local function __FUNC_7810D_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	local registerVal2, registerVal3, registerVal4 = ipairs(CoD.Craft.WeaponGroupNames)
	for index5,value6 in registerVal2, registerVal3, registerVal4 do
		local registerVal9 = {}
		local registerVal10 = {}
		local registerVal11 = Engine.Localize(value6.name)
		registerVal10.tabName = registerVal11
		registerVal9.models = registerVal10
		registerVal10 = {}
		registerVal10.filter = value6.weapon_category
		registerVal10.loadoutType = value6.loadout_type
		registerVal9.properties = registerVal10
		table.insert({}, registerVal9)
	end
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderr
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	return {}
end

registerVal2 = ListHelper_SetupDataSource("Gunsmith.GunsmithWeaponTabType", __FUNC_7810D_)
DataSources["GunsmithWeaponTabType"] = registerVal2
registerVal2 = {}
local function __FUNC_78407_(arg0)
	local registerVal1 = CoD.GetCustomization(arg0, "weapon_index")
	local registerVal3 = CoD.CraftUtility.Gunsmith.GetSortedAttachmentList(arg0, CoD.perController[arg0].gunsmithVariantModel)
	local registerVal5 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal5, "Gunsmith.GunsmithSelectedVariantAttachmentIconList")
	local registerVal7 = CoD.CraftUtility.Gunsmith.GetAttachmentIconList(arg0, "Gunsmith.AttachmentIconList", registerVal1, registerVal3.baseAttachmentList)
	DataSources["Gunsmith.AttachmentIconList"] = registerVal7
	registerVal7 = Engine.CreateModel(registerVal4, "listDataSource")
	Engine.SetModelValue(registerVal7, "Gunsmith.AttachmentIconList")
	return registerVal4
end

registerVal2.getModel = __FUNC_78407_
DataSources["GunsmithSelectedVariantAttachmentIconList"] = registerVal2
registerVal2 = {}
local function __FUNC_7873F_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "Gunsmith.GunsmithSelectedItemProperties")
	local registerVal3 = Engine.CreateModel(registerVal1, "itemName")
	Engine.SetModelValue(registerVal3, "")
	registerVal3 = Engine.CreateModel(registerVal1, "title")
	Engine.SetModelValue(registerVal3, "")
	registerVal3 = Engine.CreateModel(registerVal1, "attachmentType")
	Engine.SetModelValue(registerVal3, "")
	return registerVal1
end

registerVal2.getModel = __FUNC_7873F_
DataSources["GunsmithSelectedItemProperties"] = registerVal2
registerVal2 = {}
local function __FUNC_78907_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.GetModel(registerVal2, "fileshareRoot")
	return registerVal1
end

registerVal2.getModel = __FUNC_78907_
DataSources["FileshareRoot"] = registerVal2
registerVal2 = {}
local function __FUNC_789B1_(arg0)
	return CoD.FileshareUtility.GetSelectedItem()
end

registerVal2.getModel = __FUNC_789B1_
DataSources["FileshareSelectedItem"] = registerVal2
local function __FUNC_78A40_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	local registerVal2 = CoD.FileshareUtility.GetCurrentCategory()
	local registerVal3, registerVal4, registerVal5 = ipairs(CoD.FileshareUtility.ShowcaseManagerTabs)
	for index6,value7 in registerVal3, registerVal4, registerVal5 do
		if value7.fileshareCategory == registerVal2 then
		else
		end
		local registerVal10 = Engine.TableLookup(0.000000, CoD.fileShareTable, 1.000000, value7.fileshareCategory, 8.000000)
		local registerVal13 = {}
		local registerVal14 = {}
		local registerVal15 = Engine.Localize((registerVal10 .. "_CAPS"))
		registerVal14.tabName = registerVal15
		registerVal13.models = registerVal14
		registerVal14 = {}
		registerVal14.disabled = false
		registerVal14.fileshareCategory = value7.fileshareCategory
		registerVal14.fileshareKey = value7.fileshareKey
		registerVal14.fileshareVal = value7.fileshareVal
		registerVal14.selectIndex = false
		registerVal13.properties = registerVal14
		table.insert({}, registerVal13)
	end
	registerVal5 = {}
	local registerVal6 = {}
	registerVal6.tabIcon = CoD.buttonStrings.shoulderr
	registerVal5.models = registerVal6
	registerVal6 = {}
	registerVal6.m_mouseDisabled = true
	registerVal5.properties = registerVal6
	table.insert({}, registerVal5)
	return {}
end

registerVal2 = ListHelper_SetupDataSource("FileshareShowcaseManagerTabs", __FUNC_78A40_)
DataSources["FileshareShowcaseManagerTabs"] = registerVal2
local function __FUNC_78E6C_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	local registerVal2, registerVal3, registerVal4 = ipairs(CoD.FileshareUtility.PublishedPaintjobsTabs)
	for index5,value6 in registerVal2, registerVal3, registerVal4 do
		local registerVal9 = {}
		local registerVal10 = {}
		local registerVal11 = Engine.Localize(value6.name)
		registerVal10.tabName = registerVal11
		registerVal9.models = registerVal10
		registerVal10 = {}
		registerVal10.filter = value6.weapon_category
		registerVal10.loadoutType = value6.loadout_type
		registerVal10.disabled = value6.disabled
		registerVal10.fileshareGroup = value6.fileshareGroup
		registerVal10.fileshareCategory = value6.fileshareCategory
		registerVal10.fileshareKey = value6.fileshareKey
		registerVal10.fileshareVal = value6.fileshareVal
		registerVal9.properties = registerVal10
		table.insert({}, registerVal9)
	end
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderr
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	return {}
end

registerVal2 = ListHelper_SetupDataSource("FilesharePublishedPaintjobTabs", __FUNC_78E6C_)
DataSources["FilesharePublishedPaintjobTabs"] = registerVal2
local function __FUNC_79239_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	local registerVal2, registerVal3, registerVal4 = ipairs(CoD.FileshareUtility.PublishedVariantsTabs)
	for index5,value6 in registerVal2, registerVal3, registerVal4 do
		local registerVal9 = {}
		local registerVal10 = {}
		local registerVal11 = Engine.Localize(value6.name)
		registerVal10.tabName = registerVal11
		registerVal9.models = registerVal10
		registerVal10 = {}
		registerVal10.filter = value6.weapon_category
		registerVal10.loadoutType = value6.loadout_type
		registerVal10.disabled = value6.disabled
		registerVal10.fileshareGroup = value6.fileshareGroup
		registerVal10.fileshareCategory = value6.fileshareCategory
		registerVal10.fileshareKey = value6.fileshareKey
		registerVal10.fileshareVal = value6.fileshareVal
		registerVal9.properties = registerVal10
		table.insert({}, registerVal9)
	end
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderr
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	return {}
end

registerVal2 = ListHelper_SetupDataSource("FilesharePublishedVariantsTabs", __FUNC_79239_)
DataSources["FilesharePublishedVariantsTabs"] = registerVal2
local function __FUNC_79604_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	local registerVal2, registerVal3, registerVal4 = ipairs(CoD.emblem.DECALTABS)
	for index5,value6 in registerVal2, registerVal3, registerVal4 do
		local registerVal8 = Engine.EmblemFilterCount(arg0, 0.000000, value6.category)
		for index9=0.000000, (registerVal8 - 1.000000), 1.000000 do
			local registerVal13 = Engine.EmblemFilterIconID(arg0, 0.000000, value6.category, index9)
			if value6.type == "BLACKMARKET" then
				local registerVal15 = CoD.BlackMarketUtility.GetLootDecalName(arg0, registerVal13)
				local registerVal16 = CoD.BlackMarketUtility.IsItemLocked(arg0, registerVal15)
			end
			registerVal15 = Engine.IsEmblemIconNew(arg0, registerVal13)
			if not registerVal16 and registerVal15 then
			end
		end
		if value6.type ~= "BLACKMARKET" then
		end
		local registerVal11 = {}
		local registerVal12 = {}
		registerVal13 = Engine.Localize(value6.displayName)
		registerVal12.tabName = registerVal13
		registerVal12.breadcrumbCount = 0.000000
		registerVal11.models = registerVal12
		registerVal12 = {}
		registerVal12.tabCategory = value6.category
		registerVal11.properties = registerVal12
		table.insert({}, registerVal11)
	end
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderr
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	return {}
end

registerVal2 = ListHelper_SetupDataSource("EmblemDecalTabs", __FUNC_79604_)
DataSources["EmblemDecalTabs"] = registerVal2
local function __FUNC_79AC9_(arg0)
	CoD.CraftUtility.Emblems.CATEGORYTAB = {}
	local registerVal3 = {}
	registerVal3.type = "custom"
	registerVal3.displayName = "MENU_EMBLEM_CUSTOM_TAB"
	registerVal3.category = 1.000000
	registerVal3.storageType = Enum.StorageFileType.STORAGE_EMBLEMS
	registerVal3.tabWidget = "CoD.EmblemSelectFrame"
	table.insert(CoD.CraftUtility.Emblems.CATEGORYTAB, registerVal3)
	registerVal3 = {}
	registerVal3.type = "prebuilt"
	registerVal3.displayName = "MENU_EMBLEM_PREBUILT_TAB"
	registerVal3.category = 2.000000
	registerVal3.storageType = Enum.StorageFileType.STORAGE_DEFAULT_EMBLEMS
	registerVal3.tabWidget = "CoD.EmblemSelectFrame"
	table.insert(CoD.CraftUtility.Emblems.CATEGORYTAB, registerVal3)
	local registerVal1 = SelectingGroupEmblem(arg0)
	if not registerVal1 then
		registerVal3 = {}
		registerVal3.type = "loot"
		registerVal3.displayName = "MENU_BLACK_MARKET"
		registerVal3.category = 3.000000
		registerVal3.storageType = Enum.StorageFileType.STORAGE_EMBLEMS_LOOT
		registerVal3.tabWidget = "CoD.EmblemSelectFrame"
		table.insert(CoD.CraftUtility.Emblems.CATEGORYTAB, registerVal3)
	end
	local registerVal2 = IsLive()
	if registerVal2 then
		local registerVal4 = {}
		local registerVal5 = {}
		registerVal5.tabIcon = CoD.buttonStrings.shoulderl
		registerVal4.models = registerVal5
		registerVal5 = {}
		registerVal5.m_mouseDisabled = true
		registerVal4.properties = registerVal5
		table.insert({}, registerVal4)
		registerVal2, registerVal3, registerVal4 = ipairs(CoD.CraftUtility.Emblems.CATEGORYTAB)
		for index5,value6 in registerVal2, registerVal3, registerVal4 do
			local registerVal8 = CoD.CraftUtility.Emblems.GetTotalUsedEmblems(arg0, value6.storageType)
			for index9=0.000000, (registerVal8 - 1.000000), 1.000000 do
				if value6.storageType == Enum.StorageFileType.STORAGE_EMBLEMS_LOOT then
					local registerVal14 = CoD.BlackMarketUtility.GetLootEmblemIDNameFromIndex(index9)
					local registerVal15 = CoD.BlackMarketUtility.IsItemLocked(arg0, registerVal14)
				end
				registerVal14 = CoD.CraftUtility.Emblems.IsEmblemNew(arg0, index9, value6.storageType)
				if not registerVal15 and registerVal14 then
				end
			end
			local registerVal11 = {}
			local registerVal12 = {}
			local registerVal13 = Engine.Localize(value6.displayName)
			registerVal12.tabName = registerVal13
			registerVal12.breadcrumbCount = (0.000000 + 1.000000)
			registerVal11.models = registerVal12
			registerVal12 = {}
			registerVal12.tabCategory = value6.category
			registerVal12.tabType = value6.type
			registerVal12.storageType = value6.storageType
			registerVal11.properties = registerVal12
			table.insert({}, registerVal11)
		end
		registerVal4 = {}
		registerVal5 = {}
		registerVal5.tabIcon = CoD.buttonStrings.shoulderr
		registerVal4.models = registerVal5
		registerVal5 = {}
		registerVal5.m_mouseDisabled = true
		registerVal4.properties = registerVal5
		table.insert({}, registerVal4)
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("EmblemCategoryTabs", __FUNC_79AC9_)
DataSources["EmblemCategoryTabs"] = registerVal2
local function __FUNC_7A2EB_(arg0)
	local registerVal4 = {}
	registerVal4.displayText = "MENU_PUBLISH"
	registerVal4.displayImage = "t7_icon_menu_simple_publish"
	registerVal4.displayDesc = "MENU_CUSTOMGAMES_PUBLISH_DESC"
	registerVal4.action = OpenCustomGamePublishPrompt
	registerVal4.disabled = false
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal4.displayText = "MENU_DELETE"
	registerVal4.displayImage = "t7_icon_menu_simple_delete"
	registerVal4.displayDesc = "MENU_CUSTOMGAMES_DELETE_DESC"
	registerVal4.action = DeleteCustomGame
	registerVal4.disabled = false
	table.insert({}, registerVal4)
	local registerVal3, registerVal4, registerVal5 = ipairs({})
	for index6,value7 in registerVal3, registerVal4, registerVal5 do
		local registerVal10 = {}
		local registerVal11 = {}
		local registerVal12 = Engine.Localize(value7.displayText)
		registerVal11.displayText = registerVal12
		registerVal11.icon = value7.displayImage
		registerVal11.hintText = value7.displayDesc
		registerVal10.models = registerVal11
		registerVal11 = {}
		registerVal11.action = value7.action
		registerVal11.actionParam = value7.params
		registerVal10.properties = registerVal11
		table.insert({}, registerVal10)
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("CustomGamesOptionsButtonList", __FUNC_7A2EB_)
DataSources["CustomGamesOptionsButtonList"] = registerVal2
local function __FUNC_7A64E_(arg0)
	local registerVal2 = FileshareCanPublish(arg0)
	if registerVal2 then
		local registerVal4 = {}
		registerVal4.displayText = "MENU_PUBLISH"
		registerVal4.displayImage = "t7_icon_menu_simple_publish"
		registerVal4.displayDesc = "MENU_SCREENSHOTS_PUBLISH_DESC"
		registerVal4.action = OpenLocalScreenshotsPublishPrompt
		registerVal4.disabled = false
		table.insert({}, registerVal4)
	end
	registerVal2 = FileshareCanDeleteItem(arg0)
	if registerVal2 then
		local registerVal3 = FileshareIsLocalCategory(arg0)
		if registerVal3 then
		end
		local registerVal5 = {}
		registerVal5.displayText = "MENU_DELETE"
		registerVal5.displayImage = "t7_icon_menu_simple_delete"
		registerVal5.displayDesc = "MENU_FILESHARE_DELETE_LOCAL_DESC"
		registerVal5.action = CoD.FileshareUtility.Delete
		table.insert({}, registerVal5)
	end
	registerVal3, registerVal4, registerVal5 = ipairs({})
	for index6,value7 in registerVal3, registerVal4, registerVal5 do
		local registerVal10 = {}
		local registerVal11 = {}
		local registerVal12 = Engine.Localize(value7.displayText)
		registerVal11.displayText = registerVal12
		registerVal11.icon = value7.displayImage
		registerVal11.hintText = value7.displayDesc
		registerVal10.models = registerVal11
		registerVal11 = {}
		registerVal11.action = value7.action
		registerVal11.actionParam = value7.params
		registerVal10.properties = registerVal11
		table.insert({}, registerVal10)
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("ScreenshotsOptionsButtonList", __FUNC_7A64E_)
DataSources["ScreenshotsOptionsButtonList"] = registerVal2
registerVal2 = {}
local function __FUNC_7AAB4_(arg0, arg1, arg2)
	local registerVal3 = {}
	local registerVal4 = {}
	registerVal4.displayText = "MENU_DELETE"
	registerVal4.displayImage = ""
	registerVal4.displayDesc = "MENU_CUSTOMGAMES_DELETE_DESC"
	registerVal4.action = DeleteCustomGameYes
	local registerVal5 = {}
	registerVal5.displayText = "MENU_CANCEL"
	registerVal5.displayImage = ""
	registerVal5.displayDesc = "MENU_CUSTOMGAMES_CANCEL_DESC"
	registerVal5.action = DeleteCustomGameNo
	registerVal3 = {registerVal4, registerVal5}
	local registerVal6 = Engine.GetGlobalModel()
	registerVal5 = Engine.CreateModel(registerVal6, "CustomGamesOptionsDeleteButtonList")
	registerVal4 = Engine.CreateModel(registerVal5, "list")
	arg1.optionModels = {}
	registerVal5, registerVal6, registerVal7 = ipairs(registerVal3)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal11 = Engine.CreateModel(registerVal4, ("buttonModel_" .. index8))
		arg1.optionModels[index8] = registerVal11
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "displayText")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9.displayText))
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "displayImage")
		Engine.SetModelValue(registerVal11, value9.displayImage)
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "hintText")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9.displayDesc))
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "action")
		Engine.SetModelValue(registerVal11, value9.action)
	end
end

registerVal2.prepare = __FUNC_7AAB4_
local function __FUNC_7AF0F_(arg0)
	return #arg0.optionModels
end

registerVal2.getCount = __FUNC_7AF0F_
local function __FUNC_7AF62_(arg0, arg1, arg2)
	return arg1.optionModels[arg2]
end

registerVal2.getItem = __FUNC_7AF62_
DataSources["CustomGamesOptionsDeleteButtonList"] = registerVal2
registerVal2 = {}
local function __FUNC_7AFBE_(arg0, arg1, arg2)
	arg1.optionModels = {}
	local registerVal3 = {}
	local registerVal4 = {}
	registerVal4.displayText = "MENU_YES"
	registerVal4.displayImage = ""
	registerVal4.displayDesc = ""
	registerVal4.action = LoadFileshareCustomGame
	local registerVal5 = {}
	registerVal5.displayText = "MENU_NO"
	registerVal5.displayImage = ""
	registerVal5.displayDesc = ""
	registerVal5.action = GoBack
	registerVal3 = {registerVal4, registerVal5}
	local registerVal6 = Engine.GetGlobalModel()
	registerVal5 = Engine.CreateModel(registerVal6, "CustomGamesLoadOptionsButtonList")
	registerVal4 = Engine.CreateModel(registerVal5, "list")
	registerVal5, registerVal6, registerVal7 = ipairs(registerVal3)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal11 = Engine.CreateModel(registerVal4, ("buttonModel_" .. index8))
		arg1.optionModels[index8] = registerVal11
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "displayText")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9.displayText))
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "displayImage")
		Engine.SetModelValue(registerVal11, value9.displayImage)
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "hintText")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9.displayDesc))
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "action")
		Engine.SetModelValue(registerVal11, value9.action)
	end
end

registerVal2.prepare = __FUNC_7AFBE_
local function __FUNC_7B3BA_(arg0)
	return #arg0.optionModels
end

registerVal2.getCount = __FUNC_7B3BA_
local function __FUNC_7B40E_(arg0, arg1, arg2)
	return arg1.optionModels[arg2]
end

registerVal2.getItem = __FUNC_7B40E_
DataSources["CustomGamesLoadOptionsButtonList"] = registerVal2
registerVal2 = {}
local function __FUNC_7B46A_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.GetModel(registerVal2, "CustomGamesRoot")
	return registerVal1
end

registerVal2.getModel = __FUNC_7B46A_
DataSources["CustomGamesRoot"] = registerVal2
registerVal2 = {}
local function __FUNC_7B517_(arg0, arg1, arg2)
	local registerVal3 = {}
	local registerVal4 = {}
	registerVal4.text = "MENU_COMMUNITY"
	registerVal4.image = "uie_t7_mp_icon_header_customgames_large"
	registerVal4.description = "MENU_FILESHARE_PUBLISH_DESCRIPTION"
	registerVal4.community = true
	local registerVal5 = {}
	registerVal5.text = "MENU_SHOWCASE"
	registerVal5.image = "uie_t7_mp_icon_header_customgames_large"
	registerVal5.description = "MENU_FILESHARE_PUBLISH_DESCRIPTION"
	registerVal5.community = false
	registerVal3 = {registerVal4, registerVal5}
	local registerVal6 = Engine.GetGlobalModel()
	registerVal5 = Engine.CreateModel(registerVal6, "ChangeGameModeNav")
	registerVal4 = Engine.CreateModel(registerVal5, "list")
	arg1.buttonModels = {}
	registerVal5, registerVal6, registerVal7 = ipairs(registerVal3)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal11 = Engine.CreateModel(registerVal4, ("ChangeGameModeNavButton_" .. index8))
		arg1.buttonModels[index8] = registerVal11
		registerVal11 = Engine.CreateModel(arg1.buttonModels[index8], "text")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9.text))
		registerVal11 = Engine.CreateModel(arg1.buttonModels[index8], "image")
		Engine.SetModelValue(registerVal11, value9.image)
		registerVal11 = Engine.CreateModel(arg1.buttonModels[index8], "description")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9.description))
		registerVal11 = Engine.CreateModel(arg1.buttonModels[index8], "community")
		Engine.SetModelValue(registerVal11, value9.community)
	end
end

registerVal2.prepare = __FUNC_7B517_
local function __FUNC_7B91C_(arg0)
	return #arg0.buttonModels
end

registerVal2.getCount = __FUNC_7B91C_
local function __FUNC_7B972_(arg0, arg1, arg2)
	return arg1.buttonModels[arg2]
end

registerVal2.getItem = __FUNC_7B972_
DataSources["ChangeGameModeNav"] = registerVal2
registerVal2 = {}
local function __FUNC_7B9CE_(arg0, arg1, arg2)
	local registerVal3 = {}
	local registerVal4 = {}
	registerVal4.text = "MENU_POPULAR"
	registerVal4.image = "uie_t7_menu_startmenu_media_recent"
	registerVal4.description = ""
	registerVal4.action = nil
	local registerVal5 = {}
	registerVal5.text = "MENU_TRENDING"
	registerVal5.image = "uie_t7_menu_startmenu_media_popular"
	registerVal5.description = ""
	registerVal5.action = nil
	local registerVal6 = {}
	registerVal6.text = "MENU_RECENT"
	registerVal6.image = "uie_t7_menu_startmenu_media_trending"
	registerVal6.description = ""
	registerVal6.action = nil
	registerVal3 = {registerVal4, registerVal5, registerVal6}
	registerVal6 = Engine.GetGlobalModel()
	registerVal5 = Engine.CreateModel(registerVal6, "ChangeGameModeNavSecondary")
	registerVal4 = Engine.CreateModel(registerVal5, "list")
	arg1.buttonModels = {}
	registerVal5, registerVal6, registerVal7 = ipairs(registerVal3)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal11 = Engine.CreateModel(registerVal4, ("ChangeGameModeNavSecondaryButton_" .. index8))
		arg1.buttonModels[index8] = registerVal11
		registerVal11 = Engine.CreateModel(arg1.buttonModels[index8], "text")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9.text))
		registerVal11 = Engine.CreateModel(arg1.buttonModels[index8], "image")
		Engine.SetModelValue(registerVal11, value9.image)
		registerVal11 = Engine.CreateModel(arg1.buttonModels[index8], "description")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9.description))
		registerVal11 = Engine.CreateModel(arg1.buttonModels[index8], "action")
		Engine.SetModelValue(registerVal11, value9.action)
	end
end

registerVal2.prepare = __FUNC_7B9CE_
local function __FUNC_7BE3B_(arg0)
	return #arg0.buttonModels
end

registerVal2.getCount = __FUNC_7BE3B_
local function __FUNC_7BE8E_(arg0, arg1, arg2)
	return arg1.buttonModels[arg2]
end

registerVal2.getItem = __FUNC_7BE8E_
DataSources["ChangeGameModeNavSecondary"] = registerVal2
registerVal2 = {}
local function __FUNC_7BEEA_(arg0, arg1, arg2)
	arg1.showDefault = true
	arg1.controller = arg0
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "CustomGamesRoot")
	arg1.rootModel = registerVal3
	registerVal3 = {}
	registerVal4 = {}
	local registerVal5 = Engine.Localize("MENU_POPULAR")
	registerVal4.text = registerVal5
	registerVal4.image = "img_t7_menu_startmenu_media_recent"
	registerVal5 = Engine.Localize("MENU_FILESHARE_PUBLISH_DESCRIPTION")
	registerVal4.description = registerVal5
	registerVal4.action = OpenPopularCustomGames
	registerVal5 = {}
	local registerVal6 = Engine.Localize("MENU_TRENDING")
	registerVal5.text = registerVal6
	registerVal5.image = "img_t7_menu_startmenu_media_popular"
	registerVal6 = Engine.Localize("MENU_FILESHARE_PUBLISH_DESCRIPTION")
	registerVal5.description = registerVal6
	registerVal5.action = OpenTrendingCustomGames
	registerVal6 = {}
	local registerVal7 = Engine.Localize("MENU_RECENT")
	registerVal6.text = registerVal7
	registerVal6.image = "img_t7_menu_startmenu_media_trending"
	registerVal7 = Engine.Localize("MENU_FILESHARE_PUBLISH_DESCRIPTION")
	registerVal6.description = registerVal7
	registerVal6.action = OpenrRecentCustomGames
	registerVal3 = {registerVal4, registerVal5, registerVal6}
	arg1.communityOptions = registerVal3
	registerVal3 = GetCurrentUIGameType(arg0)
	if registerVal3 == "" then
		registerVal5 = Engine.GetGlobalModel()
		registerVal4 = Engine.CreateModel(registerVal5, "CustomGamesRoot")
		registerVal5 = Engine.GetModelValue(Engine.CreateModel(registerVal4, "communityOption"))
		registerVal6 = Engine.GetModelValue(Engine.CreateModel(registerVal4, "showcaseOption"))
		if registerVal5 then
			arg1.numFiles = 3.000000
			arg1.communityOption = true
		else
			arg1.numFiles = 0.000000
			registerVal4 = Engine.GetCustomGamesCount(arg0, registerVal3, true)
			arg1.officialGameCount = registerVal4
			registerVal4 = Engine.GetCustomGamesCount(arg0, registerVal3, false)
			arg1.customGameCount = registerVal4
			arg1.communityOption = false
			arg1.numFiles = (arg1.officialGameCount + arg1.customGameCount)
			if registerVal6 and arg1.showDefault == true then
				arg1.numFiles = (arg1.numFiles + 1.000000)
			end
		end
	end
end

registerVal2.prepare = __FUNC_7BEEA_
local function __FUNC_7C4C4_(arg0)
	return arg0.numFiles
end

registerVal2.getCount = __FUNC_7C4C4_
local function __FUNC_7C512_(arg0, arg1, arg2)
	local registerVal3 = Engine.CreateModel(arg1.rootModel, ("CustomGames_" .. arg2))
	local registerVal4 = GetCurrentUIGameType(arg0)
	local registerVal6 = Engine.CreateModel(registerVal3, "uiIndex")
	Engine.SetModelValue(registerVal6, arg2)
	if arg1.communityOption == true then
		local registerVal7 = Engine.CreateModel(registerVal3, "text")
		Engine.SetModelValue(registerVal7, arg1.communityOptions[arg2].text)
		registerVal7 = Engine.CreateModel(registerVal3, "buttonText")
		Engine.SetModelValue(registerVal7, arg1.communityOptions[arg2].text)
		registerVal7 = Engine.CreateModel(registerVal3, "image")
		Engine.SetModelValue(registerVal7, arg1.communityOptions[arg2].image)
		registerVal7 = Engine.CreateModel(registerVal3, "description")
		Engine.SetModelValue(registerVal7, arg1.communityOptions[arg2].description)
		registerVal7 = Engine.CreateModel(registerVal3, "action")
		Engine.SetModelValue(registerVal7, arg1.communityOptions[arg2].action)
		registerVal7 = Engine.CreateModel(registerVal3, "isOfficial")
		Engine.SetModelValue(registerVal7, false)
		registerVal7 = Engine.CreateModel(registerVal3, "isCommunityOption")
		Engine.SetModelValue(registerVal7, true)
		return registerVal3
	end
	if arg1.showDefault == true and arg2 == 1.000000 then
		local registerVal5 = Engine.GetGametypesBase()
		registerVal6 = GetCurrentUIGameType(arg0)
		local registerVal8, registerVal9, registerVal10 = pairs(registerVal5)
		for index11,value12 in registerVal8, registerVal9, registerVal10 do
			if value12.category == "standard" and value12.gametype == registerVal6 then
				local registerVal14 = Engine.Localize(value12.name)
			else
			end
		end
		registerVal9 = Engine.CreateModel(registerVal3, "text")
		Engine.SetModelValue(registerVal9, ("^BBUTTON_CUSTOMGAME_ICON^ " .. registerVal14))
		registerVal9 = Engine.CreateModel(registerVal3, "buttonText")
		Engine.SetModelValue(registerVal9, ("^BBUTTON_CUSTOMGAME_ICON^ " .. registerVal14))
		registerVal9 = Engine.CreateModel(registerVal3, "inUse")
		Engine.SetModelValue(registerVal9, true)
		registerVal9 = Engine.CreateModel(registerVal3, "isOfficial")
		Engine.SetModelValue(registerVal9, true)
		registerVal9 = Engine.CreateModel(registerVal3, "isCommunityOption")
		Engine.SetModelValue(registerVal9, false)
		if registerVal4 then
			registerVal9 = Engine.CreateModel(registerVal3, "description")
			Engine.SetModelValue(registerVal9, Engine.Localize(Engine.StructTableLookupString(CoDShared.gametypesStructTable, "name", registerVal4, "description")))
		else
			if arg1.showDefault == true then
			end
			if (arg2 - 2.000000) < arg1.officialGameCount then
			else
			end
			local registerVal11 = GetCurrentUIGameType(arg0)
			registerVal8 = Engine.GetCustomGameData(arg0, ((arg2 - 2.000000) - arg1.officialGameCount), registerVal11, true)
			registerVal10 = Engine.CreateModel(registerVal3, "slot")
			Engine.SetModelValue(registerVal10, registerVal8.slot)
			registerVal10 = Engine.CreateModel(registerVal3, "index")
			Engine.SetModelValue(registerVal10, registerVal8.index)
			registerVal10 = Engine.CreateModel(registerVal3, "gameName")
			Engine.SetModelValue(registerVal10, registerVal8.gameName)
			registerVal10 = Engine.CreateModel(registerVal3, "inUse")
			Engine.SetModelValue(registerVal10, registerVal8.inUse)
			registerVal10 = Engine.CreateModel(registerVal3, "isOfficial")
			Engine.SetModelValue(registerVal10, registerVal8.isOfficial)
			registerVal10 = Engine.CreateModel(registerVal3, "isCommunityOption")
			Engine.SetModelValue(registerVal10, false)
			registerVal10 = Engine.CreateModel(registerVal3, "createTime")
			Engine.SetModelValue(registerVal10, registerVal8.createTime)
			if registerVal8.isOfficial then
				registerVal10 = Engine.CreateModel(registerVal3, "text")
				local registerVal12 = Engine.Localize(registerVal8.gameName)
				Engine.SetModelValue(registerVal10, ("^BBUTTON_CUSTOMGAME_ICON^ " .. registerVal12))
				registerVal10 = Engine.CreateModel(registerVal3, "buttonText")
				registerVal12 = Engine.Localize(registerVal8.gameName)
				Engine.SetModelValue(registerVal10, ("^BBUTTON_CUSTOMGAME_ICON^ " .. registerVal12))
			else
				registerVal10 = Engine.CreateModel(registerVal3, "text")
				Engine.SetModelValue(registerVal10, registerVal8.gameName)
				registerVal10 = Engine.CreateModel(registerVal3, "buttonText")
				Engine.SetModelValue(registerVal10, registerVal8.gameName)
			end
			registerVal10 = Engine.CreateModel(registerVal3, "gameTypeString")
			Engine.SetModelValue(registerVal10, registerVal8.gameTypeString)
			if registerVal4 then
				if registerVal8.isOfficial then
					registerVal10 = Engine.CreateModel(registerVal3, "description")
					Engine.SetModelValue(registerVal10, Engine.Localize(registerVal8.gameDescription))
					registerVal10 = Engine.CreateModel(registerVal3, "gameDescription")
					Engine.SetModelValue(registerVal10, Engine.Localize(registerVal8.gameDescription))
				else
					registerVal10 = Engine.CreateModel(registerVal3, "description")
					Engine.SetModelValue(registerVal10, registerVal8.gameDescription)
					registerVal10 = Engine.CreateModel(registerVal3, "gameDescription")
					Engine.SetModelValue(registerVal10, registerVal8.gameDescription)
				end
			end
		end
	end
	if registerVal4 then
		registerVal6 = Engine.CreateModel(registerVal3, "gametype")
		Engine.SetModelValue(registerVal6, registerVal4)
		registerVal6 = Engine.CreateModel(registerVal3, "image")
		Engine.SetModelValue(registerVal6, Engine.StructTableLookupString(CoDShared.gametypesStructTable, "name", registerVal4, "image"))
	end
	return registerVal3
end

registerVal2.getItem = __FUNC_7C512_
DataSources["CustomGamesList"] = registerVal2
local function __FUNC_7D22D_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	local registerVal2 = CoD.FileshareUtility.GetCurrentCategory()
	local registerVal3, registerVal4, registerVal5 = ipairs(CoD.FileshareUtility.MediaManagerTabs)
	for index6,value7 in registerVal3, registerVal4, registerVal5 do
		if value7.fileshareCategory == registerVal2 then
		else
		end
		local registerVal10 = Engine.TableLookup(0.000000, CoD.fileShareTable, 1.000000, value7.fileshareCategory, 8.000000)
		local registerVal13 = {}
		local registerVal14 = {}
		local registerVal15 = Engine.Localize((registerVal10 .. "_CAPS"))
		registerVal14.tabName = registerVal15
		registerVal13.models = registerVal14
		registerVal14 = {}
		registerVal14.disabled = false
		registerVal14.fileshareCategory = value7.fileshareCategory
		registerVal14.fileshareKey = value7.fileshareKey
		registerVal14.fileshareVal = value7.fileshareVal
		registerVal14.selectIndex = false
		registerVal13.properties = registerVal14
		table.insert({}, registerVal13)
	end
	registerVal5 = {}
	local registerVal6 = {}
	registerVal6.tabIcon = CoD.buttonStrings.shoulderr
	registerVal5.models = registerVal6
	registerVal6 = {}
	registerVal6.m_mouseDisabled = true
	registerVal5.properties = registerVal6
	table.insert({}, registerVal5)
	return {}
end

registerVal2 = ListHelper_SetupDataSource("MediaManagerTabs", __FUNC_7D22D_)
DataSources["MediaManagerTabs"] = registerVal2
registerVal2 = {}
local function __FUNC_7D655_(arg0, arg1, arg2)
	arg1.controller = arg0
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.CreateModel(registerVal4, "MediaManagerQuota")
	arg1.rootModel = registerVal3
	registerVal3 = GetMediaManagerCategoryList()
	arg1.tabs = registerVal3
	registerVal3 = GetMediaManagerCategoryCount()
	arg1.numFileshareCategories = registerVal3
end

registerVal2.prepare = __FUNC_7D655_
local function __FUNC_7D7CF_(arg0)
	return arg0.numFileshareCategories
end

registerVal2.getCount = __FUNC_7D7CF_
local function __FUNC_7D828_(arg0, arg1, arg2)
	local registerVal3 = Engine.CreateModel(arg1.rootModel, ("fileshareCategory_" .. arg2))
	local registerVal4 = CoD.FileshareUtility.GetCategoryForTabIndex(arg1.tabs, arg1.numFileshareCategories, arg2)
	local registerVal5 = MediaManagerGetQuotaForCategory(arg0, registerVal4)
	if 0.000000 < registerVal5.categoryQuota then
	end
	if 1.000000 < (registerVal5.categorySlotsUsed / registerVal5.categoryQuota) then
	else
		if 1.000000 < 0.000000 then
		end
	end
	if 0.000000 == 1.000000 then
	end
	local registerVal9 = Engine.CreateModel(registerVal3, "category")
	Engine.SetModelValue(registerVal9, registerVal5.category)
	registerVal9 = Engine.CreateModel(registerVal3, "locName")
	Engine.SetModelValue(registerVal9, Engine.TableLookup(0.000000, CoD.fileShareTable, 1.000000, registerVal5.category, 8.000000))
	registerVal9 = Engine.CreateModel(registerVal3, "quota")
	Engine.SetModelValue(registerVal9, registerVal5.categoryQuota)
	registerVal9 = Engine.CreateModel(registerVal3, "slotsUsed")
	Engine.SetModelValue(registerVal9, registerVal5.categorySlotsUsed)
	registerVal9 = Engine.CreateModel(registerVal3, "fraction")
	Engine.SetModelValue(registerVal9, 0.000000)
	registerVal9 = Engine.CreateModel(registerVal3, "image")
	Engine.SetModelValue(registerVal9, CoD.FileshareUtility.GetCategoryImage(registerVal4))
	registerVal9 = Engine.CreateModel(registerVal3, "barColor")
	Engine.SetModelValue(registerVal9, CoD.FileshareUtility.GetCategoryColor(registerVal4))
	registerVal9 = Engine.CreateModel(registerVal3, "slotsFull")
	Engine.SetModelValue(registerVal9, 1.000000)
	local registerVal8 = CoD.FileshareUtility.GetCurrentCategory()
	if registerVal8 == registerVal5.category then
		registerVal9 = Engine.CreateModel(registerVal3, "isDim")
		Engine.SetModelValue(registerVal9, false)
	else
		registerVal9 = Engine.CreateModel(registerVal3, "isDim")
		Engine.SetModelValue(registerVal9, true)
	end
	return registerVal3
end

registerVal2.getItem = __FUNC_7D828_
DataSources["MediaManagerQuotaList"] = registerVal2
registerVal2 = {}
local function __FUNC_7DE61_(arg0, arg1, arg2)
	arg1.controller = arg0
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.CreateModel(registerVal4, "FileshareQuota")
	arg1.rootModel = registerVal3
	registerVal3 = GetShowcaseManagerCategoryList()
	arg1.tabs = registerVal3
	registerVal3 = GetShowcaseManagerCategoryCount()
	arg1.numFileshareCategories = registerVal3
end

registerVal2.prepare = __FUNC_7DE61_
local function __FUNC_7DFDE_(arg0)
	return arg0.numFileshareCategories
end

registerVal2.getCount = __FUNC_7DFDE_
local function __FUNC_7E038_(arg0, arg1, arg2)
	local registerVal3 = Engine.CreateModel(arg1.rootModel, ("fileshareCategory_" .. arg2))
	local registerVal4 = CoD.FileshareUtility.GetCategoryForTabIndex(arg1.tabs, arg1.numFileshareCategories, arg2)
	local registerVal5 = Engine.FileshareGetQuota(arg1.controller, registerVal4)
	if 0.000000 < registerVal5.categoryQuota then
	end
	if 1.000000 < (registerVal5.categorySlotsUsed / registerVal5.categoryQuota) then
	else
		if 1.000000 < 0.000000 then
		end
	end
	if 0.000000 == 1.000000 then
	end
	local registerVal9 = Engine.CreateModel(registerVal3, "category")
	Engine.SetModelValue(registerVal9, registerVal5.category)
	registerVal9 = Engine.CreateModel(registerVal3, "locName")
	Engine.SetModelValue(registerVal9, Engine.TableLookup(0.000000, CoD.fileShareTable, 1.000000, registerVal5.category, 8.000000))
	registerVal9 = Engine.CreateModel(registerVal3, "quota")
	Engine.SetModelValue(registerVal9, registerVal5.categoryQuota)
	registerVal9 = Engine.CreateModel(registerVal3, "slotsUsed")
	Engine.SetModelValue(registerVal9, registerVal5.categorySlotsUsed)
	registerVal9 = Engine.CreateModel(registerVal3, "fraction")
	Engine.SetModelValue(registerVal9, 0.000000)
	registerVal9 = Engine.CreateModel(registerVal3, "image")
	Engine.SetModelValue(registerVal9, CoD.FileshareUtility.GetCategoryImage(registerVal4))
	registerVal9 = Engine.CreateModel(registerVal3, "barColor")
	Engine.SetModelValue(registerVal9, CoD.FileshareUtility.GetCategoryColor(registerVal4))
	registerVal9 = Engine.CreateModel(registerVal3, "slotsFull")
	Engine.SetModelValue(registerVal9, 1.000000)
	local registerVal8 = CoD.FileshareUtility.GetCurrentCategory()
	if registerVal8 == registerVal5.category then
		registerVal9 = Engine.CreateModel(registerVal3, "isDim")
		Engine.SetModelValue(registerVal9, false)
	else
		registerVal9 = Engine.CreateModel(registerVal3, "isDim")
		Engine.SetModelValue(registerVal9, true)
	end
	return registerVal3
end

registerVal2.getItem = __FUNC_7E038_
DataSources["FileshareQuotaList"] = registerVal2
registerVal2 = {}
local function __FUNC_7E68B_(arg0, arg1, arg2)
	arg1.controller = arg0
	arg1.numElements = (arg1.vCount * arg1.hCount)
	local registerVal3 = CoD.FileshareUtility.GetIsGroupsMode(arg0)
	if not registerVal3 then
		registerVal3 = CoD.FileshareUtility.GetShowCreateButton()
	else
	end
	arg1.hasCreateButton = true
	local registerVal4 = Engine.GetGlobalModel()
	registerVal3 = Engine.GetModel(registerVal4, "fileshareRoot")
	arg1.fileshareRootModel = registerVal3
	arg1.fileshareData = {}
	for index3=1.000000, arg1.numElements, 1.000000 do
		arg1.fileshareData[index3] = {}
		local registerVal8 = Engine.CreateModel(arg1.fileshareRootModel, ("fileshareData_" .. index3))
		arg1.fileshareData[index3].elementModel = registerVal8
		local registerVal7, registerVal8, registerVal9 = ipairs(CoD.FileshareUtility.FileProperties)
		for index10,value11 in registerVal7, registerVal8, registerVal9 do
			Engine.CreateModel(arg1.fileshareData[index3].elementModel, value11)
		end
		registerVal7 = CoD.FileshareUtility.GetIsGroupsMode(arg0)
		if registerVal7 then
			Engine.CreateModel(arg1.fileshareData[index3].elementModel, "featureIsProcessing")
		end
		CoD.FileshareUtility.ResetFileshareSummary(arg1.fileshareData[index3].elementModel)
	end
	Engine.FileshareStartup(arg1.controller)
	CoD.FileshareUtility.SetShowFileDetails(false)
end

registerVal2.prepare = __FUNC_7E68B_
local function __FUNC_7EB65_(arg0)
	arg0.itemsCount = 0.000000
	if arg0.numElements == nil then
		CoD.FileshareUtility.SetItemsCount(arg0.controller, 0.000000)
		return 0.000000
	end
	local registerVal2 = CoD.FileshareUtility.GetCurrentCategory()
	if registerVal2 == "film" or registerVal2 == "recentgames" then
		local registerVal3 = Engine.GetDemoStreamedDownloadProgress()
		if 0.000000 < registerVal3 and registerVal3 < 100.000000 then
		end
	end
	registerVal3 = Engine.FileshareIsReady(arg0.controller)
	if false and not registerVal3 then
		if not arg0.refreshElement then
			local function __FUNC_7F1A6_()
				local registerVal0 = Engine.FileshareIsReady(arg0.controller)
				if registerVal0 then
					arg0:updateDataSource()
					arg0.refreshElement:close()
					arg0.refreshElement = nil
					CoD.FileshareUtility.SetFileshareReady(1.000000)
				end
			end

			registerVal3 = LUI.UITimer.newElementTimer(500.000000, false, __FUNC_7F1A6_)
			arg0.refreshElement = registerVal3
			arg0:addElement(arg0.refreshElement)
		end
		CoD.FileshareUtility.SetItemsCount(arg0.controller, 0.000000)
		CoD.FileshareUtility.SetFileshareReady(0.000000)
		return 0.000000
	end
	registerVal3 = CoD.FileshareUtility.GetCurrentCategory()
	local registerVal4 = CoD.FileshareUtility.GetIsCommunityMode(arg0.controller)
	local registerVal5, registerVal6 = CoD.FileshareUtility.GetCurrentFilter()
	if registerVal3 == nil then
		CoD.FileshareUtility.SetItemsCount(arg0.controller, 0.000000)
		return 0.000000
	end
	local registerVal8 = CoD.FileshareUtility.GetIsGroupsMode(arg0.controller)
	if not registerVal4 and not false or registerVal3 == "recentgames" then
		if registerVal3 == "recentgames" then
			registerVal8 = Engine.FileshareGetTotalUsedCommunitySlotCount(arg0.controller, "film", registerVal5, registerVal6)
		else
			registerVal8 = Engine.FileshareGetTotalUsedCommunitySlotCount(arg0.controller, registerVal3, registerVal5, registerVal6)
		else
			registerVal8 = Engine.FileshareGetSlotCount(arg0.controller, registerVal3, registerVal5, registerVal6)
		end
	end
	registerVal8 = math.min(registerVal8, 300.000000)
	CoD.FileshareUtility.SetItemsCount(arg0.controller, registerVal8)
	if arg0.hasCreateButton == true then
		return (registerVal8 + 1.000000)
	end
	arg0.itemsCount = registerVal8
	return registerVal8
end

registerVal2.getCount = __FUNC_7EB65_
local function __FUNC_7F313_(arg0, arg1, arg2)
	if arg1.hasCreateButton == true then
	end
	local registerVal6 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "isPublishNew")
	local registerVal7 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "showPlusImage")
	local registerVal8 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "showFileImage")
	local registerVal9 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "plusImageSrc")
	local registerVal10 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "fileImage")
	local registerVal11 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "fileId")
	local registerVal12 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "renderFileId")
	local registerVal13 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "gameType")
	local registerVal14 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "gameTypeImage")
	local registerVal15 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "showGameTypeImage")
	local registerVal16 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "slot")
	local registerVal17 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "index")
	local registerVal18 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "weaponName")
	local registerVal20 = CoD.FileshareUtility.GetIsGroupsMode(arg0)
	if registerVal20 then
		registerVal20 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "featureIsProcessing")
	end
	registerVal20 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "mapName")
	local registerVal21 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "duration")
	local registerVal22 = Engine.CreateModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "uiModelIndex")
	Engine.SetModelValue(registerVal22, (((arg2 - 1.000000) % arg1.numElements) + 1.000000))
	local registerVal23 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "codeIndex")
	Engine.SetModelValue(registerVal23, ((arg2 - 1.000000) - 1.000000))
	local registerVal24 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "totalItems")
	Engine.SetModelValue(registerVal24, arg1.itemsCount)
	local registerVal25 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "showDetailsViewSpinner")
	Engine.SetModelValue(registerVal25, 0.000000)
	Engine.SetModelValue(registerVal11, nil)
	if arg1.hasCreateButton == true and arg2 == 1.000000 then
		Engine.SetModelValue(registerVal6, true)
		Engine.SetModelValue(registerVal7, 1.000000)
		Engine.SetModelValue(registerVal10, "")
		Engine.SetModelValue(registerVal8, 0.000000)
		Engine.SetModelValue(registerVal12, 0.000000)
		Engine.SetModelValue(registerVal9, "uie_t7_icon_codpoints")
		Engine.SetModelValue(registerVal21, 0.000000)
		Engine.SetModelValue(registerVal20, "")
		Engine.SetModelValue(registerVal15, 0.000000)
		Engine.SetModelValue(registerVal14, "")
		Engine.SetModelValue(registerVal18, "")
		local registerVal26 = CoD.FileshareUtility.GetInShowcaseManager(arg0)
		local registerVal27 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "fileName")
		if registerVal26 and registerVal26 == true then
			Engine.SetModelValue(registerVal27, Engine.Localize("MENU_FILESHARE_BUY_SLOTS"))
		else
			Engine.SetModelValue(registerVal27, Engine.Localize("MENU_FILESHARE_PUBLISH_NEW"))
		else
			Engine.SetModelValue(registerVal6, false)
			Engine.SetModelValue(registerVal10, "")
			Engine.SetModelValue(registerVal7, 0.000000)
			registerVal26 = CoD.FileshareUtility.GetCurrentCategory()
			registerVal27 = CoD.FileshareUtility.GetIsCommunityMode(arg1.controller)
			local registerVal28, registerVal29 = CoD.FileshareUtility.GetCurrentFilter()
			local registerVal31 = CoD.FileshareUtility.GetIsGroupsMode(arg1.controller)
			if not registerVal27 and not arg1 or registerVal26 == "recentgames" then
				if registerVal26 == "recentgames" then
					registerVal31 = Engine.FileshareGetCommunitySlotData(arg1.controller, "film", registerVal28, registerVal29, ((arg2 - 1.000000) - 1.000000))
				else
					registerVal31 = Engine.FileshareGetCommunitySlotData(arg1.controller, registerVal26, registerVal28, registerVal29, ((arg2 - 1.000000) - 1.000000))
				else
					registerVal31 = Engine.FileshareGetSlotData(arg1.controller, registerVal26, registerVal28, registerVal29, ((arg2 - 1.000000) - 1.000000))
				end
			end
			CoD.FileshareUtility.SetCategoryCurrentPage(arg0, registerVal26, ((arg2 - 1.000000) - 1.000000))
			registerVal31 = CoD.FileshareUtility.GetIsGroupsMode(arg0)
			if registerVal31 then
			end
			if registerVal31.fileCategory ~= "recentgames" and registerVal31.fileCategory == "film" or registerVal31.fileCategory == "customgame" then
				Engine.SetModelValue(registerVal15, 1.000000)
			else
				Engine.SetModelValue(registerVal15, 0.000000)
			end
			if registerVal31.fileCategory ~= "clip" and registerVal31.fileCategory ~= "clip_private" and registerVal31.fileCategory ~= "recentgames" and registerVal31.fileCategory ~= "film" and registerVal31.fileCategory == "customgame" or registerVal31.fileCategory == "screenshot" then
				Engine.SetModelValue(registerVal8, 0.000000)
			else
				Engine.SetModelValue(registerVal8, 1.000000)
			end
			if registerVal31.fileCategory ~= "screenshot_private" and registerVal31.fileCategory ~= "screenshot" and registerVal31.fileCategory ~= "clip_private" and registerVal31.fileCategory ~= "clip" then
			end
			local registerVal33 = CoD.FileshareUtility.GetForceRefreshThumbnails()
			if true == true then
				local registerVal34 = Engine.GetModelValue(registerVal11)
			end
			registerVal34, registerVal35, registerVal36 = ipairs(CoD.FileshareUtility.FileProperties)
			for index37,value38 in registerVal34, registerVal35, registerVal36 do
				if registerVal31[value38] ~= nil then
					local registerVal39 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, value38)
					Engine.SetModelValue(registerVal39, registerVal31[value38])
				end
			end
			if registerVal31.weaponIndex ~= nil and registerVal31.weaponIndex ~= 0.000000 then
				registerVal35 = Engine.ToUpper(Engine.Localize(Engine.GetItemName(registerVal31.weaponIndex)))
			end
			Engine.SetModelValue(registerVal18, registerVal35)
			CoD.FileshareUtility.SetupDefaultNameAndDescription(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel)
			if true == true then
				local registerVal37 = Engine.GetModelForController(arg0)
				registerVal35 = Engine.GetModelValue(Engine.CreateModel(registerVal37, "groups.showFullScreenshot"))
				if registerVal35 then
					if registerVal31.fileId ~= CoD.currentScreenshot then
						FileshareDestroyScreenshot(arg0)
						if not registerVal31.fileSize then
						end
						registerVal37 = Engine.DefaultID64Value()
						if registerVal31.fileId ~= registerVal37 then
							Engine.DownloadScreenshot(arg0, registerVal31.fileId, 0.000000)
							CoD.currentScreenshot = registerVal31.fileId
						else
							if registerVal34 ~= registerVal31.fileId or registerVal33 == true then
								if registerVal34 ~= nil then
									Engine.ResetThumbnail(registerVal34)
								end
								Engine.AddThumbnail(arg0, Enum.ScreenshotViewType.UI_SCREENSHOT_TYPE_THUMBNAIL, registerVal31.fileId, registerVal31.fileSummarySize)
							end
						end
					end
				end
			end
			if registerVal31.isValid == false then
				Engine.SetModelValue(registerVal15, 0.000000)
			end
			if registerVal20 then
				registerVal37 = Engine.GetModelValue(Engine.GetModel(CoD.perController[arg0].selectedGroup, "groupId"))
				local registerVal38 = tostring(registerVal37)
				registerVal39, registerVal40, registerVal41 = ipairs(CoD.groupUnfeaturedList[registerVal38])
				if  == registerVal31.fileId then
				else
				end
				Engine.SetModelValue(registerVal20, true)
			end
			local function __FUNC_80AE6_(arg0, arg1, arg2, arg3, arg4)
				local registerVal5 = CoD.FileshareUtility.IsValid(arg2, arg1)
				if not registerVal5 then
					LuaUtils.UI_ShowErrorMessageDialog(arg2, "MENU_FILESHARE_INVALID_ITEM")
				else
					if registerVal31.fileCategory ~= "film" and registerVal31.fileCategory ~= "recentgames" and registerVal31.fileCategory ~= "film_private" and registerVal31.fileCategory == "clip" or registerVal31.fileCategory == "clip_private" then
						registerVal5 = IsInTheaterMode()
						if not registerVal5 then
							LuaUtils.UI_ShowErrorMessageDialog(arg2, "MENU_FILESHARE_PLAY_ONLY_IN_THEATER")
						else
							local registerVal7 = arg1:getModel()
							registerVal5 = Engine.GetModelValue(Engine.GetModel(registerVal7, "mainMode"))
							local registerVal6 = Engine.CurrentSessionMode()
							if registerVal5 ~= registerVal6 then
								if registerVal5 == Enum.eModes.MODE_ZOMBIES then
									registerVal7 = Engine.Localize("MENU_FILESHARE_PLAY_ONLY_IN_SPECIFIC_MODE", "MENU_ZOMBIE")
								else
									registerVal7 = Engine.Localize("MENU_FILESHARE_PLAY_ONLY_IN_SPECIFIC_MODE", "MENU_MULTIPLAYER")
								end
								LuaUtils.UI_ShowErrorMessageDialog(arg2, registerVal7)
							else
								CoD.FileshareUtility.LoadTheaterFile(arg0, arg1, arg2, arg3, arg4)
								if arg4.menuName == "Theater_SelectFilm" then
									Close(arg0, arg2)
								else
									GoBackToMenu(arg4, arg2, "Lobby")
									local registerVal9 = Engine.GetLocalClientNum(arg2)
									Engine.SendClientScriptNotify(arg2, ("menu_change" .. registerVal9), "Main", "closeToMenu")
								else
									if registerVal31.fileCategory == "customgame" then
										registerVal5 = IsCustomMPLobby()
										if registerVal5 then
											OpenOverlay(arg0, "CustomGamesLoadFileshareItem", arg2)
										else
											LuaUtils.UI_ShowErrorMessageDialog(arg2, "MENU_CUSTOMGAMES_CANNOT_VIEW_DESC")
										else
											FileshareSetSelectedItem(arg0, arg1, arg2, "true")
											registerVal5 = FileshareCanOpenDetailsView(arg1, arg2)
											if registerVal5 == true then
												FileshareOpenFullscreenView(arg0, arg1, arg2, arg4)
											end
										end
									end
								end
							end
						end
					end
				end
			end

			registerVal37 = Engine.CreateModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "action")
			Engine.SetModelValue(registerVal37, __FUNC_80AE6_)
		end
	end
	return arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel
end

registerVal2.getItem = __FUNC_7F313_
DataSources["FilesharePublishedList"] = registerVal2
registerVal2 = {}
local function __FUNC_81255_(arg0, arg1, arg2)
	arg1.controller = arg0
	arg1.hasCreateButton = false
	arg1.numElements = (arg1.vCount * arg1.hCount)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.GetModel(registerVal4, "fileshareRoot")
	arg1.fileshareRootModel = registerVal3
	arg1.fileshareData = {}
	for index3=1.000000, arg1.numElements, 1.000000 do
		arg1.fileshareData[index3] = {}
		local registerVal8 = Engine.CreateModel(arg1.fileshareRootModel, ("fileshareData_community_" .. index3))
		arg1.fileshareData[index3].elementModel = registerVal8
		local registerVal7, registerVal8, registerVal9 = ipairs(CoD.FileshareUtility.FileProperties)
		for index10,value11 in registerVal7, registerVal8, registerVal9 do
			Engine.CreateModel(arg1.fileshareData[index3].elementModel, value11)
		end
		CoD.FileshareUtility.ResetFileshareSummary(arg1.fileshareData[index3].elementModel)
	end
	CoD.FileshareUtility.SetItemsCount(arg1.controller, arg1.numElements)
	Engine.FileshareStartup(arg1.controller)
	CoD.FileshareUtility.SetShowFileDetails(false)
	CoD.FileshareUtility.SetShowPublishNewDetails(false)
end

registerVal2.prepare = __FUNC_81255_
local function __FUNC_816BF_(arg0)
	local registerVal2 = CoD.FileshareUtility.GetCurrentCategory()
	arg0.itemsCount = 0.000000
	if registerVal2 == "film" or registerVal2 == "recentgames" then
		local registerVal3 = Engine.GetDemoStreamedDownloadProgress()
		if 0.000000 < registerVal3 and registerVal3 < 100.000000 then
		end
	end
	registerVal3 = Engine.FileshareIsReady(arg0.controller)
	if false and not registerVal3 then
		CoD.FileshareUtility.SetItemsCount(arg0.controller, 0.000000)
		CoD.FileshareUtility.SetFileshareReady(0.000000)
		return 0.000000
	end
	registerVal3, registerVal4 = CoD.FileshareUtility.GetCurrentFilter()
	if registerVal2 == nil then
		CoD.FileshareUtility.SetItemsCount(arg0.controller, 0.000000)
		return 0.000000
	end
	local registerVal6 = Engine.FileshareGetTotalUsedCommunitySlotCount(arg0.controller, registerVal2, registerVal3, registerVal4)
	local registerVal5 = math.min(registerVal6, 300.000000)
	CoD.FileshareUtility.SetItemsCount(arg0.controller, registerVal5)
	arg0.itemsCount = registerVal5
	return registerVal5
end

registerVal2.getCount = __FUNC_816BF_
local function __FUNC_81A39_(arg0, arg1, arg2)
	local registerVal6 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "isPublishNew")
	local registerVal7 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "showPlusImage")
	local registerVal8 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "showFileImage")
	local registerVal9 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "fileImage")
	local registerVal10 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "fileId")
	local registerVal11 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "renderFileId")
	local registerVal12 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "showGameTypeImage")
	local registerVal13 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "codeIndex")
	Engine.SetModelValue(registerVal13, (arg2 - 1.000000))
	local registerVal14 = Engine.CreateModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "uiModelIndex")
	Engine.SetModelValue(registerVal14, (((arg2 - 1.000000) % arg1.numElements) + 1.000000))
	local registerVal15 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "totalItems")
	Engine.SetModelValue(registerVal15, arg1.itemsCount)
	local registerVal16 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "showDetailsViewSpinner")
	Engine.SetModelValue(registerVal16, 0.000000)
	Engine.SetModelValue(registerVal6, false)
	Engine.SetModelValue(registerVal9, "")
	Engine.SetModelValue(registerVal7, 0.000000)
	Engine.SetModelValue(registerVal11, 0.000000)
	local registerVal17 = CoD.FileshareUtility.GetCurrentCategory()
	local registerVal18, registerVal19 = CoD.FileshareUtility.GetCurrentFilter()
	if registerVal17 ~= "clip" and registerVal17 ~= "clip_private" and registerVal17 ~= "recentgames" and registerVal17 == "film" or registerVal17 == "customgame" then
		Engine.SetModelValue(registerVal8, 0.000000)
	else
		Engine.SetModelValue(registerVal8, 1.000000)
	end
	if registerVal17 ~= "screenshot_private" and registerVal17 ~= "screenshot" and registerVal17 ~= "clip_private" and registerVal17 ~= "clip" then
	end
	local registerVal22 = CoD.FileshareUtility.GetForceRefreshThumbnails()
	if true == true then
		local registerVal23 = Engine.GetModelValue(registerVal10)
	end
	registerVal23 = Engine.FileshareGetCommunitySlotData(arg1.controller, registerVal17, registerVal18, registerVal19, (arg2 - 1.000000))
	local registerVal24, registerVal25, registerVal26 = ipairs(CoD.FileshareUtility.FileProperties)
	for index27,value28 in registerVal24, registerVal25, registerVal26 do
		if registerVal23[value28] ~= nil then
			local registerVal29 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, value28)
			Engine.SetModelValue(registerVal29, registerVal23[value28])
		end
	end
	if registerVal17 == "customgame" then
		Engine.SetModelValue(registerVal12, 1.000000)
	else
		Engine.SetModelValue(registerVal12, 0.000000)
	end
	if registerVal23.weaponIndex ~= nil and registerVal23.weaponIndex ~= 0.000000 then
		registerVal25 = Engine.ToUpper(Engine.Localize(Engine.GetItemName(registerVal23.weaponIndex)))
	end
	registerVal25 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "weaponName")
	Engine.SetModelValue(registerVal25, registerVal25)
	CoD.FileshareUtility.SetupDefaultNameAndDescription(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel)
	CoD.FileshareUtility.SetCategoryCurrentPage(arg0, registerVal17, (arg2 - 1.000000))
	local function __FUNC_82709_(arg0, arg1, arg2, arg3, arg4)
		local registerVal5 = CoD.FileshareUtility.IsValid(arg2, arg1)
		if not registerVal5 then
			LuaUtils.UI_ShowErrorMessageDialog(arg2, "MENU_FILESHARE_INVALID_ITEM")
			local registerVal8 = Engine.GetLocalClientNum(arg2)
			Engine.SendClientScriptNotify(arg2, ("menu_change" .. registerVal8), "Main", "closeToMenu")
		else
			registerVal5 = CoD.FileshareUtility.IsCategoryFilm(arg2, arg1)
			registerVal5 = CoD.FileshareUtility.IsCategoryClip(arg2, arg1)
			if not arg1 or registerVal5 then
				registerVal5 = IsInTheaterMode()
				if not registerVal5 then
					LuaUtils.UI_ShowErrorMessageDialog(arg2, "MENU_FILESHARE_PLAY_ONLY_IN_THEATER")
				else
					local registerVal7 = arg1:getModel()
					registerVal5 = Engine.GetModelValue(Engine.GetModel(registerVal7, "mainMode"))
					local registerVal6 = Engine.CurrentSessionMode()
					if registerVal5 ~= registerVal6 then
						if registerVal5 == Enum.eModes.MODE_ZOMBIES then
							registerVal7 = Engine.Localize("MENU_FILESHARE_PLAY_ONLY_IN_SPECIFIC_MODE", "MENU_ZOMBIE")
						else
							registerVal7 = Engine.Localize("MENU_FILESHARE_PLAY_ONLY_IN_SPECIFIC_MODE", "MENU_MULTIPLAYER")
						end
						LuaUtils.UI_ShowErrorMessageDialog(arg2, registerVal7)
					else
						CoD.FileshareUtility.LoadTheaterFile(arg0, arg1, arg2, arg3, arg4)
						if arg4.menuName == "Theater_SelectFilm" then
							Close(arg0, arg2)
						else
							GoBackToMenu(arg4, arg2, "Lobby")
							local registerVal9 = Engine.GetLocalClientNum(arg2)
							Engine.SendClientScriptNotify(arg2, ("menu_change" .. registerVal9), "Main", "closeToMenu")
						else
							registerVal5 = CoD.FileshareUtility.GetCurrentCategory()
							if registerVal5 == "customgame" then
								registerVal5 = IsCustomMPLobby()
								if registerVal5 then
									OpenOverlay(arg0, "CustomGamesLoadFileshareItem", arg2)
								else
									LuaUtils.UI_ShowErrorMessageDialog(arg2, "MENU_CUSTOMGAMES_CANNOT_VIEW_DESC")
								else
									FileshareSetSelectedItem(arg0, arg1, arg2, "true")
									registerVal5 = FileshareCanOpenDetailsView(arg1, arg2)
									if registerVal5 == true then
										FileshareOpenFullscreenView(arg0, arg1, arg2, arg4)
									end
								end
							end
						end
					end
				end
			end
		end
	end

	if true == true then
		if registerVal23 ~= registerVal23.fileId or registerVal22 == true then
			if registerVal23 ~= nil then
				Engine.ResetThumbnail(registerVal23)
			end
			Engine.AddThumbnail(arg0, Enum.ScreenshotViewType.UI_SCREENSHOT_TYPE_THUMBNAIL, registerVal23.fileId, registerVal23.fileSummarySize)
		end
	end
	local registerVal28 = Engine.CreateModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "action")
	Engine.SetModelValue(registerVal28, __FUNC_82709_)
	return arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel
end

registerVal2.getItem = __FUNC_81A39_
DataSources["FileshareCommunityList"] = registerVal2
registerVal2 = {}
local function __FUNC_82EE8_(arg0, arg1, arg2)
	arg1.controller = arg0
	local registerVal3 = CoD.FileshareUtility.GetCurrentCategory()
	local registerVal4, registerVal5 = CoD.FileshareUtility.GetCurrentFilter()
	CoD.CraftUtility.Paintjobs.ParseDDL(arg0, Enum.StorageFileType.STORAGE_PAINTJOBS)
	local registerVal7 = Engine.GetModelForController(arg0)
	local registerVal6 = Engine.CreateModel(registerVal7, "Paintshop.PaintjobList")
	arg1.paintjobListModel = registerVal6
	registerVal6 = CoD.CraftUtility.Paintjobs.GetTotalUsedPaintjobs()
	if registerVal5 ~= "" then
		registerVal7 = CoD.CraftUtility.Paintjobs.GetTotalWeaponPaintjobsByWeaponGroup(registerVal5)
	end
	arg1.totalPaintjobs = registerVal7
	arg1.paintjobList = {}
	registerVal7 = CoD.CraftUtility.Paintjobs.GetSortedWeaponPaintjobList(nil, registerVal5)
	arg1.paintjobList = registerVal7
end

registerVal2.prepare = __FUNC_82EE8_
local function __FUNC_8329B_(arg0)
	return arg0.totalPaintjobs
end

registerVal2.getCount = __FUNC_8329B_
local function __FUNC_832EC_(arg0, arg1, arg2)
	local registerVal3 = Engine.CreateModel(arg1.paintjobListModel, ("paintjob_" .. arg2))
	if arg1.paintjobList[arg2] then
		local registerVal5 = CoD.CraftUtility.Paintjobs.IsPaintjobIndexOccupied(arg1.paintjobList[arg2].paintjobSlot, arg1.paintjobList[arg2].paintjobIndex)
		if registerVal5 then
			local registerVal6 = Engine.CreateModel(registerVal3, "paintjobName")
			Engine.SetModelValue(registerVal6, arg1.paintjobList[arg2].paintjobName)
			registerVal6 = Engine.CreateModel(registerVal3, "paintjobTextEntry")
			Engine.SetModelValue(registerVal6, arg1.paintjobList[arg2].paintjobName)
		else
			registerVal6 = Engine.CreateModel(registerVal3, "paintjobTextEntry")
			Engine.SetModelValue(registerVal6, "Paintjob")
			registerVal6 = Engine.CreateModel(registerVal3, "paintjobName")
			Engine.SetModelValue(registerVal6, "")
		end
		if arg1.paintjobList[arg2].readOnly ~= nil then
			registerVal6 = Engine.CreateModel(registerVal3, "readOnly")
			Engine.SetModelValue(registerVal6, arg1.paintjobList[arg2].readOnly)
		end
		registerVal6 = Engine.CreateModel(registerVal3, "sortIndex")
		Engine.SetModelValue(registerVal6, arg1.paintjobList[arg2].sortIndex)
		registerVal6 = Engine.CreateModel(registerVal3, "paintjobSlot")
		Engine.SetModelValue(registerVal6, arg1.paintjobList[arg2].paintjobSlot)
		registerVal6 = Engine.CreateModel(registerVal3, "weaponIndex")
		Engine.SetModelValue(registerVal6, arg1.paintjobList[arg2].weaponIndex)
		registerVal6 = Engine.CreateModel(registerVal3, "paintjobIndex")
		Engine.SetModelValue(registerVal6, arg1.paintjobList[arg2].paintjobIndex)
		registerVal6 = Engine.CreateModel(registerVal3, "paintjobSlotAndIndex")
		Engine.SetModelValue(registerVal6, (arg1.paintjobList[arg2].paintjobSlot .. " " .. arg1.paintjobList[arg2].paintjobIndex))
		return registerVal3
	end
end

registerVal2.getItem = __FUNC_832EC_
DataSources["ShowcasePaintjobList"] = registerVal2
registerVal2 = {}
local function __FUNC_837DD_(arg0, arg1, arg2)
	arg1.controller = arg0
	local registerVal3 = CoD.FileshareUtility.GetCurrentCategory()
	local registerVal4, registerVal5 = CoD.FileshareUtility.GetCurrentFilter()
	CoD.CraftUtility.Gunsmith.ParseDDL(arg0, Enum.StorageFileType.STORAGE_GUNSMITH)
	local registerVal7 = Engine.GetModelForController(arg0)
	local registerVal6 = Engine.CreateModel(registerVal7, "Gunsmith.VariantList")
	arg1.variantListModel = registerVal6
	registerVal6 = CoD.CraftUtility.Gunsmith.GetTotalUsedVariants()
	if registerVal5 ~= "" then
		registerVal7 = CoD.CraftUtility.Gunsmith.GetTotalUsedWeaponVariantsByWeaponGroup(registerVal5)
	end
	arg1.totalVariants = registerVal7
	arg1.variantList = {}
	registerVal7 = CoD.CraftUtility.Gunsmith.GetSortedWeaponVariantList(nil, registerVal5)
	arg1.variantList = registerVal7
end

registerVal2.prepare = __FUNC_837DD_
local function __FUNC_83B89_(arg0)
	return arg0.totalVariants
end

registerVal2.getCount = __FUNC_83B89_
local function __FUNC_83BDB_(arg0, arg1, arg2, arg3, arg4)
	local registerVal6 = Engine.CreateModel(arg4, "variantTextEntry")
	Engine.SetModelValue(registerVal6, Engine.Localize("MENU_GUNSMITH_ENTER_VARIANT_NAME"))
	registerVal6 = Engine.CreateModel(arg4, "variantIndex")
	Engine.SetModelValue(registerVal6, arg2.variantIndex)
	registerVal6 = Engine.CreateModel(arg4, "weaponIndex")
	Engine.SetModelValue(registerVal6, arg2.weaponIndex)
	local registerVal5 = CoD.CraftUtility.Gunsmith.IsVariantIndexOccupied(arg2.variantIndex)
	if registerVal5 then
		registerVal6 = Engine.CreateModel(arg4, "variantName")
		Engine.SetModelValue(registerVal6, arg2.variantName)
		registerVal6 = Engine.CreateModel(arg4, "variantNameBig")
		Engine.SetModelValue(registerVal6, arg2.variantName)
	else
		registerVal6 = Engine.CreateModel(arg4, "variantName")
		Engine.SetModelValue(registerVal6, Engine.Localize("MENU_GUNSMITH_CREATE_VARIANT"))
		registerVal6 = Engine.CreateModel(arg4, "variantNameBig")
		Engine.SetModelValue(registerVal6, "")
	end
	registerVal5, registerVal6, registerVal7 = ipairs(arg2.attachment)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal11 = Engine.CreateModel(arg4, ("attachment" .. index8))
		Engine.SetModelValue(registerVal11, value9)
	end
	registerVal5, registerVal6, registerVal7 = ipairs(arg2.attachmentVariant)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		registerVal11 = Engine.CreateModel(arg4, ("attachmentVariant" .. index8))
		Engine.SetModelValue(registerVal11, value9)
	end
	registerVal6 = Engine.CreateModel(arg4, "reticleIndex")
	Engine.SetModelValue(registerVal6, arg2.reticleIndex)
	registerVal7 = CoD.CraftUtility.Gunsmith.GetAttachmentIconList(arg0, ("Gunsmith.VariantList.Variant" .. arg1 .. "AttachmentList"), arg2.weaponIndex, arg2.attachment)
	DataSources[("Gunsmith.VariantList.Variant" .. arg1 .. "AttachmentList")] = registerVal7
	registerVal7 = Engine.CreateModel(arg4, "listDataSource")
	Engine.SetModelValue(registerVal7, ("Gunsmith.VariantList.Variant" .. arg1 .. "AttachmentList"))
	registerVal7 = Engine.CreateModel(arg4, "sortIndex")
	Engine.SetModelValue(registerVal7, arg3)
	registerVal7 = Engine.CreateModel(arg4, "paintjobSlot")
	Engine.SetModelValue(registerVal7, arg2.paintjobSlot)
	registerVal7 = Engine.CreateModel(arg4, "paintjobIndex")
	Engine.SetModelValue(registerVal7, arg2.paintjobIndex)
	registerVal7 = Engine.CreateModel(arg4, "camoIndex")
	Engine.SetModelValue(registerVal7, arg2.camoIndex)
	registerVal7 = Engine.CreateModel(arg4, "paintjobSlotAndIndex")
	Engine.SetModelValue(registerVal7, (arg2.paintjobSlot .. " " .. arg2.paintjobIndex))
	registerVal7 = Engine.CreateModel(arg4, "hintText")
	Engine.SetModelValue(registerVal7, Engine.Localize("MPUI_BUTTON_PERSONALIZE_CAPS"))
	if arg2.readOnly ~= nil then
		registerVal7 = Engine.CreateModel(arg4, "readOnly")
		Engine.SetModelValue(registerVal7, arg2.readOnly)
	end
end

registerVal2["createVariantModel"] = __FUNC_83BDB_
local function __FUNC_8446D_(arg0, arg1, arg2)
	local registerVal3 = Engine.CreateModel(arg1.variantListModel, ("variant_" .. arg2))
	local registerVal4 = CoD.CraftUtility.Gunsmith.GetVariantByIndex(arg0, arg1.variantList[arg2].variantIndex)
	DataSources.ShowcaseVariantList.createVariantModel(arg0, arg2, registerVal4, arg1.variantList[arg2].sortIndex, registerVal3)
	return registerVal3
end

registerVal2.getItem = __FUNC_8446D_
DataSources["ShowcaseVariantList"] = registerVal2
registerVal2 = {}
local function __FUNC_8469D_(arg0, arg1, arg2)
	local registerVal3 = {}
	local registerVal4 = {}
	registerVal4.displayText = "GROUPS_PAINTJOBS_CAPS"
	registerVal4.displayImage = "uie_t7_mp_icon_header_paintshop"
	registerVal4.hintText = "MENU_FILESHARE_SHOWCASE_PAINTJOBS_DESC"
	registerVal4.category = "paintjob"
	registerVal4.communityDataType = Enum.FileshareCommunityDataType.FILESHARE_COMMUNITY_DATA_INVALID
	registerVal4.disabled = false
	registerVal4.tabWidget = "CoD.FileshareCategoryContentList"
	local registerVal5 = {}
	registerVal5.displayText = "MENU_VARIANTS_CAPS"
	registerVal5.displayImage = "uie_t7_mp_icon_header_gunsmith"
	registerVal5.hintText = "MENU_FILESHARE_SHOWCASE_VARIANTS_DESC"
	registerVal5.category = "variant"
	registerVal5.communityDataType = Enum.FileshareCommunityDataType.FILESHARE_COMMUNITY_DATA_INVALID
	registerVal5.disabled = false
	registerVal5.tabWidget = "CoD.FileshareCategoryContentList"
	local registerVal6 = {}
	registerVal6.displayText = "MENU_EMBLEMS_CAPS"
	registerVal6.displayImage = "uie_t7_mp_icon_header_emblem"
	registerVal6.hintText = "MENU_FILESHARE_SHOWCASE_EMBLEMS_DESC"
	registerVal6.category = "emblem"
	registerVal6.communityDataType = Enum.FileshareCommunityDataType.FILESHARE_COMMUNITY_DATA_INVALID
	registerVal6.disabled = false
	registerVal6.tabWidget = "CoD.FileshareCategoryContentList"
	local registerVal7 = {}
	registerVal7.displayText = "MENU_CUSTOMGAMES_CAPS"
	registerVal7.displayImage = "uie_t7_mp_icon_header_customgames"
	registerVal7.hintText = "MENU_FILESHARE_SHOWCASE_CUSTOMGAMES_DESC"
	registerVal7.category = "customgame"
	registerVal7.communityDataType = Enum.FileshareCommunityDataType.FILESHARE_COMMUNITY_DATA_INVALID
	registerVal7.disabled = false
	registerVal7.tabWidget = "CoD.FileshareCategoryContentList"
	local registerVal8 = {}
	registerVal8.displayText = "MENU_SCREENSHOTS"
	registerVal8.displayImage = "uie_t7_mp_icon_header_screenshot"
	registerVal8.hintText = "MENU_FILESHARE_SHOWCASE_SCREENSHOTS_DESC"
	registerVal8.category = "screenshot"
	registerVal8.communityDataType = Enum.FileshareCommunityDataType.FILESHARE_COMMUNITY_DATA_INVALID
	registerVal8.disabled = false
	registerVal8.tabWidget = "CoD.FileshareScreenshotsContentList"
	local registerVal9 = {}
	registerVal9.displayText = "MENU_RECENT_GAMES"
	registerVal9.displayImage = "uie_t7_icon_menu_simple_media_recent"
	registerVal9.hintText = "MENU_FILESHARE_SHOWCASE_FILMS_DESC"
	registerVal9.category = "recentgames"
	registerVal9.communityDataType = Enum.FileshareCommunityDataType.FILESHARE_COMMUNITY_DATA_RECENT_GAMES
	registerVal9.disabled = false
	registerVal9.tabWidget = "CoD.FileshareCategoryContentList"
	local registerVal10 = {}
	registerVal10.displayText = "MENU_FILESHARE_CLIPS_CAPS"
	registerVal10.displayImage = "t7_icon_menu_simple_clips"
	registerVal10.hintText = "MENU_FILESHARE_SHOWCASE_CLIPS_DESC"
	registerVal10.category = "clip"
	registerVal10.communityDataType = Enum.FileshareCommunityDataType.FILESHARE_COMMUNITY_DATA_INVALID
	registerVal10.disabled = false
	registerVal10.tabWidget = "CoD.FileshareCategoryContentList"
	registerVal3 = {registerVal4, registerVal5, registerVal6, registerVal7, registerVal8, registerVal9, registerVal10}
	registerVal6 = Engine.GetGlobalModel()
	registerVal5 = Engine.CreateModel(registerVal6, "FileshareCategoriesList")
	registerVal4 = Engine.CreateModel(registerVal5, "list")
	arg1.optionModels = {}
	registerVal5, registerVal6, registerVal7 = ipairs(registerVal3)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal11 = Engine.CreateModel(registerVal4, ("buttonModel_" .. index8))
		arg1.optionModels[index8] = registerVal11
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "displayText")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9.displayText))
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "displayImage")
		Engine.SetModelValue(registerVal11, value9.displayImage)
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "hintText")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9.hintText))
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "category")
		Engine.SetModelValue(registerVal11, value9.category)
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "disabled")
		Engine.SetModelValue(registerVal11, value9.disabled)
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "tabWidget")
		Engine.SetModelValue(registerVal11, value9.tabWidget)
		if value9.communityDataType then
			registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "communityDataType")
			Engine.SetModelValue(registerVal11, value9.communityDataType)
		end
	end
end

registerVal2.prepare = __FUNC_8469D_
local function __FUNC_8516D_(arg0)
	return #arg0.optionModels
end

registerVal2.getCount = __FUNC_8516D_
local function __FUNC_851C2_(arg0, arg1, arg2)
	return arg1.optionModels[arg2]
end

registerVal2.getItem = __FUNC_851C2_
DataSources["FileshareCategoriesList"] = registerVal2
registerVal2 = {}
local function __FUNC_8521E_(arg0, arg1, arg2)
	local registerVal6 = {}
	registerVal6.displayText = "GROUPS_PAINTJOBS_CAPS"
	registerVal6.displayImage = "uie_t7_mp_icon_header_paintshop"
	registerVal6.hintText = "MENU_FILESHARE_COMMUNITY_PAINTJOBS_DESC"
	registerVal6.category = "paintjob"
	registerVal6.disabled = false
	registerVal6.tabWidget = "CoD.FileshareCategoryContentList"
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal6.displayText = "MENU_VARIANTS_CAPS"
	registerVal6.displayImage = "uie_t7_mp_icon_header_gunsmith"
	registerVal6.hintText = "MENU_FILESHARE_COMMUNITY_VARIANTS_DESC"
	registerVal6.category = "variant"
	registerVal6.disabled = false
	registerVal6.tabWidget = "CoD.FileshareCategoryContentList"
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal6.displayText = "MENU_EMBLEMS_CAPS"
	registerVal6.displayImage = "uie_t7_mp_icon_header_emblem"
	registerVal6.hintText = "MENU_FILESHARE_COMMUNITY_EMBLEMS_DESC"
	registerVal6.category = "emblem"
	registerVal6.disabled = false
	registerVal6.tabWidget = "CoD.FileshareCategoryContentList"
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal6.displayText = "MENU_CUSTOMGAMES_CAPS"
	registerVal6.displayImage = "uie_t7_mp_icon_header_customgames"
	registerVal6.hintText = "MENU_FILESHARE_COMMUNITY_CUSTOMGAMES_DESC"
	registerVal6.category = "customgame"
	registerVal6.disabled = false
	registerVal6.tabWidget = "CoD.FileshareCategoryContentList"
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal6.displayText = "MENU_SCREENSHOTS"
	registerVal6.displayImage = "uie_t7_mp_icon_header_screenshot"
	registerVal6.hintText = "MENU_FILESHARE_COMMUNITY_SCREENSHOTS_DESC"
	registerVal6.category = "screenshot"
	registerVal6.disabled = false
	registerVal6.tabWidget = "CoD.FileshareScreenshotsContentList"
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal6.displayText = "MENU_FILESHARE_CLIPS_CAPS"
	registerVal6.displayImage = "t7_icon_menu_simple_clips"
	registerVal6.hintText = "MENU_FILESHARE_COMMUNITY_CLIPS_DESC"
	registerVal6.category = "clip"
	registerVal6.disabled = false
	registerVal6.tabWidget = "CoD.FileshareCategoryContentList"
	table.insert({}, registerVal6)
	registerVal6 = Engine.GetGlobalModel()
	local registerVal5 = Engine.CreateModel(registerVal6, "FileshareCategoriesList")
	local registerVal4 = Engine.CreateModel(registerVal5, "list")
	arg1.optionModels = {}
	registerVal5, registerVal6, registerVal7 = ipairs({})
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal11 = Engine.CreateModel(registerVal4, ("community_buttonModel_" .. index8))
		arg1.optionModels[index8] = registerVal11
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "displayText")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9.displayText))
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "displayImage")
		Engine.SetModelValue(registerVal11, value9.displayImage)
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "hintText")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9.hintText))
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "category")
		Engine.SetModelValue(registerVal11, value9.category)
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "disabled")
		Engine.SetModelValue(registerVal11, value9.disabled)
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "tabWidget")
		Engine.SetModelValue(registerVal11, value9.tabWidget)
	end
end

registerVal2.prepare = __FUNC_8521E_
local function __FUNC_85B18_(arg0)
	return #arg0.optionModels
end

registerVal2.getCount = __FUNC_85B18_
local function __FUNC_85B6E_(arg0, arg1, arg2)
	return arg1.optionModels[arg2]
end

registerVal2.getItem = __FUNC_85B6E_
DataSources["FileshareCommunityCategoriesList"] = registerVal2
registerVal2 = {}
local function __FUNC_85BCA_(arg0, arg1, arg2)
	local registerVal6 = {}
	registerVal6.displayText = "MENU_FILESHARE_RECENTGAMES_CAPS"
	registerVal6.displayImage = "uie_t7_icon_menu_simple_media_recent"
	registerVal6.hintText = "MENU_FILESHARE_RECENTGAMES_DESC"
	registerVal6.category = "recentgames"
	registerVal6.communityDataType = Enum.FileshareCommunityDataType.FILESHARE_COMMUNITY_DATA_RECENT_GAMES
	registerVal6.tabWidget = "CoD.FileshareCategoryContentList"
	table.insert({}, registerVal6)
	registerVal6 = {}
	registerVal6.displayText = "MENU_FILESHARE_CLIPS_CAPS"
	registerVal6.displayImage = "t7_icon_menu_simple_clips"
	registerVal6.hintText = "MENU_FILESHARE_CLIPS_DESC"
	registerVal6.category = "clip_private"
	registerVal6.communityDataType = Enum.FileshareCommunityDataType.FILESHARE_COMMUNITY_DATA_INVALID
	registerVal6.tabWidget = "CoD.FileshareCategoryContentList"
	table.insert({}, registerVal6)
	registerVal6 = Engine.GetGlobalModel()
	local registerVal5 = Engine.CreateModel(registerVal6, "FileshareMyTheaterCategoriesList")
	local registerVal4 = Engine.CreateModel(registerVal5, "list")
	arg1.optionModels = {}
	registerVal5, registerVal6, registerVal7 = ipairs({})
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal11 = Engine.CreateModel(registerVal4, ("buttonModel_" .. index8))
		arg1.optionModels[index8] = registerVal11
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "displayText")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9.displayText))
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "displayImage")
		Engine.SetModelValue(registerVal11, value9.displayImage)
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "hintText")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9.hintText))
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "category")
		Engine.SetModelValue(registerVal11, value9.category)
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "communityDataType")
		Engine.SetModelValue(registerVal11, value9.communityDataType)
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "disabled")
		Engine.SetModelValue(registerVal11, value9.disabled)
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "tabWidget")
		Engine.SetModelValue(registerVal11, value9.tabWidget)
	end
end

registerVal2.prepare = __FUNC_85BCA_
local function __FUNC_862D9_(arg0)
	return #arg0.optionModels
end

registerVal2.getCount = __FUNC_862D9_
local function __FUNC_8632E_(arg0, arg1, arg2)
	return arg1.optionModels[arg2]
end

registerVal2.getItem = __FUNC_8632E_
DataSources["FileshareMyTheaterCategoriesList"] = registerVal2
local function __FUNC_8638A_(arg0)
	local registerVal2 = FileshareIsLocalCategory(arg0)
	local registerVal3 = CoD.FileshareUtility.GetSelectedItemProperty("fileAuthorXuid")
	local registerVal4 = Engine.GetXUID64(arg0)
	if registerVal3 ~= registerVal4 then
	end
	local registerVal5 = CoD.FileshareUtility.GetIsGroupsMode(arg0)
	if registerVal5 then
		registerVal5 = HasAdminPrivilege(arg0, Enum.GroupAdminPrivilege.GROUP_ADMIN_PRIVILEGE_FAVORITE_SHOWCASE_CONTENT)
		if registerVal5 then
			local registerVal7 = CoD.FileshareUtility.GetSelectedItemProperty("favoriteInCurrGroup")
			if registerVal7 then
			end
			local registerVal9 = {}
			registerVal9.displayText = "GROUPS_REMOVE_FROM_FAVORITES"
			registerVal9.displayImage = "t7_icon_menu_simple_groups_favorites"
			registerVal9.displayDesc = "GROUPS_REMOVE_FROM_FAVORITES_DESC"
			registerVal9.action = ToggleGroupShowcaseContentFavorite
			table.insert({}, registerVal9)
		end
		registerVal5 = HasAdminPrivilege(arg0, Enum.GroupAdminPrivilege.GROUP_ADMIN_PRIVILEGE_EDIT_FEATURED_CONTENT)
		if registerVal5 then
			registerVal7 = CoD.FileshareUtility.GetSelectedItemProperty("featuredInCurrGroup")
			if registerVal7 then
			end
			registerVal9 = {}
			registerVal9.displayText = "GROUPS_REMOVE_FROM_FEATURED"
			registerVal9.displayImage = "t7_icon_menu_simple_emblems"
			registerVal9.displayDesc = "GROUPS_REMOVE_FROM_FEATURED_DESC"
			registerVal9.action = ToggleGroupShowcaseContentFeatured
			table.insert({}, registerVal9)
		end
		registerVal5 = HasAdminPrivilege(arg0, Enum.GroupAdminPrivilege.GROUP_ADMIN_PRIVILEGE_REMOVE_SHOWCASE_CONTENT)
		if not {} or registerVal5 then
			registerVal7 = {}
			registerVal7.displayText = "GROUPS_REMOVE_FROM_SHOWCASE"
			registerVal7.displayImage = "t7_mp_icon_group_action_remove"
			registerVal7.displayDesc = "GROUPS_REMOVE_FROM_SHOWCASE_DESC"
			registerVal7.action = RemoveFileFromGroupsShowcase
			table.insert({}, registerVal7)
		end
	end
	registerVal5 = CoD.FileshareUtility.GetCurrentCategory()
	registerVal5 = FileshareCanPublish(arg0)
	if registerVal2 and registerVal5 == "clip_private" and registerVal5 then
		registerVal7 = {}
		registerVal7.displayText = "MENU_PUBLISH"
		registerVal7.displayImage = "t7_icon_menu_simple_publish"
		registerVal7.displayDesc = "MENU_CLIP_PUBLISH_DESC"
		registerVal7.action = OpenLocalClipPublishPrompt
		table.insert({}, registerVal7)
	end
	registerVal5 = FilesshareCanShowVoteOptions(arg0)
	if not registerVal2 and registerVal5 then
		registerVal7 = {}
		registerVal7.displayText = "MENU_FILESHARE_LIKE"
		registerVal7.displayImage = "uie_t7_icon_menu_options_like"
		registerVal7.displayDesc = "MENU_FILESHARE_LIKE_DESC"
		registerVal7.action = CoD.FileshareUtility.ReportLike
		table.insert({}, registerVal7)
		registerVal7 = {}
		registerVal7.displayText = "MENU_FILESHARE_DISLIKE"
		registerVal7.displayImage = "uie_t7_icon_menu_options_dislike"
		registerVal7.displayDesc = "MENU_FILESHARE_DISLIKE_DESC"
		registerVal7.action = CoD.FileshareUtility.ReportDislike
		table.insert({}, registerVal7)
	end
	registerVal5 = FileshareCanDownloadItem(arg0)
	if not registerVal2 and registerVal5 then
		registerVal7 = {}
		registerVal7.displayText = "MENU_FILESHARE_DOWNLOAD"
		registerVal7.displayImage = "t7_icon_menu_options_download"
		registerVal7.displayDesc = "MENU_FILESHARE_DOWNLOAD_DESC"
		registerVal7.action = CoD.FileshareUtility.DownloadAction
		table.insert({}, registerVal7)
	end
	registerVal5 = IsMemberOfAnyGroup(arg0)
	if true and registerVal5 then
		registerVal7 = {}
		registerVal7.displayText = "GROUPS_REPUBLISH_TO_GROUPS_CAPS"
		registerVal7.displayImage = "t7_icon_menu_simple_publish"
		registerVal7.displayDesc = "GROUPS_REPUBLISH_TO_GROUPS_DESC"
		registerVal7.action = PublishFileToGroupsShowcase
		table.insert({}, registerVal7)
	end
	registerVal5 = FileshareCanDeleteItem(arg0)
	if registerVal5 then
		if registerVal2 then
		end
		local registerVal8 = {}
		registerVal8.displayText = "MENU_DELETE"
		registerVal8.displayImage = "t7_icon_menu_simple_delete"
		registerVal8.displayDesc = "MENU_FILESHARE_DELETE_LOCAL_DESC"
		registerVal8.action = CoD.FileshareUtility.Delete
		table.insert({}, registerVal8)
	end
	registerVal5 = FileshareCanShowPlayerDetails(arg0)
	if not registerVal2 and not true and registerVal5 then
		registerVal7 = {}
		registerVal7.displayText = "MPUI_PLAYER_DETAILS"
		registerVal7.displayImage = "t7_icon_menu_simple_media_manager"
		registerVal7.displayDesc = "MENU_FILESHARE_PLAYER_DETAILS_DESC"
		registerVal7.action = ShowcaseOpenPlayerDetails
		table.insert({}, registerVal7)
	end
	if not registerVal2 and not true then
		registerVal5 = CoD.FileshareUtility.GetSelectedItemProperty("fileAuthorName")
		registerVal8 = {}
		registerVal8.displayText = "MENU_REPORT_PLAYER"
		registerVal8.displayImage = "uie_t7_icon_error_overlays"
		registerVal8.displayDesc = "MENU_REPORT_PLAYER_DESC"
		registerVal8.action = ShowReportPlayerDialog
		registerVal9 = {}
		registerVal9.controller = arg0
		registerVal9.gamertag = registerVal5
		registerVal9.xuid = registerVal3
		registerVal8.params = registerVal9
		registerVal8.lastInGroup = false
		table.insert({}, registerVal8)
	end
	if registerVal2 then
	else
		registerVal5 = FileshareCanShowShowcaseManager(arg0)
		if registerVal5 then
			registerVal7 = {}
			registerVal7.displayText = "MENU_FILESHARE_SHOWCASE_MANAGER"
			registerVal7.displayImage = "t7_icon_menu_simple_media_manager"
			registerVal7.displayDesc = "MENU_FILESHARE_MEDIA_MANAGER_DESC"
			registerVal7.action = CoD.FileshareUtility.OpenShowcaseManager
			table.insert({}, registerVal7)
		end
	end
	local registerVal6, registerVal7, registerVal8 = ipairs({})
	for index9,value10 in registerVal6, registerVal7, registerVal8 do
		local registerVal13 = {}
		local registerVal14 = {}
		local registerVal15 = Engine.Localize(value10.displayText)
		registerVal14.displayText = registerVal15
		registerVal14.icon = value10.displayImage
		registerVal14.hintText = value10.displayDesc
		registerVal13.models = registerVal14
		registerVal14 = {}
		registerVal14.action = value10.action
		registerVal14.actionParam = value10.params
		registerVal13.properties = registerVal14
		table.insert({}, registerVal13)
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("FileshareOptionsButtonList", __FUNC_8638A_)
DataSources["FileshareOptionsButtonList"] = registerVal2
registerVal2 = {}
local function __FUNC_87575_(arg0, arg1, arg2)
	local registerVal4 = IsMediaManager()
	if registerVal4 then
		local registerVal6 = {}
		registerVal6.displayText = "MENU_YES"
		registerVal6.displayImage = ""
		registerVal6.displayDesc = "MENU_ALLOW_DOWNLOAD_DESC"
		registerVal6.action = CoD.FileshareUtility.DeleteYes
		table.insert({}, registerVal6)
		registerVal6 = {}
		registerVal6.displayText = "MENU_NO"
		registerVal6.displayImage = ""
		registerVal6.displayDesc = "MENU_FILESHARE_DOWNLOAD_DESC"
		registerVal6.action = CoD.FileshareUtility.DeleteNo
		table.insert({}, registerVal6)
	else
		registerVal6 = {}
		registerVal6.displayText = "MENU_DELETE"
		registerVal6.displayImage = ""
		registerVal6.displayDesc = "MENU_ALLOW_DOWNLOAD_DESC"
		registerVal6.action = CoD.FileshareUtility.DeleteYes
		table.insert({}, registerVal6)
		registerVal6 = {}
		registerVal6.displayText = "MENU_CANCEL"
		registerVal6.displayImage = ""
		registerVal6.displayDesc = "MENU_FILESHARE_DOWNLOAD_DESC"
		registerVal6.action = CoD.FileshareUtility.DeleteNo
		table.insert({}, registerVal6)
	end
	registerVal6 = Engine.GetGlobalModel()
	local registerVal5 = Engine.CreateModel(registerVal6, "FileshareOptionsDeleteButtonList")
	registerVal4 = Engine.CreateModel(registerVal5, "list")
	arg1.optionModels = {}
	registerVal5, registerVal6, registerVal7 = ipairs({})
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal11 = Engine.CreateModel(registerVal4, ("buttonModel_" .. index8))
		arg1.optionModels[index8] = registerVal11
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "displayText")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9.displayText))
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "displayImage")
		Engine.SetModelValue(registerVal11, value9.displayImage)
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "hintText")
		Engine.SetModelValue(registerVal11, Engine.Localize(value9.displayDesc))
		registerVal11 = Engine.CreateModel(arg1.optionModels[index8], "action")
		Engine.SetModelValue(registerVal11, value9.action)
	end
end

registerVal2.prepare = __FUNC_87575_
local function __FUNC_87B36_(arg0)
	return #arg0.optionModels
end

registerVal2.getCount = __FUNC_87B36_
local function __FUNC_87B8A_(arg0, arg1, arg2)
	return arg1.optionModels[arg2]
end

registerVal2.getItem = __FUNC_87B8A_
DataSources["FileshareOptionsDeleteButtonList"] = registerVal2
registerVal2 = {}
local function __FUNC_87BE6_(arg0, arg1, arg2)
	local function __FUNC_88177_(arg0, arg1, arg2, arg3, arg4)
		local registerVal5 = GoBack(arg0, arg2)
		OpenPurchaseExtraSlotsOverlay(arg0, arg2, registerVal5)
	end

	local registerVal5 = FileshareShowcaseSlotsAvailable(arg0)
	if registerVal5 == false then
		registerVal5 = Engine.IsDemoPlaying()
		if registerVal5 then
		else
			local registerVal7 = {}
			registerVal7.displayText = "MENU_FILESHARE_SHOWCASE_MANAGER_CAPS"
			registerVal7.displayImage = ""
			registerVal7.displayDesc = "MENU_ALLOW_DOWNLOAD_DESC"
			registerVal7.action = CoD.FileshareUtility.OpenShowcaseManager
			table.insert({}, registerVal7)
		end
		registerVal5 = FileshareCanBuyMoreSlots(arg0)
		if registerVal5 == true then
			registerVal7 = {}
			registerVal7.displayText = "MENU_FILESHARE_BUY_SLOTS"
			registerVal7.displayImage = ""
			registerVal7.displayDesc = "MENU_FILESHARE_DOWNLOAD_DESC"
			registerVal7.action = __FUNC_88177_
			table.insert({}, registerVal7)
		end
	end
	registerVal7 = Engine.GetGlobalModel()
	local registerVal6 = Engine.CreateModel(registerVal7, "FileshareSlotsFullButtonList")
	registerVal5 = Engine.CreateModel(registerVal6, "list")
	arg1.optionModels = {}
	registerVal6, registerVal7, registerVal8 = ipairs({})
	for index9,value10 in registerVal6, registerVal7, registerVal8 do
		local registerVal12 = Engine.CreateModel(registerVal5, ("buttonModel_" .. index9))
		arg1.optionModels[index9] = registerVal12
		registerVal12 = Engine.CreateModel(arg1.optionModels[index9], "displayText")
		Engine.SetModelValue(registerVal12, Engine.Localize(value10.displayText))
		registerVal12 = Engine.CreateModel(arg1.optionModels[index9], "displayImage")
		Engine.SetModelValue(registerVal12, value10.displayImage)
		registerVal12 = Engine.CreateModel(arg1.optionModels[index9], "hintText")
		Engine.SetModelValue(registerVal12, Engine.Localize(value10.displayDesc))
		registerVal12 = Engine.CreateModel(arg1.optionModels[index9], "action")
		Engine.SetModelValue(registerVal12, value10.action)
	end
end

registerVal2.prepare = __FUNC_87BE6_
local function __FUNC_881FB_(arg0)
	return #arg0.optionModels
end

registerVal2.getCount = __FUNC_881FB_
local function __FUNC_8824E_(arg0, arg1, arg2)
	return arg1.optionModels[arg2]
end

registerVal2.getItem = __FUNC_8824E_
DataSources["FileshareSlotsFullButtonList"] = registerVal2
local function __FUNC_882AA_(arg0)
	local registerVal5 = CraftSlotsFullByStorageType(arg0, Enum.StorageFileType.STORAGE_GUNSMITH)
	local registerVal7 = Engine.GetModel(CoD.perController[arg0].gunsmithVariantModel, "readOnly")
	local registerVal8 = Engine.GetModelValue(registerVal7)
	if CoD.perController[arg0].gunsmithVariantModel and registerVal7 and registerVal8 and registerVal8 == 1.000000 then
	end
	if registerVal5 == true or true == true then
	end
	if true == true then
	end
	registerVal8 = FileshareCanPublish(arg0)
	if registerVal8 then
		local registerVal10 = {}
		registerVal10.displayText = "MENU_PUBLISH"
		registerVal10.displayImage = "t7_icon_menu_simple_publish"
		registerVal10.displayDesc = "MENU_CANNOT_PUBLISH_DOWNLOADED_DESC"
		registerVal10.action = CoD.CraftUtility.OpenPublishPromptGunsmith
		registerVal10.disabled = true
		table.insert({}, registerVal10)
	end
	registerVal10 = {}
	registerVal10.displayText = "MENU_DELETE"
	registerVal10.displayImage = "t7_icon_menu_simple_delete"
	registerVal10.displayDesc = "MENU_GUNSMITH_DELETE_DESC"
	registerVal10.action = CoD.CraftUtility.GunsmithClear
	registerVal10.disabled = false
	table.insert({}, registerVal10)
	registerVal10 = {}
	registerVal10.displayText = "MENU_COPY"
	registerVal10.displayImage = "t7_icon_menu_simple_copy"
	registerVal10.displayDesc = "MENU_GUNSMITH_COPY_DESC"
	registerVal10.action = Gunsmith_CopyVariant
	registerVal10.disabled = true
	table.insert({}, registerVal10)
	registerVal10 = {}
	registerVal10.displayText = "MENU_RENAME"
	registerVal10.displayImage = "t7_icon_menu_simple_rename"
	registerVal10.displayDesc = "MENU_GUNSMITH_RENAME_DESC"
	registerVal10.action = CoD.CraftUtility.GunsmithRename
	registerVal10.disabled = false
	table.insert({}, registerVal10)
	registerVal8 = CanShowMediaManager()
	if registerVal8 then
		registerVal10 = {}
		registerVal10.displayText = "MENU_MEDIA_MANAGER"
		registerVal10.displayImage = "t7_icon_menu_simple_media_manager"
		registerVal10.displayDesc = "MENU_MEDIA_MANAGER_DESC"
		registerVal10.action = GoBackAndOpenMediaManagerOnParent
		registerVal10.param = "variant"
		registerVal10.disabled = false
		table.insert({}, registerVal10)
	end
	local registerVal9, registerVal10, registerVal11 = ipairs({})
	for index12,value13 in registerVal9, registerVal10, registerVal11 do
		local registerVal16 = {}
		local registerVal17 = {}
		registerVal17.displayText = value13.displayText
		registerVal17.icon = value13.displayImage
		registerVal17.description = value13.displayDesc
		registerVal17.action = value13.action
		registerVal17.param = value13.param
		registerVal16.models = registerVal17
		registerVal17 = {}
		registerVal17.disabled = value13.disabled
		registerVal16.properties = registerVal17
		table.insert({}, registerVal16)
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("GunsmithOptionsButtonList", __FUNC_882AA_)
DataSources["GunsmithOptionsButtonList"] = registerVal2
local function __FUNC_88AB5_(arg0)
	local registerVal5 = CraftSlotsFullByStorageType(arg0, Enum.StorageFileType.STORAGE_EMBLEMS)
	local registerVal7 = Engine.GetModel(CoD.perController[arg0].selectedEmblemModel, "readOnly")
	local registerVal8 = Engine.GetModelValue(registerVal7)
	if CoD.perController[arg0].selectedEmblemModel and registerVal7 and registerVal8 and registerVal8 == 1.000000 then
	end
	if registerVal5 == true or true == true then
	end
	if true == true then
	end
	registerVal8 = isFileshareFeatureEnabled()
	if registerVal8 then
		local registerVal10 = {}
		registerVal10.displayText = "MENU_PUBLISH"
		registerVal10.displayImage = "t7_icon_menu_simple_publish"
		registerVal10.displayDesc = "MENU_CANNOT_PUBLISH_DOWNLOADED_DESC"
		registerVal10.action = CoD.CraftUtility.OpenPublishPromptEmblem
		registerVal10.disabled = true
		table.insert({}, registerVal10)
	end
	registerVal10 = {}
	registerVal10.displayText = "MENU_DELETE"
	registerVal10.displayImage = "t7_icon_menu_simple_delete"
	registerVal10.displayDesc = "MENU_EMBLEM_DELETE_DESC"
	registerVal10.action = CoD.CraftUtility.EmblemClear
	registerVal10.disabled = false
	table.insert({}, registerVal10)
	registerVal10 = {}
	registerVal10.displayText = "MENU_COPY"
	registerVal10.displayImage = "t7_icon_menu_simple_copy"
	registerVal10.displayDesc = "MENU_EMBLEM_COPY_DESC"
	registerVal10.action = EmblemSelect_CopyEmblem
	registerVal10.disabled = true
	table.insert({}, registerVal10)
	registerVal10 = {}
	registerVal10.displayText = "MENU_RENAME"
	registerVal10.displayImage = "t7_icon_menu_simple_rename"
	registerVal10.displayDesc = "MENU_EMBLEM_RENAME_DESC"
	registerVal10.action = CoD.CraftUtility.EmblemRename
	registerVal10.disabled = false
	table.insert({}, registerVal10)
	registerVal8 = CanShowMediaManager()
	if registerVal8 then
		registerVal10 = {}
		registerVal10.displayText = "MENU_MEDIA_MANAGER"
		registerVal10.displayImage = "t7_icon_menu_simple_media_manager"
		registerVal10.displayDesc = "MENU_MEDIA_MANAGER_DESC"
		registerVal10.action = GoBackAndOpenMediaManagerOnParent
		registerVal10.param = "emblem"
		registerVal10.disabled = false
		table.insert({}, registerVal10)
	end
	local registerVal9, registerVal10, registerVal11 = ipairs({})
	for index12,value13 in registerVal9, registerVal10, registerVal11 do
		local registerVal16 = {}
		local registerVal17 = {}
		registerVal17.displayText = value13.displayText
		registerVal17.icon = value13.displayImage
		registerVal17.description = value13.displayDesc
		registerVal17.action = value13.action
		registerVal17.param = value13.param
		registerVal16.models = registerVal17
		registerVal17 = {}
		registerVal17.disabled = value13.disabled
		registerVal16.properties = registerVal17
		table.insert({}, registerVal16)
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("EmblemOptionsButtonList", __FUNC_88AB5_)
DataSources["EmblemOptionsButtonList"] = registerVal2
local function __FUNC_892B6_(arg0)
	local registerVal5 = CraftSlotsFullByStorageType(arg0, Enum.StorageFileType.STORAGE_PAINTJOBS)
	local registerVal7 = Engine.GetModel(CoD.perController[arg0].selectedpaintjobModel, "readOnly")
	local registerVal8 = Engine.GetModelValue(registerVal7)
	if CoD.perController[arg0].selectedpaintjobModel and registerVal7 and registerVal8 and registerVal8 == 1.000000 then
	end
	if registerVal5 == true or true == true then
	end
	if true == true then
	end
	registerVal8 = isFileshareFeatureEnabled()
	if registerVal8 then
		local registerVal10 = {}
		registerVal10.displayText = "MENU_PUBLISH"
		registerVal10.displayImage = "t7_icon_menu_simple_publish"
		registerVal10.displayDesc = "MENU_CANNOT_PUBLISH_DOWNLOADED_DESC"
		registerVal10.action = CoD.CraftUtility.OpenPublishPromptPaintjob
		registerVal10.disabled = true
		table.insert({}, registerVal10)
	end
	registerVal10 = {}
	registerVal10.displayText = "MENU_DELETE"
	registerVal10.displayImage = "t7_icon_menu_simple_delete"
	registerVal10.displayDesc = "MENU_PAINTJOB_DELETE_DESC"
	registerVal10.action = CoD.CraftUtility.PaintjobClear
	registerVal10.disabled = false
	table.insert({}, registerVal10)
	registerVal10 = {}
	registerVal10.displayText = "MENU_COPY"
	registerVal10.displayImage = "t7_icon_menu_simple_copy"
	registerVal10.displayDesc = "MENU_PAINTJOB_COPY_DESC"
	registerVal10.action = PaintjobSelector_CopyPaintjob
	registerVal10.disabled = true
	table.insert({}, registerVal10)
	registerVal10 = {}
	registerVal10.displayText = "MENU_RENAME"
	registerVal10.displayImage = "t7_icon_menu_simple_rename"
	registerVal10.displayDesc = "MENU_PAINTJOB_RENAME_DESC"
	registerVal10.action = CoD.CraftUtility.PaintjobRename
	registerVal10.disabled = false
	table.insert({}, registerVal10)
	registerVal8 = CanShowMediaManager()
	if registerVal8 then
		registerVal10 = {}
		registerVal10.displayText = "MENU_MEDIA_MANAGER"
		registerVal10.displayImage = "t7_icon_menu_simple_media_manager"
		registerVal10.displayDesc = "MENU_MEDIA_MANAGER_DESC"
		registerVal10.action = GoBackAndOpenMediaManagerOnParent
		registerVal10.param = "paintjob"
		registerVal10.disabled = false
		table.insert({}, registerVal10)
	end
	registerVal8 = Engine.IsSteamWorkshopEnabled()
	if registerVal8 then
		registerVal10 = {}
		registerVal10.displayText = "PLATFORM_STEAM_PUBLISH"
		registerVal10.displayImage = ""
		registerVal10.displayDesc = "PLATFORM_STEAM_PUBLISH_DESC"
		registerVal10.action = CoD.CraftUtility.OpenSteamPublishPromptPaintjob
		table.insert({}, registerVal10)
	end
	local registerVal9, registerVal10, registerVal11 = ipairs({})
	for index12,value13 in registerVal9, registerVal10, registerVal11 do
		local registerVal16 = {}
		local registerVal17 = {}
		registerVal17.displayText = value13.displayText
		registerVal17.icon = value13.displayImage
		registerVal17.description = value13.displayDesc
		registerVal17.action = value13.action
		registerVal17.param = value13.param
		registerVal16.models = registerVal17
		registerVal17 = {}
		registerVal17.disabled = value13.disabled
		registerVal16.properties = registerVal17
		table.insert({}, registerVal16)
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("PaintjobOptionsButtonList", __FUNC_892B6_)
DataSources["PaintjobOptionsButtonList"] = registerVal2
local function __FUNC_89BCA_(arg0)
	local registerVal1 = CoD.CraftUtility.GetGridTypeName(arg0)
	local registerVal2 = IsGridOn(arg0, registerVal1)
	if registerVal2 then
	end
	local registerVal5 = {}
	local registerVal6 = {}
	registerVal6.displayText = "MENU_EMBLEM_TURN_GRID_OFF"
	registerVal6.displayImage = ""
	registerVal6.displayDesc = "MENU_EMBLEM_TURN_GRID_OFF_HINT"
	registerVal6.action = PaintjobEditor_ToggleGrid
	registerVal6.disabled = false
	registerVal5 = {registerVal6}
	local registerVal7, registerVal8, registerVal9 = ipairs(registerVal5)
	for index10,value11 in registerVal7, registerVal8, registerVal9 do
		local registerVal14 = {}
		local registerVal15 = {}
		registerVal15.displayText = value11.displayText
		registerVal15.icon = value11.displayImage
		registerVal15.description = value11.displayDesc
		registerVal15.action = value11.action
		registerVal14.models = registerVal15
		registerVal15 = {}
		registerVal15.disabled = value11.disabled
		registerVal14.properties = registerVal15
		table.insert({}, registerVal14)
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("PaintjobLayerOptionsButtonList", __FUNC_89BCA_)
DataSources["PaintjobLayerOptionsButtonList"] = registerVal2
local function __FUNC_89EE9_(arg0)
	local registerVal4 = {}
	registerVal4.displayText = ""
	registerVal4.displayImage = "t7_menu_gunsmith_statssingle"
	registerVal4.displayDesc = "MENU_GUNSMITH_SNAPSHOT_STATS"
	registerVal4.action = Gunsmith_SnapshotToggleDisplayProperty
	registerVal4.visibilityModelName = "GunsmithSnapshot.Stats"
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal4.displayText = ""
	registerVal4.displayImage = "t7_menu_gunsmith_weaponlevel"
	registerVal4.displayDesc = "MENU_GUNSMITH_SNAPSHOT_WEAPON_LEVEL"
	registerVal4.action = Gunsmith_SnapshotToggleDisplayProperty
	registerVal4.visibilityModelName = "GunsmithSnapshot.WeaponLevel"
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal4.displayText = ""
	registerVal4.displayImage = "t7_menu_gunsmith_player"
	registerVal4.displayDesc = "MENU_GUNSMITH_SNAPSHOT_PLAYERID"
	registerVal4.action = Gunsmith_SnapshotToggleDisplayProperty
	registerVal4.visibilityModelName = "GunsmithSnapshot.PlayerID"
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal4.displayText = ""
	registerVal4.displayImage = "t7_menu_gunsmith_weaponname"
	registerVal4.displayDesc = "MENU_GUNSMITH_SNAPSHOT_WEAPON_NAME"
	registerVal4.action = Gunsmith_SnapshotToggleDisplayProperty
	registerVal4.visibilityModelName = "GunsmithSnapshot.WeaponName"
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal4.displayText = ""
	registerVal4.displayImage = "t7_menu_gunsmith_opticattach"
	registerVal4.displayDesc = "MENU_GUNSMITH_SNAPSHOT_ATTACHMENTS"
	registerVal4.action = Gunsmith_SnapshotToggleDisplayProperty
	registerVal4.visibilityModelName = "GunsmithSnapshot.AttachmentIcons"
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal4.displayText = ""
	registerVal4.displayImage = "t7_menu_gunsmith_bo3logo"
	registerVal4.displayDesc = "MENU_GUNSMITH_SNAPSHOT_BO3LOGO"
	registerVal4.action = Gunsmith_SnapshotToggleDisplayProperty
	registerVal4.visibilityModelName = "GunsmithSnapshot.BO3Logo"
	table.insert({}, registerVal4)
	local registerVal3, registerVal4, registerVal5 = ipairs({})
	for index6,value7 in registerVal3, registerVal4, registerVal5 do
		local registerVal10 = {}
		local registerVal11 = {}
		registerVal11.displayText = value7.displayText
		registerVal11.icon = value7.displayImage
		registerVal11.description = value7.displayDesc
		registerVal11.action = value7.action
		registerVal11.param = value7.visibilityModelName
		registerVal10.models = registerVal11
		registerVal11 = {}
		registerVal11.disabled = value7.disabled
		registerVal10.properties = registerVal11
		table.insert({}, registerVal10)
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("GunsmithSnapshotModeButtonList", __FUNC_89EE9_)
DataSources["GunsmithSnapshotModeButtonList"] = registerVal2
registerVal2 = {}
local function __FUNC_8A4EA_(arg0, arg1, arg2)
	arg1.controller = arg0
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.CreateModel(registerVal4, "MediaManager.PaintjobList")
	arg1.paintjobListModel = registerVal3
	arg1.totalPaintjobs = 0.000000
	arg1.paintjobList = {}
	{}.isBuyMore = true
	{}.sortIndex = 0.000000
	{}.weaponIndex = 0.000000
	{}.paintjobSlot = 0.000000
	{}.paintjobIndex = 0.000000
	registerVal4 = FileshareCanBuyMoreSlots(arg0)
	if registerVal4 == true then
		table.insert(arg1.paintjobList, {})
		arg1.totalPaintjobs = (arg1.totalPaintjobs + 1.000000)
	end
	registerVal4 = CoD.CraftUtility.Paintjobs.GetSortedWeaponPaintjobList()
	local registerVal5, registerVal6, registerVal7 = pairs(registerVal4)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		if value9.weaponIndex ~= 0.000000 then
			table.insert(arg1.paintjobList, value9)
			arg1.totalPaintjobs = (arg1.totalPaintjobs + 1.000000)
		end
	end
end

registerVal2.prepare = __FUNC_8A4EA_
local function __FUNC_8A82F_(arg0)
	return arg0.totalPaintjobs
end

registerVal2.getCount = __FUNC_8A82F_
local function __FUNC_8A880_(arg0, arg1, arg2)
	local registerVal3 = Engine.CreateModel(arg1.paintjobListModel, ("mm_paintjob_" .. arg2))
	if arg1.paintjobList[arg2] then
		local registerVal6 = Engine.CreateModel(registerVal3, "showBuyImage")
		Engine.SetModelValue(registerVal6, 0.000000)
		registerVal6 = Engine.CreateModel(registerVal3, "isBuyMore")
		Engine.SetModelValue(registerVal6, false)
		if arg1.paintjobList[arg2].isBuyMore ~= nil and arg1.paintjobList[arg2].isBuyMore == true then
			registerVal6 = Engine.CreateModel(registerVal3, "isBuyMore")
			Engine.SetModelValue(registerVal6, true)
			registerVal6 = Engine.CreateModel(registerVal3, "showBuyImage")
			Engine.SetModelValue(registerVal6, 1.000000)
			registerVal6 = Engine.CreateModel(registerVal3, "sortIndex")
			Engine.SetModelValue(registerVal6, 1.000000)
			registerVal6 = Engine.CreateModel(registerVal3, "paintjobName")
			Engine.SetModelValue(registerVal6, Engine.Localize("MENU_FILESHARE_BUY_SLOTS"))
			registerVal6 = Engine.CreateModel(registerVal3, "plusImageSrc")
			Engine.SetModelValue(registerVal6, "uie_t7_icon_codpoints")
		end
		local registerVal5 = CoD.CraftUtility.Paintjobs.IsPaintjobIndexOccupied(arg1.paintjobList[arg2].paintjobSlot, arg1.paintjobList[arg2].paintjobIndex)
		if registerVal5 then
			registerVal6 = Engine.CreateModel(registerVal3, "paintjobName")
			Engine.SetModelValue(registerVal6, arg1.paintjobList[arg2].paintjobName)
			registerVal6 = Engine.CreateModel(registerVal3, "paintjobTextEntry")
			Engine.SetModelValue(registerVal6, arg1.paintjobList[arg2].paintjobName)
		end
		if arg1.paintjobList[arg2].weaponIndex ~= CoD.CraftUtility.Paintjobs.EMPTY_PAINTJOB_SLOT_WEAPON_INDEX then
			CoD.SetCustomization(arg0, arg1.paintjobList[arg2].weaponIndex, "weapon_index")
		end
		registerVal6 = Engine.CreateModel(registerVal3, "sortIndex")
		Engine.SetModelValue(registerVal6, arg1.paintjobList[arg2].sortIndex)
		registerVal6 = Engine.CreateModel(registerVal3, "weaponIndex")
		Engine.SetModelValue(registerVal6, arg1.paintjobList[arg2].weaponIndex)
		registerVal6 = Engine.CreateModel(registerVal3, "paintjobSlot")
		Engine.SetModelValue(registerVal6, arg1.paintjobList[arg2].paintjobSlot)
		registerVal6 = Engine.CreateModel(registerVal3, "paintjobIndex")
		Engine.SetModelValue(registerVal6, arg1.paintjobList[arg2].paintjobIndex)
		registerVal6 = Engine.CreateModel(registerVal3, "paintjobSlotAndIndex")
		Engine.SetModelValue(registerVal6, (arg1.paintjobList[arg2].paintjobSlot .. " " .. arg1.paintjobList[arg2].paintjobIndex))
		registerVal6 = Engine.CreateModel(registerVal3, "authorName")
		Engine.SetModelValue(registerVal6, Engine.GetSelfGamertag(arg0))
		registerVal6 = Engine.CreateModel(registerVal3, "createTime")
		Engine.SetModelValue(registerVal6, arg1.paintjobList[arg2].createTime)
		if arg1.paintjobList[arg2].weaponIndex ~= nil then
			registerVal6 = Engine.ToUpper(Engine.Localize(Engine.GetItemName(arg1.paintjobList[arg2].weaponIndex)))
		end
		local registerVal7 = Engine.CreateModel(registerVal3, "weaponName")
		Engine.SetModelValue(registerVal7, registerVal6)
		return registerVal3
	end
end

registerVal2.getItem = __FUNC_8A880_
DataSources["MediaManagerPaintjobList"] = registerVal2
registerVal2 = {}
local function __FUNC_8B12F_(arg0, arg1, arg2)
	arg1.controller = arg0
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.CreateModel(registerVal4, "MediaManager.VariantList")
	arg1.variantListModel = registerVal3
	arg1.totalVariants = 0.000000
	arg1.variantList = {}
	{}.isBuyMore = true
	{}.sortIndex = 0.000000
	{}.weaponIndex = 0.000000
	{}.paintjobSlot = 0.000000
	{}.paintjobIndex = 0.000000
	registerVal4 = FileshareCanBuyMoreSlots(arg0)
	if registerVal4 == true then
		table.insert(arg1.variantList, {})
		arg1.totalVariants = (arg1.totalVariants + 1.000000)
	end
	registerVal4 = CoD.CraftUtility.Gunsmith.GetSortedWeaponVariantList()
	local registerVal5, registerVal6, registerVal7 = pairs(registerVal4)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		if value9.weaponIndex ~= 0.000000 then
			table.insert(arg1.variantList, value9)
			arg1.totalVariants = (arg1.totalVariants + 1.000000)
		end
	end
end

registerVal2.prepare = __FUNC_8B12F_
local function __FUNC_8B46D_(arg0)
	return arg0.totalVariants
end

registerVal2.getCount = __FUNC_8B46D_
local function __FUNC_8B4BF_(arg0, arg1, arg2, arg3, arg4)
	local registerVal6 = Engine.CreateModel(arg4, "variantTextEntry")
	Engine.SetModelValue(registerVal6, Engine.Localize("MENU_GUNSMITH_ENTER_VARIANT_NAME"))
	registerVal6 = Engine.CreateModel(arg4, "variantIndex")
	Engine.SetModelValue(registerVal6, arg2.variantIndex)
	registerVal6 = Engine.CreateModel(arg4, "weaponIndex")
	Engine.SetModelValue(registerVal6, arg2.weaponIndex)
	local registerVal5 = CoD.CraftUtility.Gunsmith.IsVariantIndexOccupied(arg2.variantIndex)
	if registerVal5 then
		registerVal6 = Engine.CreateModel(arg4, "variantName")
		Engine.SetModelValue(registerVal6, arg2.variantName)
		registerVal6 = Engine.CreateModel(arg4, "variantNameBig")
		Engine.SetModelValue(registerVal6, arg2.variantName)
	else
		registerVal6 = Engine.CreateModel(arg4, "variantName")
		Engine.SetModelValue(registerVal6, Engine.Localize("MENU_GUNSMITH_CREATE_VARIANT"))
		registerVal6 = Engine.CreateModel(arg4, "variantNameBig")
		Engine.SetModelValue(registerVal6, "")
	end
	registerVal5, registerVal6, registerVal7 = ipairs(arg2.attachment)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal11 = Engine.CreateModel(arg4, ("attachment" .. index8))
		Engine.SetModelValue(registerVal11, value9)
	end
	registerVal5, registerVal6, registerVal7 = ipairs(arg2.attachmentVariant)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		registerVal11 = Engine.CreateModel(arg4, ("attachmentVariant" .. index8))
		Engine.SetModelValue(registerVal11, value9)
	end
	registerVal6 = Engine.CreateModel(arg4, "sortIndex")
	Engine.SetModelValue(registerVal6, arg3)
	registerVal6 = Engine.CreateModel(arg4, "paintjobSlot")
	Engine.SetModelValue(registerVal6, arg2.paintjobSlot)
	registerVal6 = Engine.CreateModel(arg4, "paintjobIndex")
	Engine.SetModelValue(registerVal6, arg2.paintjobIndex)
	registerVal6 = Engine.CreateModel(arg4, "camoIndex")
	Engine.SetModelValue(registerVal6, arg2.camoIndex)
	registerVal6 = Engine.CreateModel(arg4, "paintjobSlotAndIndex")
	Engine.SetModelValue(registerVal6, (arg2.paintjobSlot .. " " .. arg2.paintjobIndex))
	registerVal6 = Engine.CreateModel(arg4, "authorName")
	Engine.SetModelValue(registerVal6, Engine.GetSelfGamertag(arg0))
	registerVal6 = Engine.CreateModel(arg4, "createTime")
	Engine.SetModelValue(registerVal6, arg2.createTime)
	registerVal6 = Engine.CreateModel(arg4, "showBuyImage")
	Engine.SetModelValue(registerVal6, 0.000000)
	if arg2.weaponIndex ~= nil then
		registerVal6 = Engine.ToUpper(Engine.Localize(Engine.GetItemName(arg2.weaponIndex)))
	end
	registerVal7 = Engine.CreateModel(arg4, "weaponName")
	Engine.SetModelValue(registerVal7, registerVal6)
end

registerVal2["createVariantModel"] = __FUNC_8B4BF_
local function __FUNC_8BCE1_(arg0, arg1, arg2)
	local registerVal3 = Engine.CreateModel(arg1.variantListModel, ("mm_variant_" .. arg2))
	local registerVal5 = Engine.CreateModel(registerVal3, "isBuyMore")
	Engine.SetModelValue(registerVal5, false)
	registerVal5 = Engine.CreateModel(registerVal3, "showBuyImage")
	Engine.SetModelValue(registerVal5, 0.000000)
	if arg1.variantList[arg2].isBuyMore == true then
		registerVal5 = Engine.CreateModel(registerVal3, "isBuyMore")
		Engine.SetModelValue(registerVal5, true)
		registerVal5 = Engine.CreateModel(registerVal3, "showBuyImage")
		Engine.SetModelValue(registerVal5, 1.000000)
		registerVal5 = Engine.CreateModel(registerVal3, "sortIndex")
		Engine.SetModelValue(registerVal5, 1.000000)
		registerVal5 = Engine.CreateModel(registerVal3, "variantName")
		Engine.SetModelValue(registerVal5, Engine.Localize("MENU_FILESHARE_BUY_SLOTS"))
		registerVal5 = Engine.CreateModel(registerVal3, "plusImageSrc")
		Engine.SetModelValue(registerVal5, "uie_t7_icon_codpoints")
	else
		local registerVal4 = CoD.CraftUtility.Gunsmith.GetVariantByIndex(arg0, arg1.variantList[arg2].variantIndex)
		DataSources.MediaManagerVariantList.createVariantModel(arg0, arg2, registerVal4, arg1.variantList[arg2].sortIndex, registerVal3)
	end
	return registerVal3
end

registerVal2.getItem = __FUNC_8BCE1_
DataSources["MediaManagerVariantList"] = registerVal2
registerVal2 = {}
local function __FUNC_8C192_(arg0, arg1, arg2)
	arg1.controller = arg0
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.CreateModel(registerVal4, "MediaManager.ShowcaseEmblemList")
	arg1.emblemListModel = registerVal3
	arg1.totalEmblems = 0.000000
	arg1.emblemList = {}
	registerVal3 = CoD.CraftUtility.Emblems.GetSortedEmblemsList(arg0, CoD.perController[arg0].selectedEmblemTabStorageType)
	registerVal4, registerVal5, registerVal6 = pairs(registerVal3)
	for index7,value8 in registerVal4, registerVal5, registerVal6 do
		if value8.isUsed ~= 0.000000 then
			table.insert(arg1.emblemList, value8)
			arg1.totalEmblems = (arg1.totalEmblems + 1.000000)
		end
	end
end

registerVal2.prepare = __FUNC_8C192_
local function __FUNC_8C457_(arg0)
	CoD.FileshareUtility.SetItemsCount(arg0.controller, arg0.totalEmblems)
	return arg0.totalEmblems
end

registerVal2.getCount = __FUNC_8C457_
local function __FUNC_8C530_(arg0, arg1, arg2)
	local registerVal3 = Engine.CreateModel(arg1.emblemListModel, ("mm_emblem_" .. arg2))
	local registerVal6 = Engine.CreateModel(registerVal3, "isBuyMore")
	Engine.SetModelValue(registerVal6, false)
	registerVal6 = Engine.CreateModel(registerVal3, "showBuyImage")
	Engine.SetModelValue(registerVal6, 0.000000)
	registerVal6 = Engine.CreateModel(registerVal3, "emblemTitle")
	Engine.SetModelValue(registerVal6, arg1.emblemList[arg2].emblemTitle)
	registerVal6 = Engine.CreateModel(registerVal3, "emblemName")
	Engine.SetModelValue(registerVal6, arg1.emblemList[arg2].emblemName)
	registerVal6 = Engine.CreateModel(registerVal3, "emblemIndex")
	Engine.SetModelValue(registerVal6, arg1.emblemList[arg2].emblemIndex)
	registerVal6 = Engine.CreateModel(registerVal3, "emblemTextEntry")
	Engine.SetModelValue(registerVal6, arg1.emblemList[arg2].emblemTextEntry)
	registerVal6 = Engine.CreateModel(registerVal3, "subTitle")
	Engine.SetModelValue(registerVal6, arg1.emblemList[arg2].subTitle)
	registerVal6 = Engine.CreateModel(registerVal3, "storageFileType")
	Engine.SetModelValue(registerVal6, CoD.perController[arg0].selectedEmblemTabStorageType)
	registerVal6 = Engine.CreateModel(registerVal3, "isUsed")
	Engine.SetModelValue(registerVal6, arg1.emblemList[arg2].isUsed)
	registerVal6 = Engine.CreateModel(registerVal3, "showBuyImage")
	Engine.SetModelValue(registerVal6, 0.000000)
	registerVal6 = Engine.CreateModel(registerVal3, "readOnly")
	Engine.SetModelValue(registerVal6, arg1.emblemList[arg2].readOnly)
	registerVal6 = Engine.CreateModel(registerVal3, "isBMClassified")
	Engine.SetModelValue(registerVal6, false)
	registerVal6 = Engine.CreateModel(registerVal3, "sortIndex")
	Engine.SetModelValue(registerVal6, arg1.emblemList[arg2].sortIndex)
	registerVal6 = Engine.CreateModel(registerVal3, "hintText")
	Engine.SetModelValue(registerVal6, Engine.Localize("MENU_BUTTON_EMBLEM_SET"))
	registerVal6 = Engine.CreateModel(registerVal3, "authorName")
	Engine.SetModelValue(registerVal6, Engine.GetSelfGamertag(arg0))
	registerVal6 = Engine.CreateModel(registerVal3, "createTime")
	Engine.SetModelValue(registerVal6, arg1.emblemList[arg2].createTime)
	registerVal6 = Engine.CreateModel(registerVal3, "plusImageSrc")
	Engine.SetModelValue(registerVal6, "uie_t7_icon_codpoints")
	return registerVal3
end

registerVal2.getItem = __FUNC_8C530_
DataSources["ShowcaseEmblemList"] = registerVal2
registerVal2 = {}
local function __FUNC_8CC2A_(arg0, arg1, arg2)
	arg1.controller = arg0
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.CreateModel(registerVal4, "MediaManager.EmblemList")
	arg1.emblemListModel = registerVal3
	arg1.totalEmblems = 0.000000
	arg1.emblemList = {}
	{}.isBuyMore = true
	{}.sortIndex = 0.000000
	{}.emblemIndex = 0.000000
	{}.isUsed = 1.000000
	registerVal4 = FileshareCanBuyMoreSlots(arg0)
	if registerVal4 == true then
		table.insert(arg1.emblemList, {})
		arg1.totalEmblems = (arg1.totalEmblems + 1.000000)
	end
	registerVal4 = CoD.CraftUtility.Emblems.GetSortedEmblemsList(arg0, CoD.perController[arg0].selectedEmblemTabStorageType)
	local registerVal5, registerVal6, registerVal7 = pairs(registerVal4)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		if value9.isUsed ~= 0.000000 then
			table.insert(arg1.emblemList, value9)
			arg1.totalEmblems = (arg1.totalEmblems + 1.000000)
		end
	end
end

registerVal2.prepare = __FUNC_8CC2A_
local function __FUNC_8CFA6_(arg0)
	return arg0.totalEmblems
end

registerVal2.getCount = __FUNC_8CFA6_
local function __FUNC_8CFF6_(arg0, arg1, arg2)
	local registerVal3 = Engine.CreateModel(arg1.emblemListModel, ("mm_emblem_" .. arg2))
	if arg1.emblemList[arg2].isBuyMore and arg1.emblemList[arg2].isBuyMore == true then
		local registerVal6 = Engine.CreateModel(registerVal3, "isBuyMore")
		Engine.SetModelValue(registerVal6, true)
		registerVal6 = Engine.CreateModel(registerVal3, "showBuyImage")
		Engine.SetModelValue(registerVal6, 1.000000)
		registerVal6 = Engine.CreateModel(registerVal3, "sortIndex")
		Engine.SetModelValue(registerVal6, 1.000000)
		registerVal6 = Engine.CreateModel(registerVal3, "emblemName")
		Engine.SetModelValue(registerVal6, Engine.Localize("MENU_FILESHARE_BUY_SLOTS"))
		registerVal6 = Engine.CreateModel(registerVal3, "emblemTitle")
		Engine.SetModelValue(registerVal6, Engine.Localize("MENU_FILESHARE_BUY_SLOTS"))
		registerVal6 = Engine.CreateModel(registerVal3, "isUsed")
		Engine.SetModelValue(registerVal6, false)
		registerVal6 = Engine.CreateModel(registerVal3, "plusImageSrc")
		Engine.SetModelValue(registerVal6, "uie_t7_icon_codpoints")
	else
		registerVal6 = Engine.CreateModel(registerVal3, "isBuyMore")
		Engine.SetModelValue(registerVal6, false)
		registerVal6 = Engine.CreateModel(registerVal3, "showBuyImage")
		Engine.SetModelValue(registerVal6, 0.000000)
		registerVal6 = Engine.CreateModel(registerVal3, "emblemTitle")
		Engine.SetModelValue(registerVal6, arg1.emblemList[arg2].emblemTitle)
		registerVal6 = Engine.CreateModel(registerVal3, "emblemName")
		Engine.SetModelValue(registerVal6, arg1.emblemList[arg2].emblemName)
		registerVal6 = Engine.CreateModel(registerVal3, "emblemIndex")
		Engine.SetModelValue(registerVal6, arg1.emblemList[arg2].emblemIndex)
		registerVal6 = Engine.CreateModel(registerVal3, "emblemTextEntry")
		Engine.SetModelValue(registerVal6, arg1.emblemList[arg2].emblemTextEntry)
		registerVal6 = Engine.CreateModel(registerVal3, "subTitle")
		Engine.SetModelValue(registerVal6, arg1.emblemList[arg2].subTitle)
		registerVal6 = Engine.CreateModel(registerVal3, "storageFileType")
		Engine.SetModelValue(registerVal6, CoD.perController[arg0].selectedEmblemTabStorageType)
		registerVal6 = Engine.CreateModel(registerVal3, "isUsed")
		Engine.SetModelValue(registerVal6, arg1.emblemList[arg2].isUsed)
		registerVal6 = Engine.CreateModel(registerVal3, "showBuyImage")
		Engine.SetModelValue(registerVal6, 0.000000)
		registerVal6 = Engine.CreateModel(registerVal3, "readOnly")
		Engine.SetModelValue(registerVal6, arg1.emblemList[arg2].readOnly)
		registerVal6 = Engine.CreateModel(registerVal3, "isBMClassified")
		Engine.SetModelValue(registerVal6, false)
	end
	registerVal6 = Engine.CreateModel(registerVal3, "sortIndex")
	Engine.SetModelValue(registerVal6, arg1.emblemList[arg2].sortIndex)
	registerVal6 = Engine.CreateModel(registerVal3, "hintText")
	Engine.SetModelValue(registerVal6, Engine.Localize("MENU_BUTTON_EMBLEM_SET"))
	registerVal6 = Engine.CreateModel(registerVal3, "authorName")
	Engine.SetModelValue(registerVal6, Engine.GetSelfGamertag(arg0))
	registerVal6 = Engine.CreateModel(registerVal3, "createTime")
	Engine.SetModelValue(registerVal6, arg1.emblemList[arg2].createTime)
	return registerVal3
end

registerVal2.getItem = __FUNC_8CFF6_
DataSources["MediaManagerEmblemList"] = registerVal2
registerVal2 = {}
local function __FUNC_8D8A3_(arg0, arg1, arg2)
	arg1.showDefault = false
	arg1.controller = arg0
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "CustomGamesRoot")
	arg1.rootModel = registerVal3
	registerVal3 = Engine.GetCustomGamesCount(arg0, "")
	arg1.numFiles = registerVal3
	arg1.communityOption = false
	if arg1.showDefault == true then
		arg1.numFiles = (arg1.numFiles + 1.000000)
	else
		registerVal3 = IsMediaManager()
		registerVal3 = FileshareCanBuyMoreSlots(arg0)
		if registerVal3 and registerVal3 == true then
			arg1.numFiles = (arg1.numFiles + 1.000000)
		end
	end
end

registerVal2.prepare = __FUNC_8D8A3_
local function __FUNC_8DAB3_(arg0)
	local registerVal1 = FileshareGetShowcasePublishMode(controller)
	if registerVal1 then
		CoD.FileshareUtility.SetItemsCount(arg0.controller, arg0.numFiles)
	end
	return arg0.numFiles
end

registerVal2.getCount = __FUNC_8DAB3_
local function __FUNC_8DBC5_(arg0, arg1, arg2)
	local registerVal3 = Engine.CreateModel(arg1.rootModel, ("mm_customgames_" .. arg2))
	local registerVal5 = Engine.CreateModel(registerVal3, "uiIndex")
	Engine.SetModelValue(registerVal5, arg2)
	if arg1.showDefault == true and arg2 == 1.000000 then
		local registerVal4 = Engine.GetGametypesBase()
		registerVal5 = GetCurrentUIGameType(arg0)
		local registerVal7, registerVal8, registerVal9 = pairs(registerVal4)
		for index10,value11 in registerVal7, registerVal8, registerVal9 do
			if value11.category == "standard" and value11.gametype == registerVal5 then
				local registerVal12 = Engine.Localize(value11.name)
			else
			end
		end
		registerVal8 = Engine.CreateModel(registerVal3, "isBuyMore")
		Engine.SetModelValue(registerVal8, false)
		registerVal8 = Engine.CreateModel(registerVal3, "showBuyImage")
		Engine.SetModelValue(registerVal8, 0.000000)
		registerVal8 = Engine.CreateModel(registerVal3, "text")
		Engine.SetModelValue(registerVal8, registerVal12)
		registerVal8 = Engine.CreateModel(registerVal3, "inUse")
		Engine.SetModelValue(registerVal8, true)
		registerVal8 = Engine.CreateModel(registerVal3, "isOfficial")
		Engine.SetModelValue(registerVal8, true)
	else
		registerVal4 = IsMediaManager()
		registerVal4 = FileshareCanBuyMoreSlots(arg0)
		if registerVal4 and registerVal4 == true and arg2 == 1.000000 then
			registerVal5 = Engine.CreateModel(registerVal3, "isBuyMore")
			Engine.SetModelValue(registerVal5, true)
			registerVal5 = Engine.CreateModel(registerVal3, "showBuyImage")
			Engine.SetModelValue(registerVal5, 1.000000)
			registerVal5 = Engine.CreateModel(registerVal3, "name")
			Engine.SetModelValue(registerVal5, Engine.Localize("MENU_FILESHARE_BUY_SLOTS"))
			registerVal5 = Engine.CreateModel(registerVal3, "gameName")
			Engine.SetModelValue(registerVal5, Engine.Localize("MENU_FILESHARE_BUY_SLOTS"))
			registerVal5 = Engine.CreateModel(registerVal3, "text")
			Engine.SetModelValue(registerVal5, Engine.Localize("MENU_FILESHARE_BUY_SLOTS"))
			registerVal5 = Engine.CreateModel(registerVal3, "gameDescription")
			Engine.SetModelValue(registerVal5, Engine.Localize("MENU_FILESHARE_BUY_SLOTS"))
			registerVal5 = Engine.CreateModel(registerVal3, "plusImageSrc")
			Engine.SetModelValue(registerVal5, "uie_t7_icon_codpoints")
		else
			if arg1.showDefault == true then
			else
				registerVal5 = IsMediaManager()
				registerVal5 = FileshareCanBuyMoreSlots(arg0)
				if registerVal5 and registerVal5 == true then
				end
			end
			registerVal5 = Engine.GetCustomGameData(arg0, (arg2 - 2.000000), "")
			if registerVal5.isOfficial then
				registerVal8 = Engine.Localize(registerVal5.gameName)
				registerVal8 = Engine.Localize(registerVal5.gameDescription)
			end
			registerVal9 = Engine.CreateModel(registerVal3, "isBuyMore")
			Engine.SetModelValue(registerVal9, false)
			registerVal9 = Engine.CreateModel(registerVal3, "showBuyImage")
			Engine.SetModelValue(registerVal9, 0.000000)
			registerVal9 = Engine.CreateModel(registerVal3, "name")
			Engine.SetModelValue(registerVal9, registerVal8)
			registerVal9 = Engine.CreateModel(registerVal3, "gameName")
			Engine.SetModelValue(registerVal9, registerVal8)
			registerVal9 = Engine.CreateModel(registerVal3, "text")
			Engine.SetModelValue(registerVal9, registerVal8)
			registerVal9 = Engine.CreateModel(registerVal3, "gameDescription")
			Engine.SetModelValue(registerVal9, registerVal8)
			registerVal9 = Engine.CreateModel(registerVal3, "slot")
			Engine.SetModelValue(registerVal9, registerVal5.slot)
			registerVal9 = Engine.CreateModel(registerVal3, "index")
			Engine.SetModelValue(registerVal9, registerVal5.index)
			registerVal9 = Engine.CreateModel(registerVal3, "inUse")
			Engine.SetModelValue(registerVal9, registerVal5.inUse)
			registerVal9 = Engine.CreateModel(registerVal3, "isOfficial")
			Engine.SetModelValue(registerVal9, registerVal5.isOfficial)
			registerVal9 = Engine.CreateModel(registerVal3, "createTime")
			Engine.SetModelValue(registerVal9, registerVal5.createTime)
			registerVal9 = Engine.CreateModel(registerVal3, "gameType")
			Engine.SetModelValue(registerVal9, registerVal5.gameType)
			registerVal9 = Engine.CreateModel(registerVal3, "gameTypeString")
			Engine.SetModelValue(registerVal9, registerVal5.gameTypeString)
			registerVal9 = Engine.CreateModel(registerVal3, "image")
			Engine.SetModelValue(registerVal9, Engine.StructTableLookupString(CoDShared.gametypesStructTable, "name", registerVal5.gameType, "image"))
			registerVal9 = Engine.CreateModel(registerVal3, "description")
			Engine.SetModelValue(registerVal9, Engine.StructTableLookupString(CoDShared.gametypesStructTable, "name", registerVal5.gameType, "description"))
		end
	end
	return registerVal3
end

registerVal2.getItem = __FUNC_8DBC5_
DataSources["MediaManagerCustomGamesList"] = registerVal2
registerVal2 = {}
local function __FUNC_8E7C0_(arg0, arg1, arg2)
	arg1.controller = arg0
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "MediaManagerTheaterFilesRoot")
	arg1.rootModel = registerVal3
	arg1.numElements = (arg1.vCount * arg1.hCount)
	arg1.numFiles = 0.000000
	arg1.fileshareData = {}
	for index3=1.000000, arg1.numElements, 1.000000 do
		arg1.fileshareData[index3] = {}
		local registerVal8 = Engine.CreateModel(arg1.rootModel, ("fileshareData_" .. index3))
		arg1.fileshareData[index3].elementModel = registerVal8
		local registerVal7, registerVal8, registerVal9 = ipairs(CoD.FileshareUtility.FileProperties)
		for index10,value11 in registerVal7, registerVal8, registerVal9 do
			Engine.CreateModel(arg1.fileshareData[index3].elementModel, value11)
		end
		CoD.FileshareUtility.ResetFileshareSummary(arg1.fileshareData[index3].elementModel)
	end
	Engine.FileshareStartup(arg0)
	registerVal3 = Engine.GetXUID64(arg0)
	CoD.FileshareUtility.FetchContentForUser(arg0, registerVal3)
end

registerVal2.prepare = __FUNC_8E7C0_
local function __FUNC_8EBA4_(arg0)
	local registerVal2 = CoD.FileshareUtility.GetCurrentCategory()
	local registerVal3, registerVal4 = CoD.FileshareUtility.GetCurrentFilter()
	if arg0.numElements == nil or registerVal2 == nil then
	else
		local registerVal6 = Engine.FileshareIsReady(arg0.controller)
		if not registerVal6 then
			if not arg0.refreshElement then
				local function __FUNC_8EEF7_()
					local registerVal0 = Engine.FileshareIsReady(arg0.controller)
					if registerVal0 then
						arg0:updateDataSource()
						arg0.refreshElement:close()
						arg0.refreshElement = nil
						CoD.FileshareUtility.SetFileshareReady(1.000000)
					end
				end

				registerVal6 = LUI.UITimer.newElementTimer(500.000000, false, __FUNC_8EEF7_)
				arg0.refreshElement = registerVal6
				arg0:addElement(arg0.refreshElement)
			end
		end
	end
	if true == true then
		arg0.numFiles = 0.000000
	else
		registerVal6 = Engine.FileshareGetSlotCount(arg0.controller, registerVal2, registerVal3, registerVal4)
		arg0.numFiles = registerVal6
		registerVal6 = FileshareCanBuyMoreSlots(arg0.controller)
		if registerVal6 == true then
			arg0.numFiles = (arg0.numFiles + 1.000000)
		end
	end
	CoD.FileshareUtility.SetItemsCount(arg0.controller, arg0.numFiles)
	return arg0.numFiles
end

registerVal2.getCount = __FUNC_8EBA4_
local function __FUNC_8F043_(arg0, arg1, arg2)
	local registerVal6 = FileshareCanBuyMoreSlots(arg0)
	if registerVal6 == true then
	end
	local registerVal8 = Engine.CreateModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "uiModelIndex")
	Engine.SetModelValue(registerVal8, (((arg2 - 1.000000) % arg1.numElements) + 1.000000))
	registerVal8 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "codeIndex")
	Engine.SetModelValue(registerVal8, ((arg2 - 1.000000) - 1.000000))
	registerVal8 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "totalItems")
	Engine.SetModelValue(registerVal8, arg1.numFiles)
	registerVal8 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "fileID")
	Engine.SetModelValue(registerVal8, nil)
	local registerVal7 = FileshareCanBuyMoreSlots(arg0)
	if registerVal7 == true and arg2 == 1.000000 then
		registerVal8 = Engine.CreateModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "isBuyMore")
		Engine.SetModelValue(registerVal8, true)
		registerVal8 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "showPlusImage")
		Engine.SetModelValue(registerVal8, 1.000000)
		registerVal8 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "fileName")
		Engine.SetModelValue(registerVal8, Engine.Localize("MENU_FILESHARE_BUY_SLOTS"))
		registerVal8 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "plusImageSrc")
		Engine.SetModelValue(registerVal8, "uie_t7_icon_codpoints")
	else
		registerVal8 = Engine.CreateModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "isBuyMore")
		Engine.SetModelValue(registerVal8, false)
		registerVal8 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, "showPlusImage")
		Engine.SetModelValue(registerVal8, 0.000000)
		registerVal7 = CoD.FileshareUtility.GetCurrentCategory()
		registerVal8 = CoD.FileshareUtility.GetIsCommunityMode(arg1.controller)
		local registerVal9, registerVal10 = CoD.FileshareUtility.GetCurrentFilter()
		local registerVal11 = Engine.FileshareGetSlotData(arg1.controller, registerVal7, registerVal9, registerVal10, ((arg2 - 1.000000) - 1.000000))
		CoD.FileshareUtility.SetCategoryCurrentPage(arg0, registerVal7, ((arg2 - 1.000000) - 1.000000))
		local registerVal12, registerVal13, registerVal14 = ipairs(CoD.FileshareUtility.FileProperties)
		for index15,value16 in registerVal12, registerVal13, registerVal14 do
			if registerVal11[value16] ~= nil then
				local registerVal17 = Engine.GetModel(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel, value16)
				Engine.SetModelValue(registerVal17, registerVal11[value16])
			end
		end
		CoD.FileshareUtility.SetupDefaultNameAndDescription(arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel)
		if registerVal7 ~= "screenshot_private" and registerVal7 ~= "screenshot" and registerVal7 == "clip_private" or registerVal7 == "clip" then
			Engine.AddThumbnail(arg0, Enum.ScreenshotViewType.UI_SCREENSHOT_TYPE_THUMBNAIL, registerVal11.fileId, registerVal11.fileSummarySize)
		end
	end
	return arg1.fileshareData[(((arg2 - 1.000000) % arg1.numElements) + 1.000000)].elementModel
end

registerVal2.getItem = __FUNC_8F043_
DataSources["MediaManagerTheaterFilesList"] = registerVal2
registerVal2 = {}
local function __FUNC_8F8B5_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "MediaManager")
	return registerVal1
end

registerVal2.getModel = __FUNC_8F8B5_
DataSources["MediaManager"] = registerVal2
registerVal2 = {}
local function __FUNC_8F963_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "MediaManagerSelectedPaintjob")
	return registerVal1
end

registerVal2.getModel = __FUNC_8F963_
DataSources["MediaManagerSelectedPaintjob"] = registerVal2
registerVal2 = {}
local function __FUNC_8FA2A_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "MediaManagerSelectedVariant")
	return registerVal1
end

registerVal2.getModel = __FUNC_8FA2A_
DataSources["MediaManagerSelectedVariant"] = registerVal2
registerVal2 = {}
local function __FUNC_8FAF1_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "MediaManagerSelectedEmblem")
	return registerVal1
end

registerVal2.getModel = __FUNC_8FAF1_
DataSources["MediaManagerSelectedEmblem"] = registerVal2
registerVal2 = {}
local function __FUNC_8FBB8_(arg0, arg1, arg2)
	local function __FUNC_901FD_(arg0, arg1, arg2, arg3, arg4)
		local registerVal5 = GoBack(arg0, arg2)
		OpenPurchaseExtraSlotsOverlay(arg0, arg2, registerVal5)
	end

	local registerVal5 = MediaManagerSlotsAvailable(arg0, CoD.FileshareUtility.GetCurrentCategory())
	if registerVal5 == false then
		registerVal5 = CanShowMediaManager()
		if registerVal5 then
			local registerVal7 = {}
			registerVal7.displayText = "MENU_MEDIA_MANAGER"
			registerVal7.displayImage = ""
			registerVal7.displayDesc = "MENU_ALLOW_DOWNLOAD_DESC"
			registerVal7.action = GoBackAndOpenMediaManagerOnParent
			table.insert({}, registerVal7)
		end
		registerVal5 = FileshareCanBuyMoreSlots(arg0)
		if registerVal5 == true then
			registerVal7 = {}
			registerVal7.displayText = "MENU_FILESHARE_BUY_SLOTS"
			registerVal7.displayImage = ""
			registerVal7.displayDesc = "MENU_FILESHARE_DOWNLOAD_DESC"
			registerVal7.action = __FUNC_901FD_
			registerVal7.param = "MediaManager"
			table.insert({}, registerVal7)
		end
	end
	registerVal7 = Engine.GetGlobalModel()
	local registerVal6 = Engine.CreateModel(registerVal7, "FileshareSlotsFullButtonList")
	registerVal5 = Engine.CreateModel(registerVal6, "list")
	arg1.optionModels = {}
	registerVal6, registerVal7, registerVal8 = ipairs({})
	for index9,value10 in registerVal6, registerVal7, registerVal8 do
		local registerVal12 = Engine.CreateModel(registerVal5, ("mm_buttonModel_" .. index9))
		arg1.optionModels[index9] = registerVal12
		registerVal12 = Engine.CreateModel(arg1.optionModels[index9], "displayText")
		Engine.SetModelValue(registerVal12, Engine.ToUpper(Engine.Localize(value10.displayText)))
		registerVal12 = Engine.CreateModel(arg1.optionModels[index9], "displayImage")
		Engine.SetModelValue(registerVal12, value10.displayImage)
		registerVal12 = Engine.CreateModel(arg1.optionModels[index9], "hintText")
		Engine.SetModelValue(registerVal12, Engine.Localize(value10.displayDesc))
		registerVal12 = Engine.CreateModel(arg1.optionModels[index9], "action")
		Engine.SetModelValue(registerVal12, value10.action)
		registerVal12 = Engine.CreateModel(arg1.optionModels[index9], "param")
		Engine.SetModelValue(registerVal12, value10.param)
	end
end

registerVal2.prepare = __FUNC_8FBB8_
local function __FUNC_90283_(arg0)
	return #arg0.optionModels
end

registerVal2.getCount = __FUNC_90283_
local function __FUNC_902D6_(arg0, arg1, arg2)
	return arg1.optionModels[arg2]
end

registerVal2.getItem = __FUNC_902D6_
DataSources["MediaManagerSlotsFullButtonList"] = registerVal2
registerVal2 = {}
local function __FUNC_90332_(arg0, arg1, arg2)
	arg1.controller = arg0
	local registerVal3 = CoD.GetCustomization(arg0, "weapon_index")
	if not registerVal3 then
		return 
	end
	local registerVal5 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal5, "Paintshop.PaintjobList")
	arg1.paintjobListModel = registerVal4
	registerVal4 = CoD.CraftUtility.Paintjobs.GetTotalUsedPaintjobs()
	registerVal5 = CoD.CraftUtility.Paintjobs.GetTotalWeaponPaintjobs(registerVal3)
	local registerVal6 = CoD.CraftUtility.Paintjobs.GetTotalAllowedPaintjobs(arg0)
	if registerVal4 == registerVal6 then
		arg1.totalPaintjobs = registerVal5
	else
		arg1.totalPaintjobs = (registerVal5 + 1.000000)
	end
	arg1.paintjobList = {}
	local registerVal7 = CoD.CraftUtility.Paintjobs.GetSortedWeaponPaintjobList(registerVal3)
	arg1.paintjobList = registerVal7
end

registerVal2.prepare = __FUNC_90332_
local function __FUNC_9064F_(arg0)
	return arg0.totalPaintjobs
end

registerVal2.getCount = __FUNC_9064F_
local function __FUNC_906A0_(arg0, arg1, arg2)
	local registerVal3 = Engine.CreateModel(arg1.paintjobListModel, ("paintjob_" .. arg2))
	local registerVal4 = CoD.GetCustomization(arg0, "weapon_index")
	if arg1.paintjobList[arg2] then
		local registerVal6 = CoD.CraftUtility.Paintjobs.IsPaintjobIndexOccupied(arg1.paintjobList[arg2].paintjobSlot, arg1.paintjobList[arg2].paintjobIndex)
		if registerVal6 then
			local registerVal7 = Engine.CreateModel(registerVal3, "paintjobName")
			Engine.SetModelValue(registerVal7, arg1.paintjobList[arg2].paintjobName)
			registerVal7 = Engine.CreateModel(registerVal3, "paintjobTextEntry")
			Engine.SetModelValue(registerVal7, arg1.paintjobList[arg2].paintjobName)
		else
			registerVal7 = Engine.CreateModel(registerVal3, "paintjobTextEntry")
			Engine.SetModelValue(registerVal7, "Paintjob")
			registerVal7 = Engine.CreateModel(registerVal3, "paintjobName")
			Engine.SetModelValue(registerVal7, "")
		end
		if arg1.paintjobList[arg2].readOnly ~= nil then
			registerVal7 = Engine.CreateModel(registerVal3, "readOnly")
			Engine.SetModelValue(registerVal7, arg1.paintjobList[arg2].readOnly)
		end
		registerVal7 = Engine.CreateModel(registerVal3, "sortIndex")
		Engine.SetModelValue(registerVal7, arg1.paintjobList[arg2].sortIndex)
		registerVal7 = Engine.CreateModel(registerVal3, "paintjobSlot")
		Engine.SetModelValue(registerVal7, arg1.paintjobList[arg2].paintjobSlot)
		registerVal7 = Engine.CreateModel(registerVal3, "weaponIndex")
		Engine.SetModelValue(registerVal7, registerVal4)
		registerVal7 = Engine.CreateModel(registerVal3, "paintjobIndex")
		Engine.SetModelValue(registerVal7, arg1.paintjobList[arg2].paintjobIndex)
		registerVal7 = Engine.CreateModel(registerVal3, "paintjobSlotAndIndex")
		Engine.SetModelValue(registerVal7, (arg1.paintjobList[arg2].paintjobSlot .. " " .. arg1.paintjobList[arg2].paintjobIndex))
		return registerVal3
	end
end

registerVal2.getItem = __FUNC_906A0_
DataSources["PaintjobList"] = registerVal2
registerVal2 = {}
local function __FUNC_90BD5_(arg0, arg1, arg2)
	arg1.controller = arg0
	arg1.emblemList = {}
	local registerVal5 = Engine.GetModelForController(arg0)
	local registerVal4 = Engine.CreateModel(registerVal5, "Emblem.EmblemList")
	arg1.emblemListModel = registerVal4
	registerVal4 = CoD.CraftUtility.Emblems.GetTotalUsedEmblems(arg0, CoD.perController[arg0].selectedEmblemTabStorageType)
	registerVal5 = CoD.CraftUtility.Emblems.GetTotalAllowedEmblems(arg0, CoD.perController[arg0].selectedEmblemTabStorageType)
	local registerVal6 = SelectingGroupEmblem(arg0)
	if CoD.perController[arg0].selectedEmblemTabStorageType ~= Enum.StorageFileType.STORAGE_DEFAULT_EMBLEMS and CoD.perController[arg0].selectedEmblemTabStorageType == Enum.StorageFileType.STORAGE_EMBLEMS_LOOT or registerVal6 then
		arg1.totalEmblems = registerVal4
	else
		arg1.totalEmblems = (registerVal4 + 1.000000)
	end
	registerVal6 = CoD.CraftUtility.Emblems.GetSortedEmblemsList(arg0, CoD.perController[arg0].selectedEmblemTabStorageType)
	arg1.emblemList = registerVal6
	if #arg1.emblemList < arg1.totalEmblems then
		arg1.totalEmblems = #arg1.emblemList
	end
end

registerVal2.prepare = __FUNC_90BD5_
local function __FUNC_90FDB_(arg0)
	return arg0.totalEmblems
end

registerVal2.getCount = __FUNC_90FDB_
local function __FUNC_9102A_(arg0, arg1, arg2)
	local registerVal3 = Engine.CreateModel(arg1.emblemListModel, ("emblem_" .. arg2))
	local registerVal4 = CoD.CraftUtility.Emblems.GetTotalAllowedEmblems(arg0, CoD.perController[arg0].selectedEmblemTabStorageType)
	local function __FUNC_91B57_(arg1)
		local registerVal1 = CoD.CraftUtility.Emblems.IsEmblemIndexOccupied(arg1.emblemIndex)
		if registerVal1 then
			arg1.emblemTextEntry = arg1.emblemName
			if CoD.perController[arg0].selectedEmblemTabStorageType ~= Enum.StorageFileType.STORAGE_EMBLEMS then
				arg1.emblemTextEntry = "Emblem"
			end
			arg1.emblemTitle = arg1.emblemName
			arg1.subTitle = ""
		else
			registerVal1 = Engine.Localize("MENU_EMBLEM_CREATE_NEW")
			arg1.emblemName = registerVal1
			registerVal1 = Engine.Localize("MENU_NEW")
			arg1.emblemTitle = registerVal1
			arg1.emblemTextEntry = "Emblem"
			registerVal1 = Engine.Localize("MENU_EMBLEM_NEW_SUBTITLE")
			arg1.subTitle = registerVal1
		end
	end

	__FUNC_91B57_(arg1.emblemList[arg2])
	local registerVal8 = Engine.CreateModel(registerVal3, "isNonClickableEmblem")
	Engine.SetModelValue(registerVal8, 0.000000)
	if #arg1.emblemList == (registerVal4 + 1.000000) and arg2 == 1.000000 then
		registerVal8 = Engine.CreateModel(registerVal3, "isNonClickableEmblem")
		Engine.SetModelValue(registerVal8, 1.000000)
		local registerVal7 = Engine.Localize("MENU_NEW")
		arg1.emblemList[arg2].emblemTitle = registerVal7
		registerVal7 = Engine.Localize("MENU_EMBLEM_CREATE_NEW")
		arg1.emblemList[arg2].emblemName = registerVal7
		arg1.emblemList[arg2].emblemTextEntry = "Emblem"
		registerVal7 = Engine.Localize("MENU_EMBLEM_FULL_SUBTITLE")
		arg1.emblemList[arg2].subTitle = registerVal7
	end
	registerVal7 = Engine.CreateModel(registerVal3, "rarityType")
	if CoD.perController[arg0].selectedEmblemTabStorageType == Enum.StorageFileType.STORAGE_EMBLEMS_LOOT then
		registerVal8 = CoD.BlackMarketUtility.GetLootEmblemIDName(arg1.emblemList[arg2].emblemIndex)
		local registerVal9 = CoD.BlackMarketUtility.IsItemLocked(arg0, registerVal8)
		local registerVal11 = Engine.CreateModel(registerVal3, "isBMClassified")
		Engine.SetModelValue(registerVal11, registerVal9)
		if registerVal9 then
			local registerVal10 = Engine.Localize("MPUI_BLACKMARKET_ITEM_CLASSIFIED_DESC", "MENU_EMBLEM")
			arg1.emblemList[arg2].subTitle = registerVal10
			registerVal10 = CoD.BlackMarketUtility.ClassifiedName(true)
			arg1.emblemList[arg2].emblemName = registerVal10
			registerVal10 = CoD.BlackMarketUtility.ClassifiedName(true)
			arg1.emblemList[arg2].emblemTitle = registerVal10
		end
		registerVal10 = CoD.BlackMarketUtility.GetItemQuantity(arg0, registerVal8)
		local registerVal12 = Engine.CreateModel(registerVal7, "duplicateCount")
		Engine.SetModelValue(registerVal12, registerVal10)
	else
		registerVal9 = Engine.CreateModel(registerVal3, "isBMClassified")
		Engine.SetModelValue(registerVal9, false)
		registerVal9 = Engine.CreateModel(registerVal7, "duplicateCount")
		Engine.SetModelValue(registerVal9, 0.000000)
	end
	registerVal9 = Engine.CreateModel(registerVal3, "emblemTitle")
	Engine.SetModelValue(registerVal9, arg1.emblemList[arg2].emblemTitle)
	registerVal9 = Engine.CreateModel(registerVal3, "emblemName")
	Engine.SetModelValue(registerVal9, arg1.emblemList[arg2].emblemName)
	registerVal9 = Engine.CreateModel(registerVal3, "emblemTextEntry")
	Engine.SetModelValue(registerVal9, arg1.emblemList[arg2].emblemTextEntry)
	registerVal9 = Engine.CreateModel(registerVal3, "subTitle")
	Engine.SetModelValue(registerVal9, arg1.emblemList[arg2].subTitle)
	registerVal9 = Engine.CreateModel(registerVal3, "sortIndex")
	Engine.SetModelValue(registerVal9, arg1.emblemList[arg2].sortIndex)
	registerVal9 = Engine.CreateModel(registerVal3, "emblemIndex")
	Engine.SetModelValue(registerVal9, arg1.emblemList[arg2].emblemIndex)
	registerVal9 = Engine.CreateModel(registerVal3, "isUsed")
	Engine.SetModelValue(registerVal9, arg1.emblemList[arg2].isUsed)
	registerVal9 = Engine.CreateModel(registerVal3, "hintText")
	Engine.SetModelValue(registerVal9, Engine.Localize("MENU_BUTTON_EMBLEM_SET"))
	registerVal9 = Engine.CreateModel(registerVal3, "storageFileType")
	Engine.SetModelValue(registerVal9, CoD.perController[arg0].selectedEmblemTabStorageType)
	registerVal8 = Engine.LastInput_Gamepad()
	if CoD.isPC and not registerVal8 then
		registerVal9 = Engine.CreateModel(registerVal3, "hintText")
		Engine.SetModelValue(registerVal9, Engine.Localize("PLATFORM_KEY_EMBLEM_SET"))
	end
	if arg1.emblemList[arg2].readOnly ~= nil then
		registerVal9 = Engine.CreateModel(registerVal3, "readOnly")
		Engine.SetModelValue(registerVal9, arg1.emblemList[arg2].readOnly)
	end
	return registerVal3
end

registerVal2.getItem = __FUNC_9102A_
local function __FUNC_91E5D_(arg0)
	if arg0.emblemListModel then
		Engine.UnsubscribeAndFreeModel(arg0.emblemListModel)
		arg0.emblemListModel = nil
	end
end

registerVal2.cleanup = __FUNC_91E5D_
DataSources["EmblemsList"] = registerVal2
registerVal2 = {}
local function __FUNC_91F0B_(arg0)
	local registerVal1 = Engine.GetChallengeInfoForImages(arg0, nil, Enum.eModes.MODE_CAMPAIGN)
	local registerVal5, registerVal6, registerVal7 = ipairs(registerVal1)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		if not value9.isMastery then
			if not {}[value9.challengeCategory] then
				{}[value9.challengeCategory] = {}
				{}[value9.challengeCategory].numComplete = 0.000000
				{}[value9.challengeCategory].numTotal = 0.000000
			end
			{}[value9.challengeCategory].numTotal = ({}[value9.challengeCategory].numTotal + 1.000000)
			if not value9.isLocked then
				{}[value9.challengeCategory].numComplete = ({}[value9.challengeCategory].numComplete + 1.000000)
			end
		end
	end
	registerVal7, registerVal8, registerVal9 = pairs({})
	for index10,value11 in registerVal7, registerVal8, registerVal9 do
	end
	{}.CP = {}
	{}.CP.numComplete = (0.000000 + {}[index10].numComplete)
	{}.CP.numTotal = (0.000000 + {}[index10].numTotal)
	registerVal8 = Engine.GetModelForController(arg0)
	registerVal7 = Engine.CreateModel(registerVal8, "ChallengesCPCategoryStats")
	registerVal8, registerVal9, registerVal10 = pairs({})
	for index11,value12 in registerVal8, registerVal9, registerVal10 do
		if value12.numTotal ~= 0.000000 then
		end
		local registerVal15 = Engine.CreateModel(registerVal7, index11)
		Engine.SetModelValue(registerVal15, (value12.numComplete / value12.numTotal))
	end
	return registerVal7
end

registerVal2["init"] = __FUNC_91F0B_
local function __FUNC_922FE_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.GetModel(registerVal2, "ChallengesCPCategoryStats")
	if registerVal1 == nil then
		registerVal2 = DataSources.ChallengesCPCategoryStats.init(arg0)
	end
	return registerVal2
end

registerVal2.getModel = __FUNC_922FE_
DataSources["ChallengesCPCategoryStats"] = registerVal2
registerVal2 = {}
local function __FUNC_92414_(arg0)
	local registerVal1 = Engine.GetChallengeInfoForImages(arg0, nil, Enum.eModes.MODE_MULTIPLAYER)
	local registerVal6, registerVal7, registerVal8 = ipairs(registerVal1)
	for index9,value10 in registerVal6, registerVal7, registerVal8 do
		if not value10.isMastery then
			if not {}[value10.challengeCategory] then
				{}[value10.challengeCategory] = {}
				{}[value10.challengeCategory].numComplete = 0.000000
				{}[value10.challengeCategory].numTotal = 0.000000
			end
			{}[value10.challengeCategory].numTotal = ({}[value10.challengeCategory].numTotal + 1.000000)
			if not value10.isLocked then
				{}[value10.challengeCategory].numComplete = ({}[value10.challengeCategory].numComplete + 1.000000)
			end
		end
		if value10.challengeCategory == "onehundredpercent" then
		end
	end
	{}.MP = {}
	{}.MP.numComplete = 0.000000
	{}.MP.numTotal = 0.000000
	registerVal6, registerVal7, registerVal8 = pairs(CoD.ChallengesUtility.ChallengeCategoryTable.mp)
	for index9,value10 in registerVal6, registerVal7, registerVal8 do
		local registerVal11 = type(value10)
		if registerVal11 == "table" then
			{}[index9] = {}
			{}[index9].numComplete = 0.000000
			{}[index9].numTotal = 0.000000
			registerVal11, registerVal12, registerVal13 = ipairs(value10)
			for index14,value15 in registerVal11, registerVal12, registerVal13 do
				if {}[value15] then
					{}[index9].numComplete = ({}[index9].numComplete + {}[value15].numComplete)
					{}[index9].numTotal = ({}[index9].numTotal + {}[value15].numTotal)
				end
			end
			{}.MP.numComplete = ({}.MP.numComplete + {}[index9].numComplete)
			{}.MP.numTotal = ({}.MP.numTotal + {}[index9].numTotal)
		end
	end
	registerVal7 = Engine.GetModelForController(arg0)
	registerVal6 = Engine.CreateModel(registerVal7, "ChallengesMPCategoryStats")
	registerVal7, registerVal8, registerVal9 = pairs({})
	for index10,value11 in registerVal7, registerVal8, registerVal9 do
		if value11.numTotal ~= 0.000000 then
		end
		local registerVal14 = Engine.CreateModel(registerVal6, index10)
		Engine.SetModelValue(registerVal14, (value11.numComplete / value11.numTotal))
	end
	if value10.imageID then
		if {}.MP.numComplete == {}.MP.numTotal then
		end
		registerVal8 = DataSources.OneHundredPercentCallingCard.getModel(arg0)
		local registerVal10 = Engine.GetModel(registerVal8, "iconId")
		Engine.SetModelValue(registerVal10, value10.imageID)
		registerVal10 = Engine.GetModel(registerVal8, "isLocked")
		Engine.SetModelValue(registerVal10, true)
	end
	return registerVal6
end

registerVal2["init"] = __FUNC_92414_
local function __FUNC_92B61_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.GetModel(registerVal2, "ChallengesMPCategoryStats")
	if registerVal1 == nil then
		registerVal2 = DataSources.ChallengesMPCategoryStats.init(arg0)
	end
	return registerVal2
end

registerVal2.getModel = __FUNC_92B61_
DataSources["ChallengesMPCategoryStats"] = registerVal2
registerVal2 = {}
local function __FUNC_92C78_(arg0)
	local registerVal1 = Engine.GetChallengeInfoForImages(arg0, nil, Enum.eModes.MODE_ZOMBIES)
	local registerVal5, registerVal6, registerVal7 = ipairs(registerVal1)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		if not value9.isMastery and value9.challengeCategory ~= "darkops" then
			if not {}[value9.challengeCategory] then
				{}[value9.challengeCategory] = {}
				{}[value9.challengeCategory].numComplete = 0.000000
				{}[value9.challengeCategory].numTotal = 0.000000
			end
			{}[value9.challengeCategory].numTotal = ({}[value9.challengeCategory].numTotal + 1.000000)
			if not value9.isLocked then
				{}[value9.challengeCategory].numComplete = ({}[value9.challengeCategory].numComplete + 1.000000)
			end
		end
	end
	registerVal7, registerVal8, registerVal9 = pairs({})
	for index10,value11 in registerVal7, registerVal8, registerVal9 do
	end
	{}.ZM = {}
	{}.ZM.numComplete = (0.000000 + {}[index10].numComplete)
	{}.ZM.numTotal = (0.000000 + {}[index10].numTotal)
	registerVal8 = Engine.GetModelForController(arg0)
	registerVal7 = Engine.CreateModel(registerVal8, "ChallengesZMCategoryStats")
	registerVal8, registerVal9, registerVal10 = pairs({})
	for index11,value12 in registerVal8, registerVal9, registerVal10 do
		if value12.numTotal ~= 0.000000 then
		end
		local registerVal15 = Engine.CreateModel(registerVal7, index11)
		Engine.SetModelValue(registerVal15, (value12.numComplete / value12.numTotal))
	end
	return registerVal7
end

registerVal2["init"] = __FUNC_92C78_
local function __FUNC_93086_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.GetModel(registerVal2, "ChallengesZMCategoryStats")
	if registerVal1 == nil then
		registerVal2 = DataSources.ChallengesZMCategoryStats.init(arg0)
	end
	return registerVal2
end

registerVal2.getModel = __FUNC_93086_
DataSources["ChallengesZMCategoryStats"] = registerVal2
registerVal2 = {}
local function __FUNC_9319C_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "ChallengesCPNearCompletion")
	registerVal2 = Engine.CreateModel(registerVal1, "title")
	local registerVal3 = Engine.CreateModel(registerVal1, "description")
	local registerVal4 = Engine.CreateModel(registerVal1, "iconId")
	local registerVal5 = Engine.CreateModel(registerVal1, "statPercent")
	local registerVal6 = Engine.CreateModel(registerVal1, "statFractionText")
	local registerVal8 = Engine.GetModelForController(arg0)
	local registerVal7 = Engine.CreateModel(registerVal8, "noNearCompleteCP")
	SetGlobalModelValue("challengeGameMode", "cp")
	DataSources.ChallengesNearCompletionList.prepare(arg0, {}, nil)
	if {}.ChallengesNearCompletionList[1.000000] == nil then
		Engine.SetModelValue(registerVal7, true)
	else
		Engine.SetModelValue(registerVal2, Engine.GetModelValue(Engine.GetModel({}.ChallengesNearCompletionList[1.000000].model, "title")))
		Engine.SetModelValue(registerVal3, Engine.GetModelValue(Engine.GetModel({}.ChallengesNearCompletionList[1.000000].model, "description")))
		Engine.SetModelValue(registerVal4, Engine.GetModelValue(Engine.GetModel({}.ChallengesNearCompletionList[1.000000].model, "iconId")))
		Engine.SetModelValue(registerVal5, Engine.GetModelValue(Engine.GetModel({}.ChallengesNearCompletionList[1.000000].model, "statPercent")))
		Engine.SetModelValue(registerVal6, Engine.GetModelValue(Engine.GetModel({}.ChallengesNearCompletionList[1.000000].model, "statFractionText")))
	end
	return registerVal1
end

registerVal2["init"] = __FUNC_9319C_
local function __FUNC_93692_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.GetModel(registerVal2, "ChallengesCPNearCompletion")
	if registerVal1 == nil then
		registerVal2 = DataSources.ChallengesCPNearCompletion.init(arg0)
	end
	return registerVal2
end

registerVal2.getModel = __FUNC_93692_
DataSources["ChallengesCPNearCompletion"] = registerVal2
registerVal2 = {}
local function __FUNC_937A9_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "ChallengesMPNearCompletion")
	registerVal2 = Engine.CreateModel(registerVal1, "title")
	local registerVal3 = Engine.CreateModel(registerVal1, "description")
	local registerVal4 = Engine.CreateModel(registerVal1, "iconId")
	local registerVal5 = Engine.CreateModel(registerVal1, "statPercent")
	local registerVal6 = Engine.CreateModel(registerVal1, "statFractionText")
	SetGlobalModelValue("challengeGameMode", "mp")
	DataSources.ChallengesNearCompletionList.prepare(arg0, {}, nil)
	if {}.ChallengesNearCompletionList[1.000000] == nil then
		local registerVal10 = Engine.GetModelForController(arg0)
		local registerVal9 = Engine.CreateModel(registerVal10, "noNearCompleteMP")
		Engine.SetModelValue(registerVal9, true)
	else
		Engine.SetModelValue(registerVal2, Engine.GetModelValue(Engine.GetModel({}.ChallengesNearCompletionList[1.000000].model, "title")))
		Engine.SetModelValue(registerVal3, Engine.GetModelValue(Engine.GetModel({}.ChallengesNearCompletionList[1.000000].model, "description")))
		Engine.SetModelValue(registerVal4, Engine.GetModelValue(Engine.GetModel({}.ChallengesNearCompletionList[1.000000].model, "iconId")))
		Engine.SetModelValue(registerVal5, Engine.GetModelValue(Engine.GetModel({}.ChallengesNearCompletionList[1.000000].model, "statPercent")))
		Engine.SetModelValue(registerVal6, Engine.GetModelValue(Engine.GetModel({}.ChallengesNearCompletionList[1.000000].model, "statFractionText")))
	end
	return registerVal1
end

registerVal2["init"] = __FUNC_937A9_
local function __FUNC_93C9E_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.GetModel(registerVal2, "ChallengesMPNearCompletion")
	if registerVal1 == nil then
		registerVal2 = DataSources.ChallengesMPNearCompletion.init(arg0)
	end
	return registerVal2
end

registerVal2.getModel = __FUNC_93C9E_
DataSources["ChallengesMPNearCompletion"] = registerVal2
registerVal2 = {}
local function __FUNC_93DB5_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "ChallengesZMNearCompletion")
	registerVal2 = Engine.CreateModel(registerVal1, "title")
	local registerVal3 = Engine.CreateModel(registerVal1, "description")
	local registerVal4 = Engine.CreateModel(registerVal1, "iconId")
	local registerVal5 = Engine.CreateModel(registerVal1, "statPercent")
	local registerVal6 = Engine.CreateModel(registerVal1, "statFractionText")
	local registerVal8 = Engine.GetModelForController(arg0)
	local registerVal7 = Engine.CreateModel(registerVal8, "noNearCompleteZM")
	SetGlobalModelValue("challengeGameMode", "zm")
	DataSources.ChallengesNearCompletionList.prepare(arg0, {}, nil)
	if {}.ChallengesNearCompletionList[1.000000] == nil then
		Engine.SetModelValue(registerVal7, true)
	else
		Engine.SetModelValue(registerVal2, Engine.GetModelValue(Engine.GetModel({}.ChallengesNearCompletionList[1.000000].model, "title")))
		Engine.SetModelValue(registerVal3, Engine.GetModelValue(Engine.GetModel({}.ChallengesNearCompletionList[1.000000].model, "description")))
		Engine.SetModelValue(registerVal4, Engine.GetModelValue(Engine.GetModel({}.ChallengesNearCompletionList[1.000000].model, "iconId")))
		Engine.SetModelValue(registerVal5, Engine.GetModelValue(Engine.GetModel({}.ChallengesNearCompletionList[1.000000].model, "statPercent")))
		Engine.SetModelValue(registerVal6, Engine.GetModelValue(Engine.GetModel({}.ChallengesNearCompletionList[1.000000].model, "statFractionText")))
	end
	return registerVal1
end

registerVal2["init"] = __FUNC_93DB5_
local function __FUNC_942AA_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.GetModel(registerVal2, "ChallengesZMNearCompletion")
	if registerVal1 == nil then
		registerVal2 = DataSources.ChallengesZMNearCompletion.init(arg0)
	end
	return registerVal2
end

registerVal2.getModel = __FUNC_942AA_
DataSources["ChallengesZMNearCompletion"] = registerVal2
registerVal2 = {}
local function __FUNC_943C1_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.GetModel(registerVal2, "MasterCallingCard")
	if registerVal1 == nil then
		local registerVal3 = Engine.GetModelForController(arg0)
		registerVal2 = Engine.CreateModel(registerVal3, "MasterCallingCard")
		Engine.CreateModel(registerVal2, "title")
		Engine.CreateModel(registerVal2, "description")
		Engine.CreateModel(registerVal2, "iconId")
		Engine.CreateModel(registerVal2, "percentComplete")
		Engine.CreateModel(registerVal2, "isLocked")
	end
	return registerVal2
end

registerVal2.getModel = __FUNC_943C1_
local function __FUNC_945B9_(arg0, arg1, arg2, arg3, arg4)
	local registerVal6 = Engine.GetModelForController(arg0)
	local registerVal5 = Engine.GetModel(registerVal6, "MasterCallingCard")
	if registerVal5 == nil then
		registerVal6 = DataSources.MasterCallingCard.getModel(arg0)
	end
	local registerVal7 = Engine.GetModel(registerVal6, "title")
	Engine.SetModelValue(registerVal7, arg1)
	registerVal7 = Engine.GetModel(registerVal6, "description")
	Engine.SetModelValue(registerVal7, arg2)
	registerVal7 = Engine.GetModel(registerVal6, "iconId")
	Engine.SetModelValue(registerVal7, arg3)
	registerVal7 = Engine.GetModel(registerVal6, "percentComplete")
	Engine.SetModelValue(registerVal7, arg4)
	registerVal7 = Engine.GetModel(registerVal6, "isLocked")
	if arg4 >= 1.000000 then
	end
	Engine.SetModelValue(registerVal7, true)
end

registerVal2["setModelValues"] = __FUNC_945B9_
DataSources["MasterCallingCard"] = registerVal2
registerVal2 = {}
local function __FUNC_94853_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "OneHundredPercentCallingCard")
	Engine.CreateModel(registerVal1, "iconId")
	Engine.CreateModel(registerVal1, "isLocked")
	return registerVal1
end

registerVal2.getModel = __FUNC_94853_
DataSources["OneHundredPercentCallingCard"] = registerVal2
registerVal2 = {}
local function __FUNC_94974_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "SideBetCurrentChallenge")
	registerVal2 = Engine.CreateModel(registerVal1, "title")
	local registerVal3 = Engine.CreateModel(registerVal1, "description")
	local registerVal4 = Engine.CreateModel(registerVal1, "backgroundId")
	local registerVal5 = Engine.CreateModel(registerVal1, "setCount")
	local registerVal6 = Engine.CreateModel(registerVal1, "isLocked")
	local registerVal7 = Engine.CreateModel(registerVal1, "isMastery")
	local registerVal8 = Engine.CreateModel(registerVal1, "timeSeconds")
	local function __FUNC_94FA4_(arg0, arg1)
		local registerVal2 = tonumber(arg0.imageID)
		local registerVal3 = tonumber(arg1.imageID)
		if registerVal2 >= registerVal3 then
		end
		return true
	end

	local registerVal10 = IsBlackjackContractActive(arg0)
	if registerVal10 then
		registerVal10 = Engine.GetDStat(arg0, "TenthSpecialistContract", "special_card_earned")
		if registerVal10 == 0.000000 then
		end
	end
	local registerVal11 = CoD.ChallengesUtility.GetSideBetCallingCards(arg0, __FUNC_94FA4_)
	local registerVal17, registerVal18, registerVal19 = ipairs(registerVal11)
	for index20,value21 in registerVal17, registerVal18, registerVal19 do
		if not value21.properties.isExpert then
			if not false and value21.models.isLocked then
				if true then
				end
			end
		else
			if not true then
			end
		end
	end
	registerVal17 = Engine.ConsumableGet(arg0, "blackjack", "awarded")
	registerVal18 = Engine.ConsumableGet(arg0, "blackjack", "consumed")
	Engine.SetModelValue(registerVal2, value21.models.title)
	Engine.SetModelValue(registerVal3, value21.models.description)
	Engine.SetModelValue(registerVal4, value21.models.iconId)
	Engine.SetModelValue(registerVal5, Engine.Localize("MPUI_BM_SET_X_OF_Y", ((0.000000 + 1.000000) - 1.000000), (0.000000 + 1.000000)))
	Engine.SetModelValue(registerVal6, (not (true or value21.models)))
	Engine.SetModelValue(registerVal7, (not (not (true or value21.models))))
	Engine.SetModelValue(registerVal8, (registerVal17 - registerVal18))
	return registerVal1
end

registerVal2.getModel = __FUNC_94974_
DataSources["SideBetCurrentChallenge"] = registerVal2
local function __FUNC_9502F_(arg0)
	local function __FUNC_96879_(arg0, arg1, arg2, arg3, arg4)
		local registerVal5 = arg1:getModel()
		local registerVal6 = Engine.GetModelValue(Engine.GetModel(registerVal5, "index"))
		local registerVal7 = Engine.GetModelValue(Engine.GetModel(registerVal5, "name"))
		local registerVal8 = Engine.GetModelValue(Engine.GetModel(registerVal5, "cost"))
		local registerVal9 = Engine.GetModelValue(Engine.GetModel(registerVal5, "category"))
		local registerVal10 = Engine.GetModelValue(Engine.GetModel(registerVal5, "image"))
		local registerVal11 = Engine.GetModelValue(Engine.GetModel(registerVal5, "backgroundId"))
		local registerVal12 = Engine.GetModelValue(Engine.GetModel(registerVal5, "activeDvar"))
		local registerVal13 = {}
		registerVal13.contractIndex = registerVal6
		registerVal13.name = registerVal7
		registerVal13.cost = registerVal8
		registerVal13.category = registerVal9
		registerVal13.image = registerVal10
		registerVal13.backgroundId = registerVal11
		registerVal13.activeDvar = registerVal12
		OpenSystemOverlay(arg0, arg4, arg2, "ActivateSpecialContractConfirmation", registerVal13)
	end

	local function __FUNC_96B58_(arg0, arg1, arg2, arg3, arg4)
		local registerVal10 = {}
		local registerVal11 = Dvar.blackjack_contract_ck_cost:get()
		registerVal10.itemCost = registerVal11
		OpenSystemOverlay(arg0, arg4, arg2, "TradeForBlackjackContract", registerVal10)
		return 
	end

	local function __FUNC_96C4F_(arg0, arg1, arg2, arg3, arg4)
		local registerVal5 = arg1:getModel(arg2, "group")
		if registerVal5 then
			local registerVal7 = Engine.GetModelValue(registerVal5)
			CoD.perController[arg2].callingCardContractGroup = registerVal7
		end
		OpenPopup(arg0, "BM_SpecialContracts_CallingCardContracts", arg2, arg3, arg4)
	end

	local function __FUNC_96DB7_(arg0, arg1, arg2, arg3)
		if arg1 == arg3 then
			if arg1 == 0.000000 then
				local registerVal5 = HasEarnedWeaponContract(arg0)
				if registerVal5 then
					return ""
				end
				registerVal5 = Engine.GetDStat(arg0, "weaponContractData", "currentValue")
			else
				registerVal5 = CoD.GetContractStatValuesForIndex(arg0, LuaUtils.BMContracts.specialContractIndex)
			end
			if registerVal5.progress < arg2 then
				return Engine.Localize("MENU_X_OF_Y_COMPLETE", registerVal5.progress, arg2)
			end
		end
		return ""
	end

	local registerVal6 = Engine.StorageGetBuffer(arg0, Enum.StorageFileType.STORAGE_MP_STATS_ONLINE)
	local registerVal7 = registerVal6.contracts[LuaUtils.BMContracts.specialContractIndex].index:get()
	local registerVal10 = {}
	local registerVal11 = {}
	registerVal11.index = 0.000000
	local registerVal12 = Engine.Localize("MPUI_BM_CONTRACT_TOTAL_VICTORY")
	registerVal11.name = registerVal12
	registerVal12 = Engine.Localize("MPUI_BM_CONTRACT_SPECIAL_DESC", Dvar.weapon_contract_target_value:get())
	registerVal11.description = registerVal12
	registerVal11.cost = 0.000000
	registerVal12 = Dvar.weapon_contract_target_value:get()
	registerVal11.targetValue = registerVal12
	registerVal12 = HasEarnedWeaponContract(arg0)
	registerVal11.isComplete = registerVal12
	registerVal11.category = "default"
	registerVal12 = Engine.Localize("MPUI_BM_CONTRACT_SPECIAL_REWARD_DESC")
	registerVal11.rewardDescription1 = registerVal12
	registerVal11.rewardDescription2 = ""
	registerVal11.rewardDescription3 = ""
	registerVal11.backgroundId = 0.000000
	registerVal11.image = "uie_t7_bm_contracts_special_reward"
	registerVal11.group = ""
	local registerVal15 = Dvar.weapon_contract_target_value:get()
	registerVal12 = __FUNC_96DB7_(arg0, 0.000000, registerVal15, registerVal7)
	registerVal11.groupProgress = registerVal12
	registerVal11.activeDvar = ""
	registerVal10.models = registerVal11
	registerVal11 = {}
	registerVal11.action = __FUNC_96879_
	registerVal10.properties = registerVal11
	table.insert({}, registerVal10)
	local registerVal8 = Dvar.blackjack_contract_purchasable:get()
	if not CoD.perController[arg0].callingCardContractGroup and registerVal8 == true then
		registerVal10 = {}
		registerVal11 = {}
		registerVal11.index = -1.000000
		registerVal12 = Engine.Localize("CONTRACT_BLACKJACK_CONTRACT")
		registerVal11.name = registerVal12
		registerVal12 = Engine.Localize("CONTRACT_BLACKJACK_CONTRACT_DESC")
		registerVal11.description = registerVal12
		registerVal12 = Dvar.blackjack_contract_ck_cost:get()
		registerVal11.cost = registerVal12
		registerVal11.targetValue = 0.000000
		registerVal11.isComplete = false
		registerVal11.category = "blackjack_contract"
		registerVal12 = Engine.Localize("CONTRACT_REWARD_BLACKJACK_CONTRACT")
		registerVal11.rewardDescription1 = registerVal12
		registerVal11.rewardDescription2 = ""
		registerVal11.rewardDescription3 = ""
		registerVal11.backgroundId = 0.000000
		registerVal11.image = "t7_bm_contracts_mercenary_icon"
		registerVal11.group = ""
		registerVal11.groupProgress = ""
		registerVal11.activeDvar = ""
		registerVal10.models = registerVal11
		registerVal11 = {}
		registerVal11.action = __FUNC_96B58_
		registerVal10.properties = registerVal11
		table.insert({}, registerVal10)
	end
	local registerVal23 = CoD.getStatsMilestoneTable(6.000000, Enum.eModes.MODE_MULTIPLAYER)
	local registerVal24 = Engine.TableFindRows(CoD.contractTable_mp, 5.000000, "special_contract")
	local registerVal26, registerVal27, registerVal28 = ipairs(registerVal24)
	for index50,value51 in , ,  do
		local registerVal41 = tonumber(Engine.TableLookupGetColumnValueForRow(CoD.contractTable_mp, , 0.000000))
		local registerVal42 = tonumber(Engine.TableLookupGetColumnValueForRow(CoD.contractTable_mp, , 2.000000))
		local registerVal43 = Engine.TableLookupGetColumnValueForRow(CoD.contractTable_mp, , 3.000000)
		local registerVal44 = Engine.TableLookupGetColumnValueForRow(CoD.contractTable_mp, , 4.000000)
		local registerVal45 = Engine.TableLookupGetColumnValueForRow(CoD.contractTable_mp, , 6.000000)
		local registerVal46 = Engine.TableLookupGetColumnValueForRow(CoD.contractTable_mp, , 7.000000)
		local registerVal47 = Engine.TableLookupGetColumnValueForRow(CoD.contractTable_mp, , 8.000000)
		local registerVal48 = Engine.TableLookupGetColumnValueForRow(CoD.contractTable_mp, , 9.000000)
		local registerVal49 = Engine.TableLookupGetColumnValueForRow(CoD.contractTable_mp, , 10.000000)
		local registerVal50 = Engine.TableLookupGetColumnValueForRow(CoD.contractTable_mp, , 12.000000)
		local registerVal51 = Engine.TableLookupGetColumnValueForRow(CoD.contractTable_mp, , 13.000000)
		local registerVal52 = Engine.TableLookupGetColumnValueForRow(CoD.contractTable_mp, , 14.000000)
		local registerVal53 = Engine.TableLookupGetColumnValueForRow(CoD.contractTable_mp, , 15.000000)
		if registerVal48 ~= "" then
			local registerVal54 = LuaUtils.IsStatPathValueGreaterThanZero(arg0, CoD.STATS_LOCATION_NORMAL, Enum.eModes.MODE_MULTIPLAYER, registerVal48)
		else
			if registerVal46 ~= "" then
				registerVal54 = Engine.TableLookup(nil, registerVal23, 4.000000, registerVal46, 12.000000)
				local registerVal55 = tonumber(Engine.TableLookup(nil, CoD.backgroundsTable, 4.000000, registerVal54, 1.000000))
				registerVal55 = Engine.Localize("CONTRACT_REWARD_CALLING_CARD", registerVal54)
				registerVal55 = Engine.GetDStat(arg0, "playerstatslist", registerVal46, "statvalue")
				if 0.000000 >= registerVal55 then
				end
			else
				if registerVal47 ~= "" then
					registerVal54 = Engine.TableLookup(nil, registerVal23, 4.000000, registerVal47, 9.000000)
					registerVal55 = Engine.TableLookup(nil, CoD.attachmentTable, Enum.attachmentTableColumn_e.ATTACHMENTTABLE_COLUMN_REFERENCE, registerVal54, Enum.attachmentTableColumn_e.ATTACHMENTTABLE_COLUMN_IMAGE)
					registerVal55 = Engine.TableLookup(nil, CoD.attachmentTable, Enum.attachmentTableColumn_e.ATTACHMENTTABLE_COLUMN_REFERENCE, registerVal54, Enum.attachmentTableColumn_e.ATTACHMENTTABLE_COLUMN_NAME)
					local registerVal56 = Engine.Localize("CONTRACT_REWARD_CAMO", registerVal55)
					registerVal56 = Engine.GetDStat(arg0, "playerstatslist", registerVal47, "statvalue")
					if 0.000000 >= registerVal56 then
					end
				end
			end
		end
		if registerVal52 ~= "" then
		end
		if registerVal53 ~= "" then
		end
		registerVal54 = Engine.AreStatsFetched(arg0)
		registerVal54 = Engine.IsLootReady(arg0)
		if not true and registerVal49 ~= "" and registerVal54 and registerVal54 then
			registerVal54 = Engine.GetInventoryItemQuantity(arg0, registerVal49)
			if 0.000000 >= registerVal54 then
			end
		end
		if CoD.perController[arg0].callingCardContractGroup ~= nil then
			if CoD.perController[arg0].callingCardContractGroup == registerVal50 then
			end
		else
			if registerVal50 ~= "" then
				if {}[registerVal50] then
					if registerVal41 == registerVal7 then
						{}[registerVal50].index = registerVal41
						{}[registerVal50].backgroundId = registerVal55
					end
					{}[registerVal50].contractCount = ({}[registerVal50].contractCount + 1.000000)
					if true then
						{}[registerVal50].completeCount = ({}[registerVal50].completeCount + 1.000000)
					else
						if true then
						end
						registerVal55 = {}
						registerVal55.index = registerVal41
						registerVal55.backgroundId = registerVal55
						registerVal55.contractCount = 1.000000
						registerVal55.completeCount = 1.000000
						{}[registerVal50] = registerVal55
					end
				end
			end
		end
		if not true then
			registerVal54 = Engine.DvarBool(nil, registerVal51)
			if registerVal51 ~= "" and not registerVal54 and not {} or registerVal41 == registerVal7 then
			end
		end
		registerVal54 = tonumber(registerVal49)
		registerVal55, registerVal56, registerVal57 = ipairs(CoD.BlackMarketUtility.UniqueSpecialistOutfits)
		for index58,value59 in registerVal55, registerVal56, registerVal57 do
			if registerVal54 == value59.contractRedeemId then
				local registerVal60 = Engine.GetInventoryItemQuantity(arg0, value59.contractId)
			else
			end
		end
		if not true then
			if true then
			end
			if not true and registerVal44 and registerVal44 ~= "" then
			end
			if {} or registerVal45 == "" then
			end
			if true and registerVal53 == "calling_card" then
			end
			registerVal57 = {}
			local registerVal58 = {}
			registerVal58.index = registerVal41
			local registerVal59 = Engine.Localize(("CONTRACT_" .. registerVal44))
			registerVal58.name = registerVal59
			registerVal59 = Engine.Localize(("CONTRACT_" .. registerVal50 .. "_DESC"), registerVal42)
			registerVal58.description = registerVal59
			registerVal59 = tonumber(0.000000)
			registerVal58.cost = registerVal59
			registerVal58.targetValue = registerVal42
			registerVal58.isComplete = true
			registerVal58.isGroupButton = true
			registerVal58.category = registerVal53
			registerVal58.rewardDescription1 = registerVal56
			registerVal58.rewardDescription2 = ""
			registerVal58.rewardDescription3 = ""
			registerVal58.backgroundId = registerVal55
			registerVal58.image = registerVal52
			registerVal58.group = registerVal50
			registerVal59 = __FUNC_96DB7_(arg0, registerVal41, registerVal42, registerVal7)
			registerVal58.groupProgress = registerVal59
			registerVal58.activeDvar = registerVal51
			registerVal57.models = registerVal58
			registerVal58 = {}
			registerVal58.action = __FUNC_96C4F_
			registerVal57.properties = registerVal58
			table.insert({}, registerVal57)
		end
	end
	registerVal26, registerVal27, registerVal28 = pairs({})
	for index29,value30 in registerVal26, registerVal27, registerVal28 do
		local registerVal31, registerVal32, registerVal33 = ipairs({})
		for index34,value35 in registerVal31, registerVal32, registerVal33 do
			if value35.models.group == index29 then
				value35.models.index = value30.index
				value35.models.backgroundId = value30.backgroundId
				if value30.completeCount ~= value30.contractCount then
				end
				value35.models.isComplete = true
				if value35.models.isComplete then
					CoD.perController[arg0].callingCardContractGroup = index29
					local registerVal36 = DataSources.SpecialContractMasterCard.getModel(arg0)
					local registerVal38 = Engine.GetModelValue(Engine.GetModel(registerVal36, "backgroundId"))
					value35.models.backgroundId = registerVal38
					CoD.perController[arg0].callingCardContractGroup = nil
				end
				local registerVal37 = Engine.Localize("MENU_X_OF_Y_COMPLETE", value30.completeCount, value30.contractCount)
				value35.models.groupProgress = registerVal37
			else
			end
		end
	end
	return {}
end

registerVal2 = DataSourceHelpers.ListSetup("SpecialContractsList", __FUNC_9502F_, true)
DataSources["SpecialContractsList"] = registerVal2
registerVal2 = {}
local function __FUNC_96FEB_(arg0)
	local registerVal1 = CoD.GetContractStatValuesForIndex(arg0, LuaUtils.BMContracts.specialContractIndex, nil, false, true)
	if registerVal1.index == 0.000000 then
		registerVal1.titleRef = "MPUI_BM_CONTRACT_TOTAL_VICTORY"
		registerVal1.descRef = "MPUI_BM_CONTRACT_SPECIAL_DESC"
		local registerVal2 = Engine.GetDStat(arg0, "weaponContractData", "currentValue")
		registerVal1.progress = registerVal2
		registerVal2 = Dvar.weapon_contract_target_value:get()
		registerVal1.targetValue = registerVal2
		registerVal2 = HasEarnedWeaponContract(arg0)
		registerVal1.isAwardGiven = registerVal2
		registerVal1.category = "default"
		registerVal1.cost = 0.000000
		registerVal1.image = "uie_t7_bm_contracts_special_reward"
		registerVal1.backgroundId = 0.000000
	end
	if 0.000000 < registerVal1.targetValue then
	end
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.CreateModel(registerVal4, "CurrentSpecialContract")
	local registerVal5 = Engine.CreateModel(registerVal3, "index")
	Engine.SetModelValue(registerVal5, registerVal1.index)
	registerVal5 = Engine.CreateModel(registerVal3, "name")
	Engine.SetModelValue(registerVal5, Engine.Localize(registerVal1.titleRef))
	registerVal5 = Engine.CreateModel(registerVal3, "description")
	Engine.SetModelValue(registerVal5, Engine.Localize(registerVal1.descRef, registerVal1.targetValue))
	registerVal5 = Engine.CreateModel(registerVal3, "percentComplete")
	Engine.SetModelValue(registerVal5, (registerVal1.progress / registerVal1.targetValue))
	registerVal5 = Engine.CreateModel(registerVal3, "fractionText")
	Engine.SetModelValue(registerVal5, Engine.Localize("MPUI_X_SLASH_Y", registerVal1.progress, registerVal1.targetValue))
	registerVal5 = Engine.CreateModel(registerVal3, "category")
	Engine.SetModelValue(registerVal5, registerVal1.category)
	registerVal5 = Engine.CreateModel(registerVal3, "cost")
	Engine.SetModelValue(registerVal5, registerVal1.cost)
	registerVal5 = Engine.CreateModel(registerVal3, "image")
	Engine.SetModelValue(registerVal5, registerVal1.image)
	registerVal5 = Engine.CreateModel(registerVal3, "backgroundId")
	Engine.SetModelValue(registerVal5, registerVal1.backgroundId)
	registerVal5 = Engine.CreateModel(registerVal3, "isComplete")
	Engine.SetModelValue(registerVal5, registerVal1.isAwardGiven)
	return registerVal3
end

registerVal2.getModel = __FUNC_96FEB_
DataSources["CurrentSpecialContract"] = registerVal2
registerVal2 = {}
local function __FUNC_9774F_(arg0)
	local registerVal6 = Engine.GetModelForController(arg0)
	local registerVal5 = Engine.CreateModel(registerVal6, "SpecialContractMasterCard")
	if CoD.perController[arg0].callingCardContractGroup then
		local registerVal8 = Engine.GetChallengeInfoForImages(arg0, CoD.perController[arg0].callingCardContractGroup, Enum.eModes.MODE_MULTIPLAYER)
		local registerVal9, registerVal10, registerVal11 = ipairs(registerVal8)
		for index12,value13 in registerVal9, registerVal10, registerVal11 do
			local registerVal15 = CoD.getStatsMilestoneTable((value13.tableNum + 1.000000), Enum.eModes.MODE_MULTIPLAYER)
			local registerVal14 = Engine.TableLookupGetColumnValueForRow(registerVal15, value13.challengeRow, Enum.milestoneTableColumns_t.MILESTONE_COLUMN_ISEXPERT)
			if registerVal14 ~= "1" then
			end
			if true then
			else
				if not value13.isLocked then
				end
			end
		end
		registerVal9 = Engine.Localize("MPUI_X_SLASH_Y", (0.000000 + 1.000000), (0.000000 + 1.000000))
		if (0.000000 + 1.000000) == (0.000000 + 1.000000) then
		end
	end
	local registerVal7 = Engine.CreateModel(registerVal5, "percentComplete")
	Engine.SetModelValue(registerVal7, ((0.000000 + 1.000000) / (0.000000 + 1.000000)))
	registerVal7 = Engine.CreateModel(registerVal5, "fractionText")
	Engine.SetModelValue(registerVal7, registerVal9)
	registerVal7 = Engine.CreateModel(registerVal5, "backgroundId")
	Engine.SetModelValue(registerVal7, value13.imageID)
	registerVal7 = Engine.CreateModel(registerVal5, "isLocked")
	Engine.SetModelValue(registerVal7, true)
	return registerVal5
end

registerVal2.getModel = __FUNC_9774F_
DataSources["SpecialContractMasterCard"] = registerVal2
registerVal2 = {}
local function __FUNC_97CC5_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "LimitedItemPromo")
	Engine.CreateModel(registerVal1, "itemCount")
	return registerVal1
end

registerVal2.getModel = __FUNC_97CC5_
DataSources["LimitedItemPromo"] = registerVal2
registerVal2 = {}
local function __FUNC_97DA6_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "PrestigeStats")
	registerVal2 = CoD.PrestigeUtility.GetPrestigeGameMode()
	local registerVal3 = CoD.PrestigeUtility.GetCurrentPLevel(arg0)
	local registerVal7 = IsMaxPrestigeLevel(arg0)
	if not registerVal7 then
	else
		registerVal7 = IsGameModeParagonCapable(registerVal2)
		if registerVal7 then
			registerVal7 = Engine.GetPlayerStats(arg0, CoD.STATS_LOCATION_NORMAL, registerVal2)
			local registerVal8 = registerVal7.PlayerStatsList.PARAGON_ICON_ID.StatValue:get()
		end
	end
	if registerVal8 == 0.000000 then
		registerVal7 = Engine.GetRankIcon(0.000000, (registerVal3 + 1.000000), registerVal2)
	else
		registerVal7 = Engine.GetParagonIconById(registerVal8, registerVal2)
	end
	registerVal8 = Engine.CreateModel(registerVal1, "icon")
	Engine.SetModelValue(registerVal8, registerVal7)
	registerVal8 = Engine.CreateModel(registerVal1, "backgroundId")
	Engine.SetModelValue(registerVal8, CoD.PrestigeUtility.GetBackgroundIdByPLevel(arg0, (registerVal3 + 1.000000)))
	registerVal8 = Engine.CreateModel(registerVal1, "plevel")
	Engine.SetModelValue(registerVal8, registerVal3)
	return registerVal1
end

registerVal2.getModel = __FUNC_97DA6_
DataSources["PrestigeStats"] = registerVal2
registerVal2 = {}
local function __FUNC_98220_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "PrestigeButtonInfopane")
	Engine.CreateModel(registerVal1, "title")
	Engine.CreateModel(registerVal1, "description")
	return registerVal1
end

registerVal2.getModel = __FUNC_98220_
DataSources["PrestigeButtonInfopane"] = registerVal2
local function __FUNC_98335_(arg0)
	local registerVal2, registerVal3, registerVal4 = pairs(CoD.mapsTable)
	for index5,value6 in registerVal2, registerVal3, registerVal4 do
		if CoD.perController[arg0].inspectingMap then
		else
			local registerVal7 = Engine.GetAssetList(value6.collectibles)
			local registerVal8, registerVal9, registerVal10 = ipairs(registerVal7)
			for index11,value12 in registerVal8, registerVal9, registerVal10 do
				if not {} or CoD.perController[arg0].inspectingCollectibleSize == value12.slotSize then
					local registerVal13 = Engine.ClientHasCollectible(arg0, index5, (index11 - 1.000000))
					local registerVal15 = Engine.GetGlobalModel()
					local registerVal14 = CoD.SafeGetModelValue(registerVal15, "combatRecordMode")
					if registerVal14 == "cp" then
						registerVal14 = ClientHasCollectible(arg0, index5, (index11 - 1.000000), true)
					end
					local registerVal16 = {}
					local registerVal17 = {}
					registerVal17.name = value12.name
					if {} or not value12.displayNameShort then
					end
					registerVal17.shortName = "COLLECTIBLE_NOT_FOUND_SHORT"
					registerVal17.longName = value12.displayNameLong
					registerVal17.description = value12.description
					registerVal17.image = value12.uiMaterial
					registerVal17.imageLarge = value12.uiMaterialLarge
					if not value12.audiolog_sound then
					end
					registerVal17.audioLog = ""
					registerVal17.mapDisplayName = value6.mapName
					registerVal17.unlocked = registerVal14
					registerVal16.models = registerVal17
					registerVal17 = {}
					registerVal17.mapName = index5
					if not value12.uiModel then
					end
					registerVal17.model = "tag_origin"
					registerVal17.unlocked = registerVal14
					registerVal16.properties = registerVal17
					table.insert({}, registerVal16)
				end
			end
		end
	end
	local function __FUNC_9897A_(arg0, arg1)
		if arg0.models.unlocked and arg1.models.unlocked then
			local registerVal2 = Engine.Localize(arg0.models.shortName)
			local registerVal3 = Engine.Localize(arg1.models.shortName)
			if registerVal2 >= registerVal3 then
			end
			return true
		else
			if arg0.models.unlocked then
			end
			return (not arg1.models.unlocked)
		end
	end

	table.sort({}, __FUNC_9897A_)
	return {}
end

registerVal2 = ListHelper_SetupDataSource("PDV_CollectiblesList", __FUNC_98335_)
DataSources["CollectiblesList"] = registerVal2
local function __FUNC_98AEB_(arg0)
	local registerVal3 = Dvar.last_map:get()
	if not registerVal3 then
		return {}
	end
	local registerVal5 = Engine.GetAssetList(CoD.mapsTable[CoD.mapsTable[registerVal3].rootMapName].collectibles)
	local registerVal6, registerVal7, registerVal8 = ipairs(registerVal5)
	for index9,value10 in registerVal6, registerVal7, registerVal8 do
		local registerVal11 = Engine.ClientHasCollectible(arg0, CoD.mapsTable[registerVal3].rootMapName, (index9 - 1.000000))
		local registerVal14 = {}
		local registerVal15 = {}
		registerVal15.name = value10.name
		if {} or not value10.displayNameShort then
		end
		registerVal15.shortName = "COLLECTIBLE_NOT_FOUND_SHORT"
		registerVal15.longName = value10.displayNameLong
		registerVal15.description = value10.description
		registerVal15.image = value10.uiMaterial
		registerVal15.imageLarge = value10.uiMaterialLarge
		if not value10.audiolog_sound then
		end
		registerVal15.audioLog = ""
		registerVal15.mapDisplayName = CoD.mapsTable[CoD.mapsTable[registerVal3].rootMapName].mapName
		registerVal15.unlocked = registerVal11
		registerVal14.models = registerVal15
		registerVal15 = {}
		registerVal15.mapName = CoD.mapsTable[registerVal3].rootMapName
		if not value10.uiModel then
		end
		registerVal15.model = "tag_origin"
		registerVal15.unlocked = registerVal11
		registerVal14.properties = registerVal15
		table.insert({}, registerVal14)
	end
	local function __FUNC_98FD1_(arg0, arg1)
		if arg1.models.unlocked then
		end
		return (not arg0.models.unlocked)
	end

	table.sort({}, __FUNC_98FD1_)
	return {}
end

registerVal2 = ListHelper_SetupDataSource("PDV_CollectiblesList", __FUNC_98AEB_)
DataSources["CollectiblesListAAR"] = registerVal2
local function __FUNC_9905E_(arg0)
	local registerVal2 = Dvar.ui_codexindex_unlocked:get()
	if registerVal2 then
		local registerVal4 = {}
		local registerVal5 = {}
		registerVal5.bookmarkURL = "index.htm"
		registerVal5.bookmarkDesc = "INDEX"
		registerVal4.models = registerVal5
		registerVal4.propteries = {}
		table.insert({}, registerVal4)
	end
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.bookmarkURL = "CIA-HomePage.htm"
	local registerVal6 = Engine.Localize("MENU_CODEX_BOOKMARK_CIAHOME")
	registerVal5.bookmarkDesc = registerVal6
	registerVal4.models = registerVal5
	registerVal4.propteries = {}
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.bookmarkURL = "WinslowAccord-MainMenu.htm"
	registerVal6 = Engine.Localize("MENU_CODEX_BOOKMARK_WINSLOWMAIN")
	registerVal5.bookmarkDesc = registerVal6
	registerVal4.models = registerVal5
	registerVal4.propteries = {}
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.bookmarkURL = "Omnipedia-WinslowAccord.htm"
	registerVal6 = Engine.Localize("MENU_CODEX_BOOKMARK_OMNIWINSLOW")
	registerVal5.bookmarkDesc = registerVal6
	registerVal4.models = registerVal5
	registerVal4.propteries = {}
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.bookmarkURL = "Omnipedia-CDP.htm"
	registerVal6 = Engine.Localize("MENU_CODEX_BOOKMARK_OMNICDP")
	registerVal5.bookmarkDesc = registerVal6
	registerVal4.models = registerVal5
	registerVal4.propteries = {}
	table.insert({}, registerVal4)
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.bookmarkURL = "Omnipedia-CIA.htm"
	registerVal6 = Engine.Localize("MENU_CODEX_BOOKMARK_OMNICIA")
	registerVal5.bookmarkDesc = registerVal6
	registerVal4.models = registerVal5
	registerVal4.propteries = {}
	table.insert({}, registerVal4)
	registerVal2 = HighestMapReachedGreaterThan(arg0, 15.000000)
	if registerVal2 then
		registerVal4 = {}
		registerVal5 = {}
		registerVal5.bookmarkURL = "CEA-EgyptianForcesMoveAgainstNRC.htm"
		registerVal6 = Engine.Localize("MENU_CODEX_BOOKMARK_NEWSEGYPT")
		registerVal5.bookmarkDesc = registerVal6
		registerVal4.models = registerVal5
		registerVal4.propteries = {}
		table.insert({}, registerVal4)
	end
	registerVal2 = HighestMapReachedGreaterThan(arg0, 6.000000)
	if registerVal2 then
		registerVal4 = {}
		registerVal5 = {}
		registerVal5.bookmarkURL = "CEA-GangViolenceSpillsIntoSingapore.htm"
		registerVal6 = Engine.Localize("MENU_CODEX_BOOKMARK_NEWSGANG")
		registerVal5.bookmarkDesc = registerVal6
		registerVal4.models = registerVal5
		registerVal4.propteries = {}
		table.insert({}, registerVal4)
	end
	registerVal2 = HighestMapReachedGreaterThan(arg0, 8.000000)
	if registerVal2 then
		registerVal4 = {}
		registerVal5 = {}
		registerVal5.bookmarkURL = "CEA-VictoryisWithinOurGrasp.htm"
		registerVal6 = Engine.Localize("MENU_CODEX_BOOKMARK_NEWSVICTORY")
		registerVal5.bookmarkDesc = registerVal6
		registerVal4.models = registerVal5
		registerVal4.propteries = {}
		table.insert({}, registerVal4)
	end
	registerVal2 = HighestMapReachedGreaterThan(arg0, 5.000000)
	if registerVal2 then
		registerVal4 = {}
		registerVal5 = {}
		registerVal5.bookmarkURL = "CIA-Krueger-FileEntryPoint.htm"
		registerVal6 = Engine.Localize("MENU_CODEX_BOOKMARK_CIAKRUEGER")
		registerVal5.bookmarkDesc = registerVal6
		registerVal4.models = registerVal5
		registerVal4.propteries = {}
		table.insert({}, registerVal4)
		registerVal4 = {}
		registerVal5 = {}
		registerVal5.bookmarkURL = "CIA-COALESCENCE-AudioLandingPage.htm"
		registerVal6 = Engine.Localize("MENU_CODEX_BOOKMARK_CIASGEN")
		registerVal5.bookmarkDesc = registerVal6
		registerVal4.models = registerVal5
		registerVal4.propteries = {}
		table.insert({}, registerVal4)
	end
	registerVal2 = HighestMapReachedGreaterThan(arg0, 11.000000)
	if registerVal2 then
		registerVal4 = {}
		registerVal5 = {}
		registerVal5.bookmarkURL = "CIA-Infection-AudioLandingPage.htm"
		registerVal6 = Engine.Localize("MENU_CODEX_BOOKMARK_CIAINFECTION")
		registerVal5.bookmarkDesc = registerVal6
		registerVal4.models = registerVal5
		registerVal4.propteries = {}
		table.insert({}, registerVal4)
	end
	registerVal2 = HighestMapReachedGreaterThan(arg0, 16.000000)
	if registerVal2 then
		registerVal4 = {}
		registerVal5 = {}
		registerVal5.bookmarkURL = "CIA-Zurich-AudioLandingPage.htm"
		registerVal6 = Engine.Localize("MENU_CODEX_BOOKMARK_CIAZURICH")
		registerVal5.bookmarkDesc = registerVal6
		registerVal4.models = registerVal5
		registerVal4.propteries = {}
		table.insert({}, registerVal4)
		registerVal4 = {}
		registerVal5 = {}
		registerVal5.bookmarkURL = "WinslowAccord-TeamPhiAutopsy.htm"
		registerVal6 = Engine.Localize("MENU_CODEX_BOOKMARK_WINSLOWTEAMPHI")
		registerVal5.bookmarkDesc = registerVal6
		registerVal4.models = registerVal5
		registerVal4.propteries = {}
		table.insert({}, registerVal4)
	end
	registerVal2, registerVal3, registerVal4 = pairs(CoD.mapsTable)
	for index5,value6 in registerVal2, registerVal3, registerVal4 do
		if CoD.perController[arg0].inspectingMap then
		else
			local registerVal7 = Engine.GetAssetList(value6.collectibles)
			local registerVal8, registerVal9, registerVal10 = ipairs(registerVal7)
			for index11,value12 in registerVal8, registerVal9, registerVal10 do
				local registerVal13 = Engine.ClientHasCollectible(arg0, index5, (index11 - 1.000000))
				if registerVal13 then
					local registerVal16 = {}
					local registerVal17 = {}
					registerVal17.bookmarkURL = value12.codexurl
					local registerVal18 = Engine.Localize(value12.codexurldesc)
					registerVal17.bookmarkDesc = registerVal18
					registerVal16.models = registerVal17
					registerVal16.properties = {}
					table.insert({}, registerVal16)
				end
			end
		end
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("BookmarksList", __FUNC_9905E_)
DataSources["BookmarksList"] = registerVal2
local function __FUNC_99CE6_(arg0)
	local registerVal2 = {}
	registerVal2 = {"cp_mi_eth_prologue", "cp_mi_zurich_newworld", "cp_mi_sing_blackstation", "cp_mi_sing_biodomes", "cp_mi_sing_sgen", "cp_mi_sing_vengeance", "cp_mi_cairo_ramses", "cp_mi_cairo_infection", "cp_mi_cairo_aquifer", "cp_mi_cairo_lotus", "cp_mi_zurich_coalescence"}
	local registerVal3 = Engine.GetPlayerStats(arg0)
	local registerVal4 = Engine.GetAssetList("cp_default_gallery")
	for index5=1.000000, #"cp_mi_sing_biodomes", 1.000000 do
		local registerVal11 = {}
		local registerVal12 = {}
		registerVal12.displayName = registerVal4[index5].displayName
		registerVal12.image = registerVal4[index5].image
		registerVal12.unlocked = true
		registerVal11.models = registerVal12
		registerVal12 = {}
		registerVal12.mapName = ""
		registerVal12.unlocked = true
		registerVal11.properties = registerVal12
		table.insert({}, registerVal11)
	end
	for index5=1.000000, ##"cp_mi_sing_biodomes", 1.000000 do
		registerVal11 = registerVal3.PlayerStatsByMap[registerVal2[index5]].hasBeenCompleted:get()
		if registerVal11 ~= 1.000000 then
		end
		registerVal12 = Engine.GetAssetList((registerVal2[index5] .. "_list"))
		if true and registerVal12 ~= nil then
			for index12=1.000000, #(registerVal2[index5] .. "_list"), 1.000000 do
				local registerVal18 = {}
				local registerVal19 = {}
				registerVal19.displayName = registerVal12[index12].displayName
				registerVal19.image = registerVal12[index12].image
				registerVal19.unlocked = true
				registerVal18.models = registerVal19
				registerVal19 = {}
				registerVal19.mapName = ""
				registerVal19.unlocked = true
				registerVal18.properties = registerVal19
				table.insert({}, registerVal18)
			end
		end
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("GalleryList", __FUNC_99CE6_)
DataSources["GalleryList"] = registerVal2
local function __FUNC_9A200_(arg0)
	local registerVal2 = Dvar.ui_mapname:get()
	local registerVal3 = LUI.endswith(registerVal2, "2")
	registerVal3 = LUI.endswith(registerVal2, "3")
	if not {} or registerVal3 then
		local registerVal6 = string.len(registerVal2)
		registerVal3 = string.sub(registerVal2, 0.000000, (registerVal6 - 1.000000))
	end
	registerVal3, registerVal4, registerVal5 = pairs(CoD.mapsTable)
	local registerVal8 = Engine.GetAssetList(registerVal2.collectibles)
	local registerVal9, registerVal10, registerVal11 = ipairs(registerVal8)
	for index12,value13 in registerVal9, registerVal10, registerVal11 do
		local registerVal16 = {}
		local registerVal17 = {}
		registerVal17.image = value13.uiMaterial
		registerVal16.models = registerVal17
		registerVal17 = {}
		local registerVal18 = Engine.ClientHasCollectible(arg0, registerVal3, (index12 - 1.000000))
		registerVal17.unlocked = registerVal18
		registerVal16.properties = registerVal17
		table.insert({}, registerVal16)
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("StartMenuCollectables", __FUNC_9A200_)
DataSources["StartMenuCollectables"] = registerVal2
registerVal2 = {}
local function __FUNC_9A570_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.CreateModel(registerVal2, "StartMenu")
	registerVal2 = Engine.CreateModel(registerVal1, "score")
	local registerVal3 = Engine.GetClientNum(arg0)
	local registerVal4 = Engine.GetPlayerListData(arg0, registerVal3)
	if registerVal4.score ~= nil then
	end
	Engine.SetModelValue(registerVal2, registerVal4.score)
	return registerVal1
end

registerVal2.getModel = __FUNC_9A570_
DataSources["StartMenu"] = registerVal2
local function __FUNC_9A714_(arg0)
	local registerVal1 = {}
	local registerVal2 = {}
	local registerVal3 = {}
	registerVal3.tabIcon = CoD.buttonStrings.shoulderl
	registerVal2.models = registerVal3
	registerVal3 = {}
	registerVal3.m_mouseDisabled = true
	registerVal2.properties = registerVal3
	registerVal3 = {}
	local registerVal4 = {}
	local registerVal5 = Engine.Localize("COLLECTIBLE_SMALL_COLLECTIBLES_CAPS")
	registerVal4.tabName = registerVal5
	registerVal4.tabWidget = "CoD.smallCollectibles"
	registerVal3.models = registerVal4
	registerVal4 = {}
	registerVal4.collectibleSize = Enum.bunkCollectibleSizes_e.COLLECTIBLE_SIZE_SMALL
	registerVal3.properties = registerVal4
	registerVal4 = {}
	registerVal5 = {}
	local registerVal6 = Engine.Localize("COLLECTIBLE_MEDIUM_COLLECTIBLES_CAPS")
	registerVal5.tabName = registerVal6
	registerVal5.tabWidget = "CoD.mediumCollectibles"
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.collectibleSize = Enum.bunkCollectibleSizes_e.COLLECTIBLE_SIZE_MEDIUM
	registerVal4.properties = registerVal5
	registerVal5 = {}
	registerVal6 = {}
	local registerVal7 = Engine.Localize("COLLECTIBLE_LARGE_COLLECTIBLES_CAPS")
	registerVal6.tabName = registerVal7
	registerVal6.tabWidget = "CoD.largeCollectibles"
	registerVal5.models = registerVal6
	registerVal6 = {}
	registerVal6.collectibleSize = Enum.bunkCollectibleSizes_e.COLLECTIBLE_SIZE_LARGE
	registerVal5.properties = registerVal6
	registerVal6 = {}
	registerVal7 = {}
	registerVal7.tabIcon = CoD.buttonStrings.shoulderr
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal7.m_mouseDisabled = true
	registerVal6.properties = registerVal7
	registerVal1 = {registerVal2, registerVal3, registerVal4, registerVal5, registerVal6}
	registerVal2, registerVal3, registerVal4 = ipairs(registerVal1)
	for index5,value6 in registerVal2, registerVal3, registerVal4 do
		if value6.properties and value6.properties.collectibleSize == CoD.perController[arg0].inspectingCollectibleSize then
			value6.properties.selectIndex = true
		else
		end
	end
	return registerVal1
end

registerVal2 = ListHelper_SetupDataSource("PDV_PlaceCollectiblesTab", __FUNC_9A714_)
DataSources["PlaceCollectiblesTabs"] = registerVal2
registerVal2 = {}
local function __FUNC_9AC3D_(arg0)
	local registerVal1 = {}
	registerVal1 = {"BUNK_COLLECTIBLE_SMALL_1", "BUNK_COLLECTIBLE_SMALL_2", "BUNK_COLLECTIBLE_SMALL_3", "BUNK_COLLECTIBLE_SMALL_4", "BUNK_COLLECTIBLE_SMALL_5", "BUNK_COLLECTIBLE_SMALL_6", "BUNK_COLLECTIBLE_MEDIUM_1", "BUNK_COLLECTIBLE_MEDIUM_2", "BUNK_COLLECTIBLE_LARGE_1"}
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal2 = Engine.CreateModel(registerVal3, "collectiblesLayout")
	local registerVal4 = Engine.GetModelForController(arg0)
	registerVal3 = Engine.CreateModel(registerVal4, "safehouse.inClientBunk")
	registerVal4 = Engine.GetModelValue(registerVal3)
	local registerVal5 = Engine.GetCollectibleLayout(registerVal4)
	local registerVal6, registerVal7, registerVal8 = ipairs(registerVal1)
	for index9,value10 in registerVal6, registerVal7, registerVal8 do
		local registerVal11 = Engine.CreateModel(registerVal2, value10)
		local registerVal22 = Engine.GetAssetInfoFromListIndex(CoD.mapsTable[registerVal5[Enum.bunkCollectibleSlots_e[value10]].mapName].collectibles, registerVal5[Enum.bunkCollectibleSlots_e[value10]].collectibleIndex)
		if registerVal5[Enum.bunkCollectibleSlots_e[value10]] and registerVal5[Enum.bunkCollectibleSlots_e[value10]].isSet and registerVal11 and CoD.mapsTable[registerVal5[Enum.bunkCollectibleSlots_e[value10]].mapName] and CoD.mapsTable[registerVal5[Enum.bunkCollectibleSlots_e[value10]].mapName].collectibles and CoD.mapsTable[registerVal5[Enum.bunkCollectibleSlots_e[value10]].mapName].collectibles ~= "" and registerVal22 then
		end
		registerVal22 = Engine.CreateModel(registerVal11, "image")
		Engine.SetModelValue(registerVal22, "")
		registerVal22 = Engine.CreateModel(registerVal11, "imageLarge")
		Engine.SetModelValue(registerVal22, "")
		registerVal22 = Engine.CreateModel(registerVal11, "name")
		Engine.SetModelValue(registerVal22, "")
		registerVal22 = Engine.CreateModel(registerVal11, "model")
		Engine.SetModelValue(registerVal22, "tag_origin")
		registerVal22 = Engine.CreateModel(registerVal11, "audioLog")
		Engine.SetModelValue(registerVal22, "")
		registerVal22 = Engine.CreateModel(registerVal11, "collectibleSlot")
		Engine.SetModelValue(registerVal22, Enum.bunkCollectibleSlots_e[value10])
		registerVal22 = Engine.CreateModel(registerVal11, "mapInfo")
		Engine.SetModelValue(registerVal22, "")
		registerVal22 = Engine.CreateModel(registerVal11, "isSet")
		Engine.SetModelValue(registerVal22, true)
	end
	return registerVal2
end

registerVal2.getModel = __FUNC_9AC3D_
DataSources["CollectiblesLayout"] = registerVal2
local function __FUNC_9B432_(arg0)
	local registerVal2 = Engine.GetPlayerStats(arg0)
	local registerVal3 = Engine.GetAssetList("rating_list")
	if registerVal3 ~= nil then
		for index4=2.000000, #, 1.000000 do
			local registerVal9 = {}
			registerVal9.models = registerVal3[index4]
			{}[(index4 - 1.000000)] = registerVal9
			registerVal9 = registerVal2.trainingSimStats.ranksAchieved[(index4 - 1.000000)]:get()
			if registerVal9 ~= 1.000000 then
			end
			{}[(index4 - 1.000000)].models.completed = true
		end
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("TrainingSimRatingInfo", __FUNC_9B432_)
DataSources["TrainingSimRatingInfo"] = registerVal2
local function __FUNC_9B5EB_(arg0)
	local registerVal1 = {}
	local registerVal2 = {}
	local registerVal3 = {}
	registerVal3.tabIcon = CoD.buttonStrings.shoulderl
	registerVal2.models = registerVal3
	registerVal3 = {}
	registerVal3.m_mouseDisabled = true
	registerVal2.properties = registerVal3
	registerVal3 = {}
	local registerVal4 = {}
	local registerVal5 = Engine.Localize("MENU_OVERVIEW_CAPS")
	registerVal4.tabName = registerVal5
	registerVal4.tabWidget = "CoD.MissionRecordVault_Overview"
	registerVal3.models = registerVal4
	registerVal4 = {}
	registerVal5 = {}
	local registerVal6 = Engine.Localize("CPUI_ACCOLADES")
	registerVal5.tabName = registerVal6
	registerVal5.tabWidget = "CoD.MissionRecordVault_Challenges"
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal6 = {}
	local registerVal7 = Engine.Localize("MENU_PERFORMANCE_CAPS")
	registerVal6.tabName = registerVal7
	registerVal6.tabWidget = "CoD.MissionRecordVault_Performance"
	registerVal5.models = registerVal6
	registerVal6 = {}
	registerVal7 = {}
	local registerVal8 = Engine.Localize("MENU_SELECT_MISSION_CAPS")
	registerVal7.tabName = registerVal8
	registerVal7.tabWidget = "CoD.MissionRecordVault_ReplayMission"
	registerVal6.models = registerVal7
	registerVal7 = {}
	registerVal8 = {}
	registerVal8.tabIcon = CoD.buttonStrings.shoulderr
	registerVal7.models = registerVal8
	registerVal8 = {}
	registerVal8.m_mouseDisabled = true
	registerVal7.properties = registerVal8
	registerVal1 = {registerVal2, registerVal3, registerVal4, registerVal5, registerVal6, registerVal7}
	return registerVal1
end

local registerVal6 = {}
local function __FUNC_9B943_(arg0)
	local registerVal1 = arg0.menu:getModel()
	if arg0.menu and registerVal1 then
		local registerVal2 = arg0.menu:getModel()
		registerVal1 = Engine.GetModel(registerVal2, "showMissionSelect")
	end
	registerVal2 = Engine.GetModelValue(registerVal1)
	local registerVal3 = ListHelper_GetCount(arg0)
	return ((registerVal3 + registerVal2) - 1.000000)
end

registerVal6.getCount = __FUNC_9B943_
local function __FUNC_9BA9E_(arg0, arg1, arg2)
	if 5.000000 <= arg2 then
		local registerVal3 = arg1.menu:getModel()
		if arg1.menu and registerVal3 then
			local registerVal4 = arg1.menu:getModel()
			registerVal3 = Engine.GetModel(registerVal4, "showMissionSelect")
		end
		registerVal4 = Engine.GetModelValue(registerVal3)
		if registerVal4 ~= 1.000000 then
		end
	end
	return ListHelper_GetItem(arg0, arg1, (arg2 + 1.000000))
end

registerVal6.getItem = __FUNC_9BA9E_
registerVal2 = ListHelper_SetupDataSource("MRV_MissionRecordVaultTabs", __FUNC_9B5EB_, false, registerVal6)
DataSources["MissionRecordVaultTabs"] = registerVal2
registerVal2 = {}
local function __FUNC_9BC12_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "MissionRecordVaultMapInfo")
	local registerVal3 = Engine.GetGlobalModel()
	registerVal2 = Engine.GetModel(registerVal3, "nextMap")
	registerVal3 = Engine.GetModelValue(registerVal2)
	if CoD.mapsTable[registerVal3] == nil then
		return registerVal1
	end
	local registerVal6 = Engine.CreateModel(registerVal1, "mapId")
	Engine.SetModelValue(registerVal6, registerVal3)
	registerVal6 = {}
	registerVal6 = {"previewImage", "mapName", "mapDescription", "mapDescriptionShort", "resisttitle1", "resist1", "resist1short", "resisttitle2", "resist2", "resist2short", "resisttitle3", "resist3", "resist3short"}
	local registerVal5, registerVal6, registerVal7 = ipairs(registerVal6)
	for index8,value9 in registerVal5, registerVal6, registerVal7 do
		local registerVal11 = Engine.CreateModel(registerVal1, value9)
		Engine.SetModelValue(registerVal11, CoD.mapsTable[registerVal3][value9])
	end
	registerVal5 = Engine.GetPlayerStats(arg0)
	registerVal7 = string.match(registerVal3, "[0-9]$")
	if registerVal7 ~= nil then
		local registerVal10 = string.len(registerVal3)
		registerVal7 = string.sub(registerVal3, 0.000000, (registerVal10 - 1.000000))
	end
	local registerVal9 = {}
	registerVal9 = {"SCORE", "KILLS", "ASSISTS", "HIGHEST_DIFFICULTY"}
	local registerVal8, registerVal9, registerVal10 = ipairs(registerVal9)
	for index11,value12 in registerVal8, registerVal9, registerVal10 do
		local registerVal13 = registerVal5.PlayerStatsByMap[registerVal7].highestStats[value12]:get()
		local registerVal15 = Engine.CreateModel(registerVal1, value12)
		Engine.SetModelValue(registerVal15, registerVal13)
	end
	registerVal8 = Engine.GetGDTCampaignMapInfo(registerVal3)
	registerVal10 = {}
	registerVal10 = {"mapObjective", "engageClose", "engageMedium", "engageLong", "resistanceText", "operationsBackground"}
	registerVal9, registerVal10, registerVal11 = ipairs(registerVal10)
	for index12,value13 in registerVal9, registerVal10, registerVal11 do
		registerVal15 = Engine.CreateModel(registerVal1, value13)
		Engine.SetModelValue(registerVal15, registerVal8[value13])
	end
	return registerVal1
end

registerVal2.getModel = __FUNC_9BC12_
DataSources["MissionRecordVaultMapInfo"] = registerVal2
local function __FUNC_9C2ED_(arg0)
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal1 = Engine.GetModelValue(Engine.GetModel(registerVal3, "aarAccoladeMapName"))
	if CoD.mapsTable[registerVal1] then
	end
	local registerVal4 = Engine.GetAssetList(CoD.mapsTable[registerVal1].accoladelist)
	if registerVal4 ~= nil then
		for index5=1.000000, #, 1.000000 do
			local registerVal9 = {}
			registerVal9.models = registerVal4[index5]
			{}[index5] = registerVal9
		end
		local registerVal5 = {}
		registerVal5 = {"2", "100", "17:20", "1", "0"}
		local registerVal6 = Engine.GetPlayerStats(arg0)
		local registerVal8 = tonumber(Engine.TableLookup(arg0, CoD.statsMilestone, 4.000000, {}[1.000000].models.challengeReference, 0.000000))
		for index9=1.000000, #arg0, 1.000000 do
			local registerVal13 = tonumber(Engine.TableLookup(arg0, CoD.statsMilestone, 4.000000, {}[index9].models.challengeReference, 0.000000))
			local registerVal14 = tonumber(Engine.TableLookup(arg0, CoD.statsMilestone, 4.000000, {}[index9].models.challengeReference, 2.000000))
			local registerVal15 = Engine.TableLookup(arg0, CoD.statsMilestone, 4.000000, {}[index9].models.challengeReference, 2.000000)
			if registerVal15 ~= "1" then
			end
			local registerVal16 = registerVal6.PlayerStatsByMap[registerVal1].accolades[(registerVal13 - registerVal8)].state:get()
			local registerVal17 = registerVal6.PlayerStatsByMap[registerVal1].accolades[(registerVal13 - registerVal8)].value:get()
			local registerVal18 = registerVal6.PlayerStatsByMap[registerVal1].accolades[(registerVal13 - registerVal8)].highestValue:get()
			if registerVal16 == 0.000000 then
			end
			{}[index9].models.completed = true
			if true then
				if {}[index9].models.completed == true then
					{}[index9].models.challengeProgressQuantity = ""
					{}[index9].models.highestValue = ""
				else
					{}[index9].models.challengeProgressQuantity = "CPUI_INCOMPLETE"
					{}[index9].models.highestValue = "CPUI_INCOMPLETE"
				else
					local registerVal20 = tostring(registerVal17)
					{}[index9].models.challengeProgressQuantity = registerVal20
					registerVal20 = tostring(registerVal18)
					{}[index9].models.highestValue = registerVal20
				end
			end
			local registerVal19 = IsCPAndInSafehouse()
			if registerVal19 then
				{}[index9].models.challengeProgressQuantity = {}[index9].models.highestValue
			end
		end
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("AARAccolades", __FUNC_9C2ED_)
DataSources["AARAccolades"] = registerVal2
local function __FUNC_9CAAC_(arg0)
	local registerVal1 = Dvar.ui_mapname:get()
	local registerVal2 = InSafehouseOrFrontend()
	if registerVal2 then
		local registerVal3 = Engine.GetGlobalModel()
		registerVal2 = Engine.GetModel(registerVal3, "nextMap")
		registerVal3 = Engine.GetModelValue(registerVal2)
	end
	registerVal2 = CoD.GetMapValue(registerVal3, "rootMapName")
	if CoD.mapsTable[registerVal2] then
	end
	local registerVal5 = Engine.GetAssetList(CoD.mapsTable[registerVal2].accoladelist)
	if registerVal5 ~= nil then
		for index6=1.000000, #, 1.000000 do
			local registerVal10 = {}
			registerVal10.models = registerVal5[index6]
			{}[index6] = registerVal10
		end
		local registerVal6 = {}
		registerVal6 = {"2", "100", "17:20", "1", "0"}
		local registerVal7 = Engine.GetPlayerStats(arg0)
		registerVal10 = Engine.GetGlobalModel()
		local registerVal9 = CoD.SafeGetModelValue(registerVal10, "inBarracks")
		if registerVal9 == true then
			registerVal9 = CoD.GetCombatRecordStats(arg0)
			registerVal9 = CoD.getStatsMilestoneTable(1.000000, Enum.eModes.MODE_CAMPAIGN)
		end
		local registerVal11 = tonumber(Engine.TableLookup(arg0, registerVal9, 4.000000, {}[1.000000].models.challengeReference, 0.000000))
		for index12=1.000000, #arg0, 1.000000 do
			local registerVal16 = tonumber(Engine.TableLookup(arg0, registerVal9, 4.000000, {}[index12].models.challengeReference, 0.000000))
			local registerVal17 = tonumber(Engine.TableLookup(arg0, registerVal9, 4.000000, {}[index12].models.challengeReference, 2.000000))
			local registerVal18 = Engine.TableLookup(arg0, registerVal9, 4.000000, {}[index12].models.challengeReference, 2.000000)
			if registerVal18 ~= "1" then
			end
			local registerVal19 = registerVal9.PlayerStatsByMap[CoD.mapsTable[registerVal3].rootMapName].accolades[(registerVal16 - registerVal11)].state:get()
			local registerVal20 = registerVal9.PlayerStatsByMap[CoD.mapsTable[registerVal3].rootMapName].accolades[(registerVal16 - registerVal11)].value:get()
			local registerVal21 = registerVal9.PlayerStatsByMap[CoD.mapsTable[registerVal3].rootMapName].accolades[(registerVal16 - registerVal11)].highestValue:get()
			if registerVal19 == 0.000000 then
			end
			{}[index12].models.completed = true
			if true then
				if {}[index12].models.completed == true then
					{}[index12].models.challengeProgressQuantity = ""
					{}[index12].models.highestValue = ""
				else
					{}[index12].models.challengeProgressQuantity = "CPUI_INCOMPLETE"
					{}[index12].models.highestValue = "CPUI_INCOMPLETE"
				else
					local registerVal23 = tostring(registerVal20)
					{}[index12].models.challengeProgressQuantity = registerVal23
					registerVal23 = tostring(registerVal21)
					{}[index12].models.highestValue = registerVal23
				end
			end
			local registerVal22 = IsCPAndInSafehouse()
			if registerVal22 then
				{}[index12].models.challengeProgressQuantity = {}[index12].models.highestValue
			end
		end
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("MissionRecordVaultChallengeInfo", __FUNC_9CAAC_, true)
DataSources["MissionRecordVaultChallengeInfo"] = registerVal2
local function __FUNC_9D447_(arg0)
	local registerVal4 = Engine.GetModelValue(Engine.GetModel(CoD.perController[arg0].classModel, (CoD.perController[arg0].weaponCategory .. ".itemIndex")))
	local registerVal5 = Engine.GetNumAttachments(registerVal4)
	if CoD.perController[arg0].weaponCategory == "secondary" then
	end
	local registerVal8 = Engine.CurrentSessionMode()
	if registerVal8 == Enum.eModes.MODE_COUNT then
	end
	local registerVal9 = Engine.GetWeaponString(arg0, CoD.perController[arg0].classNum, CoD.perController[arg0].weaponCategory, Enum.eModes.MODE_MULTIPLAYER)
	local registerVal10 = CoD.CACUtility.GetCameraNameForAttachments(registerVal9)
	local function __FUNC_9DEDF_(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
		local registerVal7 = {}
		local registerVal8 = {}
		registerVal8.displayText = arg0
		registerVal8.type = arg1
		registerVal8.name = arg2
		registerVal8.image = "blacktransparent"
		registerVal8.paintjobSlot = arg4
		registerVal8.paintjobIndex = arg5
		registerVal8.paintjobSlotAndIndex = arg6
		registerVal7.models = registerVal8
		registerVal8 = {}
		registerVal8.weaponItemIndex = registerVal4
		registerVal7.properties = registerVal8
		return registerVal7
	end

	local function __FUNC_9E032_(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
		local registerVal7 = __FUNC_9DEDF_(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
		registerVal7.properties.viewWidget = "CoD.WeaponCustomizationSelect"
		registerVal7.properties.xcamNotetrack = registerVal10
		return registerVal7
	end

	local registerVal13 = Engine.GetModel(CoD.perController[arg0].classModel, (CoD.perController[arg0].weaponCategory .. "paintjobslot"))
	local registerVal14 = Engine.GetModel(CoD.perController[arg0].classModel, (CoD.perController[arg0].weaponCategory .. "paintjobindex"))
	local registerVal15 = Engine.GetModelValue(Engine.GetModel(registerVal13, "itemIndex"))
	local registerVal16 = Engine.GetModelValue(Engine.GetModel(registerVal14, "itemIndex"))
	local registerVal18 = Paintjobs_IsEnabled(nil, arg0)
	registerVal18 = IsUserContentRestricted(arg0)
	if registerVal18 and not registerVal18 then
		local registerVal19 = Engine.Localize("MENU_FILESHARE_CATEGORY_PAINTJOBS")
		table.insert({}, __FUNC_9E032_(registerVal19, "paintjob", "", nil, registerVal15, registerVal16, (registerVal15 .. " " .. registerVal16)))
	end
	registerVal18 = Engine.GetModel(CoD.perController[arg0].classModel, (CoD.perController[arg0].weaponCategory .. "camo"))
	registerVal19 = Engine.GetModelValue(Engine.GetModel(registerVal18, "image"))
	local registerVal20 = Engine.GetModelValue(Engine.GetModel(registerVal18, "name"))
	local registerVal21 = Engine.Localize("MPUI_CAMO")
	registerVal21 = __FUNC_9E032_(registerVal21, "camo", registerVal20, registerVal19, nil, nil, nil)
	registerVal21.properties.isCamo = true
	table.insert({}, registerVal21)
	local registerVal22 = AllowWeaponPrestige(arg0)
	registerVal22, registerVal23, registerVal24 = ipairs(CoD.CACUtility.mpPrestigeAttachments)
	for index25,value26 in registerVal22, registerVal23, registerVal24 do
		local registerVal27 = Engine.GetAttachmentIndexByAttachmentTableIndex(registerVal4, Engine.GetAttachmentIndexByRef(value26))
		if registerVal27 and CoD.CACUtility.EmptyItemIndex < registerVal27 then
			local registerVal28 = Engine.GetModelValue(Engine.GetModel(CoD.perController[arg0].classModel, (CoD.perController[arg0].weaponCategory .. CoD.CACUtility[(CoD.perController[arg0].weaponCategory .. "WeaponPrestigeSlot")] .. ".name")))
			local registerVal29 = Engine.GetModelValue(Engine.GetModel(CoD.perController[arg0].classModel, (CoD.perController[arg0].weaponCategory .. CoD.CACUtility[(CoD.perController[arg0].weaponCategory .. "WeaponPrestigeSlot")] .. ".image")))
			if registerVal28 == "" then
			end
			local registerVal33 = Engine.Localize("MENU_WEAPON_PRESTIGE")
			table.insert({}, __FUNC_9E032_(registerVal33, CoD.CACUtility[(CoD.perController[arg0].weaponCategory .. "WeaponPrestigeSlot")], "MPUI_NONE", registerVal29, nil, nil, nil))
		else
		end
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("WeaponCustomizationCategory", __FUNC_9D447_, false)
DataSources["WeaponCustomCategory"] = registerVal2
registerVal2 = {}
local function __FUNC_9E10E_(arg0, arg1, arg2)
	if not CoD.WeaponOptionsTable then
		local registerVal4 = CoD.GetWeaponOptionsTable(arg0, arg1, arg2)
		CoD.WeaponOptionsTable = registerVal4
	end
	arg1.weaponOptions = CoD.WeaponOptionsTable
end

registerVal2.prepare = __FUNC_9E10E_
local function __FUNC_9E1EB_(arg0)
	if not DataSources.WeaponOptions.currentFilter and arg0.weaponOptions.filterList then
		return #arg0.weaponOptions.filterList
	else
		if arg0.weaponOptions[DataSources.WeaponOptions.currentFilter] then
			return #arg0.weaponOptions[DataSources.WeaponOptions.currentFilter]
		end
		return 0.000000
	end
end

registerVal2.getCount = __FUNC_9E1EB_
local function __FUNC_9E337_(arg0, arg1, arg2)
	if not DataSources.WeaponOptions.currentFilter and arg1.weaponOptions.filterList then
		return arg1.weaponOptions.filterList[arg2]
	else
		if arg1.weaponOptions[DataSources.WeaponOptions.currentFilter] then
			return arg1.weaponOptions[DataSources.WeaponOptions.currentFilter][arg2]
		end
	end
end

registerVal2.getItem = __FUNC_9E337_
local function __FUNC_9E486_(arg0)
	DataSources.WeaponOptions.currentFilter = arg0
end

registerVal2.setCurrentFilterItem = __FUNC_9E486_
local function __FUNC_9E507_()
	return DataSources.WeaponOptions.currentFilter
end

registerVal2.getCurrentFilterItem = __FUNC_9E507_
registerVal2.currentFilter = nil
local function __FUNC_9E593_(arg0)
	DataSources.WeaponOptions.currentFilterNoMode = arg0
end

registerVal2["setCurrentFilterItemNoMode"] = __FUNC_9E593_
local function __FUNC_9E619_()
	return DataSources.WeaponOptions.currentFilterNoMode
end

registerVal2["getCurrentFilterItemNoMode"] = __FUNC_9E619_
registerVal2["currentFilterNoMode"] = nil
DataSources["WeaponOptions"] = registerVal2
registerVal2 = {}
local function __FUNC_9E6AD_(arg0, arg1, arg2)
	if not CoD.GunsmithWeaponOptionsTable then
		local registerVal4 = CoD.GetGunsmithWeaponOptionsTable(arg0, arg1, arg2)
		CoD.GunsmithWeaponOptionsTable = registerVal4
	end
	arg1.gunsmithWeaponOptions = CoD.GunsmithWeaponOptionsTable
end

registerVal2.prepare = __FUNC_9E6AD_
local function __FUNC_9E7A3_(arg0)
	if not DataSources.GunsmithWeaponOptions.currentFilter and arg0.gunsmithWeaponOptions.filterList then
		return #arg0.gunsmithWeaponOptions.filterList
	else
		if arg0.gunsmithWeaponOptions[DataSources.GunsmithWeaponOptions.currentFilter] then
			return #arg0.gunsmithWeaponOptions[DataSources.GunsmithWeaponOptions.currentFilter]
		end
		return 0.000000
	end
end

registerVal2.getCount = __FUNC_9E7A3_
local function __FUNC_9E8FF_(arg0, arg1, arg2)
	if not DataSources.GunsmithWeaponOptions.currentFilter and arg1.gunsmithWeaponOptions.filterList then
		return arg1.gunsmithWeaponOptions.filterList[arg2]
	else
		if arg1.gunsmithWeaponOptions[DataSources.GunsmithWeaponOptions.currentFilter] then
			return arg1.gunsmithWeaponOptions[DataSources.GunsmithWeaponOptions.currentFilter][arg2]
		end
	end
end

registerVal2.getItem = __FUNC_9E8FF_
local function __FUNC_9EA5E_(arg0)
	DataSources.GunsmithWeaponOptions.currentFilter = arg0
end

registerVal2.setCurrentFilterItem = __FUNC_9EA5E_
local function __FUNC_9EAE7_()
	return DataSources.GunsmithWeaponOptions.currentFilter
end

registerVal2.getCurrentFilterItem = __FUNC_9EAE7_
registerVal2.currentFilter = nil
local function __FUNC_9EB7B_(arg0)
	DataSources.GunsmithWeaponOptions.currentFilterNoMode = arg0
end

registerVal2["setCurrentFilterItemNoMode"] = __FUNC_9EB7B_
local function __FUNC_9EC09_()
	return DataSources.GunsmithWeaponOptions.currentFilterNoMode
end

registerVal2["getCurrentFilterItemNoMode"] = __FUNC_9EC09_
registerVal2["currentFilterNoMode"] = nil
DataSources["GunsmithWeaponOptions"] = registerVal2
local function __FUNC_9ECA5_(arg0)
	local function __FUNC_9F093_(arg1, arg2)
		local registerVal3 = CoD.BlackMarketUtility.IsItemLocked(arg0, arg1.acvName)
		if registerVal3 then
			local registerVal5 = CoD.BlackMarketUtility.ClassifiedName()
		end
		registerVal5 = {}
		local registerVal6 = {}
		local registerVal7 = Engine.Localize(registerVal5)
		registerVal6.name = registerVal7
		if not arg1.image then
		end
		registerVal6.image = "blacktransparent"
		registerVal6.variantIndex = arg1.variantIndex
		registerVal6.isBMClassified = registerVal3
		registerVal7 = {}
		local registerVal8 = CoD.BlackMarketUtility.GetRarityForLootItemFromName(arg1.acvName)
		registerVal7.rarity = registerVal8
		registerVal7.isBMClassified = registerVal3
		registerVal8 = CoD.BlackMarketUtility.GetItemQuantity(arg0, arg1.acvName)
		registerVal7.duplicateCount = registerVal8
		registerVal6.rarityType = registerVal7
		registerVal5.models = registerVal6
		registerVal6 = {}
		registerVal6.attachmentRef = arg2
		registerVal6.variantIndex = arg1.variantIndex
		registerVal6.itemIndex = CoD.WC_Category.ACV.selectedAttachmentIndex
		registerVal6.attachmentTableIndex = CoD.WC_Category.ACV.attachmentTable[arg2].attachmentIndex
		registerVal5.properties = registerVal6
		return registerVal5
	end

	local registerVal3 = Engine.GetAttachmentUniqueImageByIndex(CoD.WC_Category.ACV.selectedAttachmentWeaponIndex, CoD.WC_Category.ACV.selectedAttachmentIndex)
	local registerVal5 = {}
	registerVal5.name = "MENU_DEFAULT"
	registerVal5.image = registerVal3
	registerVal5.variantIndex = 0.000000
	local registerVal6 = __FUNC_9F093_(registerVal5, CoD.WC_Category.ACV.selectedAttachment)
	registerVal6.models.isClassified = false
	table.insert({}, registerVal6)
	local registerVal7, registerVal8, registerVal9 = ipairs(CoD.WC_Category.ACV.attachmentTable[CoD.WC_Category.ACV.selectedAttachment].variants)
	for index10,value11 in registerVal7, registerVal8, registerVal9 do
		table.insert({}, __FUNC_9F093_(value11, CoD.WC_Category.ACV.selectedAttachment))
	end
	table.sort({}, CoD.BlackMarketUtility.SortUnlocksPropertyVariantIndex)
	return {}
end

registerVal2 = ListHelper_SetupDataSource("AttachmentCosmeticVariantList", __FUNC_9ECA5_, true)
DataSources["AttachmentCosmeticVariantList"] = registerVal2
local function __FUNC_9F4BB_(arg0)
	local function __FUNC_9F9E3_(arg1, arg2, arg3)
		local registerVal3 = CoD.BlackMarketUtility.IsItemLocked(arg0, arg1.acvName)
		if registerVal3 then
			local registerVal5 = CoD.BlackMarketUtility.ClassifiedName()
		end
		registerVal5 = CoD.BlackMarketUtility.GetRarityForLootItemFromName(arg1.acvName)
		local registerVal6 = {}
		local registerVal7 = {}
		local registerVal8 = Engine.Localize(registerVal5)
		registerVal7.name = registerVal8
		if not arg1.image then
		end
		registerVal7.image = "blacktransparent"
		registerVal7.variantIndex = arg1.variantIndex
		registerVal7.isBMClassified = registerVal3
		registerVal7.attachmentIndex = arg3
		registerVal8 = {}
		registerVal8.rarity = registerVal5
		registerVal8.isBMClassified = registerVal3
		registerVal7.rarityType = registerVal8
		registerVal6.models = registerVal7
		registerVal7 = {}
		registerVal7.attachmentRef = arg2
		registerVal7.variantIndex = arg1.variantIndex
		registerVal7.attachmentTableIndex = arg3
		registerVal6.properties = registerVal7
		return registerVal6
	end

	local registerVal5 = CoD.CraftUtility.Gunsmith.GetWeaponPlusAttachmentsForVariant(arg0, CoD.perController[arg0].gunsmithVariantModel)
	local registerVal6 = Engine.GetAttachmentCosmeticVariantTable(registerVal5)
	local registerVal7 = Engine.GetModelValue(CoD.perController[arg0].gunsmithAttachmentModel)
	local registerVal8 = Engine.GetAttachmentRefByIndex(registerVal7)
	local registerVal9 = CoD.GetCustomization(arg0, "weapon_index")
	local registerVal10 = Engine.GetAttachmentUniqueImageByAttachmentIndex(Enum.eModes.MODE_MULTIPLAYER, registerVal9, registerVal7)
	local registerVal11 = {}
	registerVal11.name = "MENU_DEFAULT"
	registerVal11.image = registerVal10
	registerVal11.variantIndex = 0.000000
	local registerVal12 = __FUNC_9F9E3_(registerVal11, registerVal8, registerVal7)
	registerVal12.models.isClassified = false
	table.insert({}, registerVal12)
	local registerVal13, registerVal14, registerVal15 = ipairs(registerVal6[registerVal8].variants)
	for index16,value17 in registerVal13, registerVal14, registerVal15 do
		table.insert({}, __FUNC_9F9E3_(value17, registerVal8, registerVal7))
	end
	table.sort({}, CoD.BlackMarketUtility.SortUnlocksPropertyVariantIndex)
	return {}
end

registerVal2 = ListHelper_SetupDataSource("GunsmithAttachmentVariantList", __FUNC_9F4BB_, true)
DataSources["GunsmithAttachmentVariantList"] = registerVal2
registerVal2 = {}
local function __FUNC_9FCDB_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "Arena")
	registerVal2 = Engine.GetCurrentArenaSeason()
	local registerVal3 = Engine.GetCurrentArenaSeasonTimeRemaining()
	local registerVal5 = Engine.CreateModel(registerVal1, "season")
	Engine.SetModelValue(registerVal5, registerVal2)
	registerVal5 = Engine.CreateModel(registerVal1, "seasonTimeleft")
	Engine.SetModelValue(registerVal5, registerVal3)
	return registerVal1
end

registerVal2.getModel = __FUNC_9FCDB_
DataSources["Arena"] = registerVal2
registerVal2 = {}
local function __FUNC_9FE9A_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	return Engine.CreateModel(registerVal2, "ArenaRank")
end

registerVal2.getModel = __FUNC_9FE9A_
DataSources["ArenaRank"] = registerVal2
local function __FUNC_9FF4F_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "Arena")
	registerVal2 = Engine.CreateModel(registerVal1, "selectedPlayerPoints")
	local registerVal3 = Engine.GetModelValue(registerVal2)
	local registerVal4 = CoD.ArenaUtility.GetRankVisibleStars(registerVal3)
	local registerVal5 = CoD.ArenaUtility.GetStarCount(registerVal3)
	for index7=0.000000, (registerVal4 - 1.000000), 1.000000 do
		if index7 >= registerVal5 then
		end
		local registerVal14 = {}
		local registerVal15 = {}
		registerVal15.earned = true
		registerVal14.models = registerVal15
		table.insert({}, registerVal14)
	end
	return {}
end

local function __FUNC_A0194_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "Arena")
	registerVal4 = Engine.CreateModel(registerVal3, "selectedPlayerPoints")
	if arg1.updateSubscription then
		arg1:removeSubscription(arg1.updateSubscription)
	end
	local function __FUNC_A0308_()
		arg1:updateDataSource()
	end

	local registerVal5 = arg1:subscribeToModel(registerVal4, __FUNC_A0308_, false)
	arg1.updateSubscription = registerVal5
end

registerVal2 = ListHelper_SetupDataSource("ArenaInspectionStars", __FUNC_9FF4F_, nil, nil, __FUNC_A0194_)
DataSources["ArenaInspectionStars"] = registerVal2
local function __FUNC_A035A_(arg0)
	local registerVal2 = IsArenaMode()
	if not registerVal2 then
		return {}
	end
	registerVal2 = PregameItemVoteEnabled()
	if registerVal2 then
		local registerVal4 = {}
		local registerVal5 = {}
		local registerVal6 = Engine.Localize("MENU_BAN_PROTECT_ACTIVE_CAPS")
		registerVal5.text = registerVal6
		registerVal4.models = registerVal5
		table.insert({}, registerVal4)
	end
	registerVal2 = CharacterDraftEnabled()
	if registerVal2 then
		registerVal4 = {}
		registerVal5 = {}
		registerVal6 = Engine.Localize("MENU_DRAFT_ACTIVE_CAPS")
		registerVal5.text = registerVal6
		registerVal4.models = registerVal5
		table.insert({}, registerVal4)
	end
	return {}
end

local function __FUNC_A0539_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.GetModel(registerVal4, "lobbyRoot")
	registerVal4 = Engine.GetModel(registerVal3, "lobbyNav")
	if arg1.lobbyNavSubscription then
		arg1:removeSubscription(arg1.lobbyNavSubscription)
	end
	local function __FUNC_A06A3_()
		arg1:updateDataSource(true, false)
	end

	local registerVal5 = arg1:subscribeToModel(registerVal4, __FUNC_A06A3_, false)
	arg1.lobbyNavSubscription = registerVal5
end

registerVal2 = ListHelper_SetupDataSource("ArenaActiveRules", __FUNC_A035A_, nil, nil, __FUNC_A0539_)
DataSources["ArenaActiveRules"] = registerVal2
registerVal2 = {}
local function __FUNC_A06FA_(arg0)
	local registerVal1 = Engine.GetCurrentArenaSeason()
	local registerVal2 = Engine.GetArenaSeasonStartTime(registerVal1)
	local registerVal3 = Engine.GetArenaSeasonStartTime((registerVal1 - 1.000000))
	local registerVal4 = Engine.GetMonthStringForTimestamp(registerVal2)
	local registerVal5 = Engine.GetMonthStringForTimestamp(registerVal3)
	local registerVal7 = Engine.GetModelForController(arg0)
	local registerVal6 = Engine.CreateModel(registerVal7, "ArenaSeasonMonths")
	local registerVal8 = Engine.CreateModel(registerVal6, "currentSeasonMonth")
	Engine.SetModelValue(registerVal8, registerVal4)
	registerVal8 = Engine.CreateModel(registerVal6, "previousSeasonMonth")
	Engine.SetModelValue(registerVal8, registerVal5)
	return registerVal6
end

registerVal2.getModel = __FUNC_A06FA_
DataSources["ArenaSeasonMonths"] = registerVal2
registerVal2 = {}
local function __FUNC_A094C_(arg0, arg1, arg2)
end

registerVal2.prepare = __FUNC_A094C_
local function __FUNC_A0978_(arg0)
	return LuaEnums.MAX_CLIENTS
end

registerVal2.getCount = __FUNC_A0978_
local function __FUNC_A09DF_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.GetModel(registerVal4, "hudItems.voipInfo")
	if registerVal3 then
		local registerVal7 = tostring(arg2)
		return Engine.GetModel(registerVal3, ("voip" .. registerVal7))
	end
end

registerVal2.getItem = __FUNC_A09DF_
DataSources["FrontendVoip"] = registerVal2
registerVal2 = {}
local function __FUNC_A0AEC_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.GetModel(registerVal4, "lobbyRoot.gameClient.update")
	if arg1.teamCountSubscription then
		arg1:removeSubscription(arg1.teamCountSubscription)
	end
	local function __FUNC_A1877_()
		arg1:updateDataSource()
	end

	registerVal4 = arg1:subscribeToModel(registerVal3, __FUNC_A1877_, false)
	arg1.teamCountSubscription = registerVal4
	registerVal4 = Engine.LobbyGetSessionClients(Enum.LobbyModule.LOBBY_MODULE_CLIENT, Enum.LobbyType.LOBBY_TYPE_GAME)
	{}.teamInfo = {}
	{}.teamInfo[1.000000] = {}
	{}.teamInfo[2.000000] = {}
	local registerVal8 = Engine.GetGametypeSetting("teamCount")
	registerVal8 = Dvar.ui_gametype:get()
	if registerVal8 >= 2.000000 and registerVal8 ~= "infect" then
	end
	if true then
	end
	arg1.maxMembersToShowOnEachTeam = 12.000000
	if registerVal4 and registerVal4.sessionClients then
	else
		return 
	end
	for index11=1.000000, #0.000000, 1.000000 do
		if not true and registerVal4.sessionClients[index11].team == Enum.team_t.TEAM_ALLIES or registerVal4.sessionClients[index11].team == Enum.team_t.TEAM_FREE then
			local registerVal22 = {}
			registerVal22.name = registerVal4.sessionClients[index11].gamertag
			registerVal22.clantag = registerVal4.sessionClients[index11].clantag
			registerVal22.xuid = registerVal4.sessionClients[index11].xuid
			registerVal22.team = registerVal4.sessionClients[index11].team
			table.insert({}.teamInfo[1.000000], registerVal22)
		else
			if registerVal4.sessionClients[index11].team == Enum.team_t.TEAM_AXIS then
				registerVal22 = {}
				registerVal22.name = registerVal4.sessionClients[index11].gamertag
				registerVal22.clantag = registerVal4.sessionClients[index11].clantag
				registerVal22.xuid = registerVal4.sessionClients[index11].xuid
				registerVal22.team = registerVal4.sessionClients[index11].team
				table.insert({}.teamInfo[2.000000], registerVal22)
			end
		end
		local registerVal20 = Engine.GetXUID64(arg0)
		if registerVal20 == registerVal4.sessionClients[index11].xuid then
		end
	end
	local registerVal11 = Engine.GetGlobalModel()
	local registerVal12 = Engine.CreateModel(registerVal11, "LoadingScreenInfo")
	local registerVal13 = Engine.CreateModel(registerVal12, "LoadingScreenPlayerList")
	local registerVal14 = Engine.CreateModel(registerVal13, "team1")
	local registerVal15 = Engine.CreateModel(registerVal14, "count")
	local registerVal16 = Engine.CreateModel(registerVal13, "team2")
	local registerVal17 = Engine.CreateModel(registerVal16, "count")
	arg1.team1CountModel = registerVal15
	arg1.team1BaseModel = registerVal14
	arg1.team2CountModel = registerVal17
	arg1.team2BaseModel = registerVal16
	{}.teamInfo[1.000000].teamModel = registerVal14
	{}.teamInfo[2.000000].teamModel = registerVal16
	Engine.SetModelValue(registerVal15, #{}.teamInfo[1.000000])
	Engine.SetModelValue(registerVal17, #{}.teamInfo[2.000000])
	if not true and registerVal4.sessionClients[index11].team ~= Enum.team_t.TEAM_ALLIES then
		{}.teamInfo[1.000000].teamModel = registerVal16
		{}.teamInfo[2.000000].teamModel = registerVal14
		Engine.SetModelValue(registerVal15, #{}.teamInfo[2.000000])
		Engine.SetModelValue(registerVal17, #{}.teamInfo[1.000000])
	end
	for index18=1.000000, 2.000000, 1.000000 do
		for index22=1.000000, 12.000000, 1.000000 do
			local registerVal26 = Engine.CreateModel({}.teamInfo[index18].teamModel, ("member" .. index22))
			if {}.teamInfo[index18][index22] then
				local registerVal27 = Engine.CreateModel(registerVal26, "playerxuid")
				Engine.SetModelValue(registerVal27, {}.teamInfo[index18][index22].xuid)
				local registerVal28 = Engine.CreateModel(registerVal26, "playerName")
				Engine.SetModelValue(registerVal28, {}.teamInfo[index18][index22].name)
				local registerVal29 = Engine.CreateModel(registerVal26, "playerHeroLoadoutItem")
				local registerVal32 = Engine.CurrentSessionMode()
				local registerVal31 = Engine.GetHeroLoadoutItemIndexLobbyData(registerVal32, {}.teamInfo[index18][index22].xuid)
				if registerVal31 ~= 0.000000 then
					local registerVal33 = Engine.GetItemName(registerVal31)
				end
				Engine.SetModelValue(registerVal29, registerVal33)
				registerVal33 = Engine.CreateModel(registerVal26, "isSelfPlayerName")
				local registerVal36 = Engine.GetMaxControllerCount()
				for index35=0.000000, (registerVal36 - 1.000000), 1.000000 do
					local registerVal39 = Engine.GetXUID64(index35)
					if registerVal39 ~= {}.teamInfo[index18][index22].xuid then
					end
					if true then
					else
					end
				end
				Engine.SetModelValue(registerVal33, true)
				registerVal36 = Engine.CreateModel(registerVal26, "team")
				Engine.SetModelValue(registerVal36, {}.teamInfo[index18][index22].team)
			end
		end
	end
end

registerVal2.prepare = __FUNC_A0AEC_
local function __FUNC_A18C6_(arg0)
	local registerVal1 = Engine.GameModeIsMode(CoD.GAMEMODE_THEATER)
	if registerVal1 then
		return 0.000000
	end
	registerVal1 = Engine.GetModelValue(arg0.team1CountModel)
	local registerVal2 = Engine.GetModelValue(arg0.team2CountModel)
	local registerVal4 = Engine.GetGametypeSetting("teamCount")
	registerVal4 = Dvar.ui_gametype:get()
	if registerVal4 >= 2.000000 and registerVal4 ~= "infect" then
	end
	if registerVal1 or registerVal1 > arg0.maxMembersToShowOnEachTeam then
		if registerVal1 <= arg0.maxMembersToShowOnEachTeam and registerVal2 <= arg0.maxMembersToShowOnEachTeam then
			return registerVal1
		end
	end
	return 0.000000
end

registerVal2.getCount = __FUNC_A18C6_
local function __FUNC_A1B19_(arg0, arg1, arg2)
	return Engine.GetModel(arg1.team1BaseModel, ("member" .. arg2))
end

registerVal2.getItem = __FUNC_A1B19_
DataSources["LoadingScreenPlayerListTeam1"] = registerVal2
registerVal2 = {}
local function __FUNC_A1BBE_(arg0, arg1, arg2)
	DataSources.LoadingScreenPlayerListTeam1.prepare(arg0, arg1, arg2)
end

registerVal2.prepare = __FUNC_A1BBE_
local function __FUNC_A1C60_(arg0)
	local registerVal1 = Engine.GameModeIsMode(CoD.GAMEMODE_THEATER)
	if registerVal1 then
		return 0.000000
	end
	registerVal1 = Engine.GetModelValue(arg0.team1CountModel)
	local registerVal2 = Engine.GetModelValue(arg0.team2CountModel)
	if registerVal1 <= arg0.maxMembersToShowOnEachTeam and registerVal2 <= arg0.maxMembersToShowOnEachTeam then
		return registerVal2
	end
	return 0.000000
end

registerVal2.getCount = __FUNC_A1C60_
local function __FUNC_A1DE9_(arg0, arg1, arg2)
	return Engine.GetModel(arg1.team2BaseModel, ("member" .. arg2))
end

registerVal2.getItem = __FUNC_A1DE9_
DataSources["LoadingScreenPlayerListTeam2"] = registerVal2
registerVal2 = {}
local function __FUNC_A1E8E_(arg0)
	local registerVal1 = Engine.GetGlobalModel()
	local registerVal2 = Engine.CreateModel(registerVal1, "MapInfo")
	local registerVal3 = Engine.CreateModel(registerVal2, "gameTypeIcon")
	Engine.SetModelValue(registerVal3, CoD.GetLoadingScreenGameTypeIconName())
	local registerVal4 = Engine.CreateModel(registerVal2, "gameType")
	Engine.SetModelValue(registerVal4, Engine.GetCurrentGametypeName(arg0))
	local registerVal5 = Engine.CreateModel(registerVal2, "mapName")
	Engine.SetModelValue(registerVal5, MapNameToLocalizedMapName(Engine.GetCurrentMap()))
	local registerVal6 = Engine.CreateModel(registerVal2, "mapImage")
	local registerVal8 = Dvar.ui_mapname:get()
	local registerVal7 = CoD.GetMapValue(registerVal8, "loadingImage", "black")
	registerVal8 = Engine.IsUsingUsermap()
	if registerVal8 then
	end
	Engine.SetModelValue(registerVal6, "img_t7_mod_loading")
	registerVal8 = Engine.IsCampaignModeZombies()
	if not registerVal8 then
		registerVal8 = Engine.CreateModel(registerVal2, "dateTime")
		local registerVal12 = Engine.GetCurrentMapName()
		Engine.SetModelValue(registerVal8, CoD.GetMapValue(registerVal12, "mapDateTime", ""))
	end
	registerVal8 = Engine.CreateModel(registerVal2, "location")
	Engine.SetModelValue(registerVal8, Dvar.ls_maplocation:get())
	return registerVal2
end

registerVal2.getModel = __FUNC_A1E8E_
DataSources["MapInfo"] = registerVal2
registerVal2 = {}
local function __FUNC_A239B_(arg0)
	local registerVal1 = Engine.GetModelForController(arg0)
	local registerVal2 = Engine.CreateModel(registerVal1, "LoadingScreenInfo")
	local registerVal3 = Engine.CreateModel(registerVal2, "LoadingScreenTeamInfo")
	local registerVal4 = Engine.CreateModel(registerVal3, "team1FactionName")
	local registerVal5 = Engine.CreateModel(registerVal3, "team2FactionName")
	local registerVal6 = Engine.CreateModel(registerVal3, "team1FactionIcon")
	local registerVal7 = Engine.CreateModel(registerVal3, "team2FactionIcon")
	local registerVal8 = Engine.CreateModel(registerVal3, "team1FactionColor")
	local registerVal9 = Engine.CreateModel(registerVal3, "team2FactionColor")
	local registerVal10 = Engine.CreateModel(registerVal3, "gameTypeIcon")
	local registerVal11 = Engine.CreateModel(registerVal3, "gameType")
	local registerVal12 = Engine.CreateModel(registerVal3, "mapName")
	local registerVal13 = Engine.CreateModel(registerVal3, "location")
	local registerVal14 = Engine.CreateModel(registerVal3, "tip")
	local registerVal15 = Engine.CreateModel(registerVal3, "statusText")
	local registerVal16 = Engine.CreateModel(registerVal3, "loadedFraction")
	local registerVal19 = CoD.GetTeamID(arg0)
	local registerVal20 = {}
	local registerVal21 = CoD.GetTeamNameCaps(Enum.team_t.TEAM_ALLIES)
	registerVal20.name = registerVal21
	registerVal21 = CoD.GetTeamFactionIcon(Enum.team_t.TEAM_ALLIES)
	registerVal20.icon = registerVal21
	registerVal21 = CoD.GetTeamFactionColor(Enum.team_t.TEAM_ALLIES)
	registerVal20.color = registerVal21
	registerVal21 = {}
	local registerVal22 = CoD.GetTeamNameCaps(Enum.team_t.TEAM_AXIS)
	registerVal21.name = registerVal22
	registerVal22 = CoD.GetTeamFactionIcon(Enum.team_t.TEAM_AXIS)
	registerVal21.icon = registerVal22
	registerVal22 = CoD.GetTeamFactionColor(Enum.team_t.TEAM_AXIS)
	registerVal21.color = registerVal22
	if registerVal19 == Enum.team_t.TEAM_SPECTATOR then
		registerVal22 = CoD.ShoutcasterProfileVarBool(arg0, "shoutcaster_flip_scorepanel")
		if registerVal22 then
		else
		else
			if registerVal19 == Enum.team_t.TEAM_ALLIES then
			else
			end
		end
	end
	Engine.SetModelValue(registerVal4, registerVal21.name)
	Engine.SetModelValue(registerVal6, registerVal21.icon)
	Engine.SetModelValue(registerVal8, registerVal21.color)
	Engine.SetModelValue(registerVal5, registerVal20.name)
	Engine.SetModelValue(registerVal7, registerVal20.icon)
	Engine.SetModelValue(registerVal9, registerVal20.color)
	Engine.SetModelValue(registerVal10, CoD.GetLoadingScreenGameTypeIconName())
	Engine.SetModelValue(registerVal11, Engine.GetCurrentGametypeName(arg0))
	Engine.SetModelValue(registerVal12, MapNameToLocalizedMapName(Engine.GetCurrentMap()))
	Engine.SetModelValue(registerVal13, "")
	if CoD.Loading ~= nil then
		Engine.SetModelValue(registerVal14, CoD.Loading.GetDidYouKnowString())
	end
	Engine.SetModelValue(registerVal15, "")
	Engine.SetModelValue(registerVal16, 0.000000)
	return registerVal3
end

registerVal2.getModel = __FUNC_A239B_
DataSources["LoadingScreenTeamInfo"] = registerVal2
registerVal2 = {}
local function __FUNC_A2D40_(arg0)
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal2 = Engine.CreateModel(registerVal3, "AbilityWheel")
	local registerVal4 = Engine.GetModelForController(arg0)
	registerVal3 = Engine.GetModel(registerVal4, "hudItems.cybercomRequestedType")
	Engine.CreateModel(registerVal2, "selectedAbilityDisplayName")
	Engine.CreateModel(registerVal2, "selectedAbilityDisplayDesc")
	Engine.CreateModel(registerVal2, "selectedAbilityDisplayIcon")
	registerVal4 = Engine.GetModelValue(registerVal3)
	if registerVal4 == nil then
		Engine.SetModelValue(registerVal3, 0.000000)
	end
	registerVal4 = Engine.GetModelValue(registerVal3)
	local registerVal5 = {}
	registerVal5 = {"MENU_CONTROL", "MENU_MARTIAL", "MENU_CHAOS", "MENU_DEMO"}
	local registerVal7 = Engine.CreateModel(registerVal2, "name")
	Engine.SetModelValue(registerVal7, registerVal5[(registerVal4 + 1.000000)])
	local function __FUNC_A35D2_(arg0)
		local registerVal1 = Engine.CreateModel(arg0, "name")
		Engine.SetModelValue(registerVal1, nil)
		local registerVal2 = Engine.CreateModel(arg0, "image")
		Engine.SetModelValue(registerVal2, nil)
		local registerVal3 = Engine.CreateModel(arg0, "enabled")
		Engine.SetModelValue(registerVal3, false)
	end

	for index9=1.000000, CoD.CACUtility.maxAbilities, 1.000000 do
		local registerVal13 = Engine.GetTacticalMenuItems(arg0, (index9 - 1.000000), registerVal4)
		if registerVal13.contextual then
			local registerVal15 = Engine.CreateModel(registerVal2, ("AbilityWheelContextualWeapon" .. (0.000000 + 1.000000)))
		else
			registerVal15 = Engine.CreateModel(registerVal2, ("AbilityWheelWeapon" .. CoD.CACUtility.abilityButtonNumMapping[(0.000000 + 1.000000)]))
		end
		registerVal15 = Engine.CreateModel(registerVal15, "image")
		Engine.SetModelValue(registerVal15, registerVal13.image)
		local registerVal16 = Engine.CreateModel(registerVal15, "name")
		Engine.SetModelValue(registerVal16, registerVal13.name)
		local registerVal17 = Engine.CreateModel(registerVal15, "displayName")
		Engine.SetModelValue(registerVal17, registerVal13.displayName)
		local registerVal18 = Engine.CreateModel(registerVal15, "abilityFlag")
		Engine.SetModelValue(registerVal18, registerVal13.abilityFlag)
		local registerVal19 = Engine.CreateModel(registerVal15, "enabled")
		if registerVal13.enabled == nil then
			Engine.SetModelValue(registerVal19, true)
		else
			Engine.SetModelValue(registerVal19, registerVal13.enabled)
		end
		local registerVal20 = Engine.CreateModel(registerVal15, "description")
		if registerVal13.description ~= nil then
			Engine.SetModelValue(registerVal20, ("weapon_" .. registerVal13.description))
		end
		local registerVal21 = Engine.CreateModel(registerVal15, "enemyTypeIcon")
		if registerVal13.enemyTypeIcon ~= nil then
			Engine.SetModelValue(registerVal21, registerVal13.enemyTypeIcon)
		end
	end
	for index9=((0.000000 + 1.000000) + 1.000000), CoD.CACUtility.maxAbilityWheelItems, 1.000000 do
		registerVal13 = Engine.CreateModel(registerVal2, ("AbilityWheelWeapon" .. CoD.CACUtility.abilityButtonNumMapping[index9]))
		__FUNC_A35D2_(registerVal13)
	end
	for index9=((0.000000 + 1.000000) + 1.000000), CoD.CACUtility.maxContextualAbilityItems, 1.000000 do
		registerVal13 = Engine.CreateModel(registerVal2, ("AbilityWheelContextualWeapon" .. index9))
		__FUNC_A35D2_(registerVal13)
	end
	return registerVal2
end

registerVal2.getModel = __FUNC_A2D40_
DataSources["AbilityWheel"] = registerVal2
registerVal2 = {}
local function __FUNC_A370E_(arg0)
	local registerVal1 = {}
	local registerVal2 = {}
	registerVal2.disabled = false
	registerVal2.cameraMode = Enum.demoCameraMode.DEMO_CAMERA_MODE_NONE
	registerVal2.image = "t7_hud_ks_drone_hunter_drop"
	registerVal2.displayName = "MENU_DEMO_DVR_FIRST_PERSON"
	local registerVal3 = {}
	registerVal3.disabled = false
	registerVal3.cameraMode = Enum.demoCameraMode.DEMO_CAMERA_MODE_THIRDPERSON
	registerVal3.image = "t7_hud_ks_drone_amws_drop"
	registerVal3.displayName = "MENU_DEMO_DVR_THIRD_PERSON"
	local registerVal4 = {}
	registerVal4.disabled = false
	registerVal4.cameraMode = Enum.demoCameraMode.DEMO_CAMERA_MODE_FREECAM
	registerVal4.freeCameraMode = Enum.demoFreeCameraMode.DEMO_FREECAM_MODE_FREEROAM
	registerVal4.image = "t7_hud_ks_auto_sentry_drop"
	registerVal4.displayName = "MENU_DEMO_DVR_FREE_CAMERA"
	local registerVal5 = {}
	registerVal5.disabled = false
	registerVal5.cameraMode = Enum.demoCameraMode.DEMO_CAMERA_MODE_FREECAM
	registerVal5.freeCameraMode = Enum.demoFreeCameraMode.DEMO_FREECAM_MODE_LIGHTMAN
	registerVal5.image = "t7_hud_ks_drone_attack_drop"
	registerVal5.displayName = "MENU_DEMO_DVR_LIGHTMAN"
	local registerVal6 = {}
	registerVal6.disabled = false
	registerVal6.cameraMode = Enum.demoCameraMode.DEMO_CAMERA_MODE_FREECAM
	registerVal6.freeCameraMode = Enum.demoFreeCameraMode.DEMO_FREECAM_MODE_LOCK_ON
	registerVal6.image = "t7_hud_ks_drone_dart_drop"
	registerVal6.displayName = "MENU_DEMO_DVR_LOCK_ON_CAMERA"
	local registerVal7 = {}
	local registerVal8 = Engine.IsDemoClipRecording()
	registerVal7.disabled = registerVal8
	registerVal7.cameraMode = Enum.demoCameraMode.DEMO_CAMERA_MODE_FREECAM
	registerVal7.freeCameraMode = Enum.demoFreeCameraMode.DEMO_FREECAM_MODE_EDIT
	registerVal7.image = "t7_hud_ks_drone_cuav_drop"
	registerVal7.displayName = "MENU_DEMO_DVR_EDIT_DOLLY_CAMERA"
	registerVal8 = {}
	registerVal8.disabled = false
	registerVal8.cameraMode = Enum.demoCameraMode.DEMO_CAMERA_MODE_FREECAM
	registerVal8.freeCameraMode = Enum.demoFreeCameraMode.DEMO_FREECAM_MODE_DOLLY
	registerVal8.image = "t7_hud_ks_emp_core_drop"
	registerVal8.displayName = "MENU_DEMO_DVR_DOLLY_CAMERA"
	registerVal1 = {registerVal2, registerVal3, registerVal4, registerVal5, registerVal6, registerVal7, registerVal8}
	registerVal3 = Engine.GetModelForController(arg0)
	registerVal2 = Engine.CreateModel(registerVal3, "SwitchCameraWheel")
	Engine.CreateModel(registerVal2, "selectedCameraDisplayName")
	Engine.CreateModel(registerVal2, "selectedCameraDisplayDesc")
	registerVal4 = Engine.CreateModel(registerVal2, "name")
	Engine.SetModelValue(registerVal4, Engine.ToUpper(Engine.Localize("MENU_DEMO_CONTROLS_SWITCH_CAMERA")))
	for index3=1.000000, #registerVal4, 1.000000 do
		registerVal8 = Engine.CreateModel(registerVal2, ("Camera" .. index3))
		local registerVal9 = Engine.CreateModel(registerVal8, "displayName")
		Engine.SetModelValue(registerVal9, Engine.Localize(registerVal1[index3].displayName))
		local registerVal10 = Engine.CreateModel(registerVal8, "description")
		Engine.SetModelValue(registerVal10, Engine.Localize((registerVal1[index3].displayName .. "_DESC")))
		local registerVal11 = Engine.CreateModel(registerVal8, "image")
		Engine.SetModelValue(registerVal11, registerVal1[index3].image)
		local registerVal12 = Engine.CreateModel(registerVal8, "disabled")
		Engine.SetModelValue(registerVal12, registerVal1[index3].disabled)
		local registerVal13 = Engine.CreateModel(registerVal8, "cameraMode")
		Engine.SetModelValue(registerVal13, registerVal1[index3].cameraMode)
		if registerVal1[index3].freeCameraMode ~= nil then
			local registerVal14 = Engine.CreateModel(registerVal8, "freeCameraMode")
			Engine.SetModelValue(registerVal14, registerVal1[index3].freeCameraMode)
		end
	end
	return registerVal2
end

registerVal2.getModel = __FUNC_A370E_
DataSources["SwitchCameraWheel"] = registerVal2
local function __FUNC_A4131_(arg0)
	for index2=1.000000, 5.000000, 1.000000 do
		local registerVal8 = {}
		local registerVal9 = {}
		registerVal9.icon = ""
		registerVal9.messageText = ""
		registerVal8.models = registerVal9
		registerVal9 = {}
		registerVal9.messageIndex = index2
		registerVal8.properties = registerVal9
		table.insert({}, registerVal8)
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("CommsMessages", __FUNC_A4131_)
DataSources["CommsMessages"] = registerVal2
registerVal2 = {}
local function __FUNC_A4240_(arg0)
	local registerVal1 = Engine.GetModelForController(arg0)
	local registerVal2 = Engine.CreateModel(registerVal1, "CommsWidget")
	local registerVal3 = Engine.CreateModel(registerVal2, "characterName")
	Engine.SetModelValue(registerVal3, "COOP_KANYE_RACHEL")
	local registerVal4 = Engine.CreateModel(registerVal2, "characterImage")
	Engine.SetModelValue(registerVal4, "t7_cp_hud_commswidget_rachel")
	return registerVal2
end

registerVal2.getModel = __FUNC_A4240_
DataSources["CommsWidget"] = registerVal2
registerVal2 = {}
local function __FUNC_A43F4_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.GetModel(registerVal4, "vehicle")
	if not registerVal3 then
		return 
	end
	registerVal4 = Engine.GetModel(registerVal3, "bindings")
	if registerVal4 then
		Engine.UnsubscribeAndFreeModel(registerVal4)
	end
	local registerVal5 = Engine.CreateModel(registerVal3, "bindings")
	local registerVal6 = Engine.CreateModel(registerVal5, "color")
	Engine.SetModelValue(registerVal6, "255 255 255")
	if not arg1 then
	end
	registerVal5 = IsGamepad(arg0)
	if registerVal3 then
		local registerVal7, registerVal8, registerVal9 = ipairs({})
		for index10,value11 in registerVal7, registerVal8, registerVal9 do
			if value11.bindCommand then
				local registerVal12, registerVal13 = Engine.GetBindingButtonString(arg0, value11.bindCommand)
				if registerVal12 then
					if registerVal5 then
						local registerVal15 = Engine.CreateModel(registerVal5, (registerVal12 .. ".text"))
						Engine.SetModelValue(registerVal15, value11.text)
					end
					value11.bindPlacement = registerVal12
				end
				if registerVal13 then
					if registerVal5 then
						registerVal15 = Engine.CreateModel(registerVal5, (registerVal13 .. ".text"))
						Engine.SetModelValue(registerVal15, value11.text)
					end
					value11.bindPlacement2 = registerVal13
				end
			end
			{}[index10] = value11
		end
		local function __FUNC_A4C1D_(arg1, arg2)
			local registerVal2 = Engine.CreateModel(registerVal3, (arg1 .. ".imageText"))
			if arg2 then
				if arg2.bindCommand and arg2.bindCommand ~= "" then
					local registerVal3 = Engine.KeyBinding(arg0, arg2.bindCommand)
					local registerVal5 = Engine.CreateModel(registerVal5, (arg1 .. ".bind"))
					Engine.SetModelValue(registerVal5, registerVal3)
					Engine.SetModelValue(registerVal2, registerVal3)
				else
					if not arg2.imageText then
					end
					Engine.SetModelValue(registerVal2, "")
				else
					Engine.SetModelValue(registerVal2, "")
				end
			end
			registerVal3 = Engine.CreateModel(registerVal3, (arg1 .. ".text"))
			if arg2 and arg2.text and arg2.text ~= "" then
				registerVal5 = Engine.CreateModel(registerVal5, (arg1 .. ".text"))
				Engine.SetModelValue(registerVal5, arg2.text)
				Engine.SetModelValue(registerVal3, arg2.text)
			else
				Engine.SetModelValue(registerVal3, "")
			end
		end

		local function __FUNC_A4F0A_(arg0)
			local registerVal3, registerVal4, registerVal5 = ipairs(arg0)
			for index6,value7 in registerVal3, registerVal4, registerVal5 do
				{}[((# + 1.000000) - index6)] = value7
			end
			return {}
		end

		if CoD.isPC then
			registerVal12 = {}
			registerVal12 = {"LEFT_3", "LEFT_2", "LEFT_1", "LEFT_0"}
			local registerVal11 = __FUNC_A4F0A_(registerVal12)
			registerVal12 = {}
			registerVal12 = {"RIGHT_3", "RIGHT_2", "RIGHT_1", "RIGHT_0"}
			registerVal11 = __FUNC_A4F0A_(registerVal12)
		else
			registerVal12 = {}
			registerVal12 = {"topLeftButton", "middleLeftButton", "bottomLeftButton"}
			registerVal11 = __FUNC_A4F0A_(registerVal12)
			registerVal12 = {}
			registerVal12 = {"topRightButton", "middleRightButton", "bottomRightButton"}
			registerVal11 = __FUNC_A4F0A_(registerVal12)
		end
		if registerVal5 then
			registerVal11 = {}
			registerVal11 = {"L_STICK", "BUTTON_LSTICK", "BUTTON_LSHLDR", "BUTTON_LTRIG", "BUTTON_X", "BUTTON_A"}
			registerVal12 = {}
			registerVal12 = {"R_STICK", "BUTTON_RSTICK", "BUTTON_RSHLDR", "BUTTON_RTRIG"}
			local function __FUNC_A4F79_(arg0)
				local registerVal2, registerVal3, registerVal4 = ipairs(arg0)
				for index5,value6 in registerVal2, registerVal3, registerVal4 do
					if value6.bindPlacement ~= nil then
						{}[value6.bindPlacement] = value6
					end
				end
				return {}
			end

			local registerVal14 = __FUNC_A4F79_({})
			local function __FUNC_A5010_(arg0, arg1, arg2)
				local registerVal3, registerVal4, registerVal5 = ipairs(arg0)
				for index6,value7 in registerVal3, registerVal4, registerVal5 do
					__FUNC_A4C1D_(arg1[1.000000], arg2[value7])
					table.remove(arg1, 1.000000)
					if arg2[value7] and #table.remove == 0.000000 then
					else
					end
				end
				registerVal3, registerVal4, registerVal5 = ipairs(arg1)
				for index6,value7 in registerVal3, registerVal4, registerVal5 do
					__FUNC_A4C1D_(value7, nil)
				end
			end

			local registerVal16 = __FUNC_A4F0A_(registerVal11)
			leftActions = registerVal16
			__FUNC_A5010_(leftActions, registerVal11, registerVal14)
			registerVal16 = __FUNC_A4F0A_(registerVal12)
			rightActions = registerVal16
			__FUNC_A5010_(rightActions, registerVal11, registerVal14)
		else
			registerVal11 = {}
			registerVal11 = {"KEYBOARD_MOVE", "KEYBOARD_BUTTON", "left"}
			registerVal12 = {}
			registerVal12 = {"MOUSE_LOOK", "MOUSE_BUTTON", "right"}
			local function __FUNC_A5115_(arg0, arg1, arg2)
				local function __FUNC_A5232_(arg0, arg1)
					local registerVal2, registerVal3, registerVal4 = ipairs(arg0)
					for index5,value6 in registerVal2, registerVal3, registerVal4 do
						if value6.bindCommand == "+lookstick" then
							table.remove(arg0, index5)
						else
							if value6.screenSide then
								table.remove(arg0, index5)
								return value6
								if value6.screenSide == arg1 and value6.bindPlacement == arg1 then
									table.remove(arg0, index5)
									return value6
								end
							end
						end
					end
					return nil
				end

				local registerVal4, registerVal5, registerVal6 = ipairs(arg0)
				for index7,value8 in registerVal4, registerVal5, registerVal6 do
					local registerVal9 = __FUNC_A5232_(arg2, value8)
					__FUNC_A4C1D_(arg1[1.000000], registerVal9)
					table.remove(arg1, 1.000000)
					if #table.remove == 0.000000 then
					else
						local registerVal10 = __FUNC_A5232_(arg2, value8)
					end
				end
				registerVal4, registerVal5, registerVal6 = ipairs(arg1)
				for index7,value8 in registerVal4, registerVal5, registerVal6 do
					__FUNC_A4C1D_(value8, nil)
				end
			end

			registerVal14 = __FUNC_A4F0A_(registerVal11)
			leftActions = registerVal14
			__FUNC_A5115_(leftActions, registerVal11, {})
			registerVal14 = __FUNC_A4F0A_(registerVal12)
			rightActions = registerVal14
			__FUNC_A5115_(rightActions, registerVal11, {})
		end
	end
end

registerVal2["setButtonModels"] = __FUNC_A43F4_
local function __FUNC_A53B3_(arg0)
	DataSources.VehicleInfo.setButtonModels(arg0)
end

registerVal2["clearButtonModels"] = __FUNC_A53B3_
DataSources["VehicleInfo"] = registerVal2
registerVal2 = {}
local function __FUNC_A5443_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	return Engine.GetModel(registerVal2, "Attacker")
end

registerVal2.getModel = __FUNC_A5443_
DataSources["Attacker"] = registerVal2
registerVal2 = {}
local function __FUNC_A54F3_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	return Engine.GetModel(registerVal2, "Victim")
end

registerVal2.getModel = __FUNC_A54F3_
DataSources["Victim"] = registerVal2
registerVal2 = {}
local function __FUNC_A55A1_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	return Engine.GetModel(registerVal2, "topPlayerInfo")
end

registerVal2.getModel = __FUNC_A55A1_
DataSources["TopScorerMenuData"] = registerVal2
registerVal2 = {}
local function __FUNC_A5658_(arg0)
	local registerVal2 = DataSources.TopScorerMenuData.getModel(arg0)
	return Engine.GetModel(registerVal2, "1")
end

registerVal2.getModel = __FUNC_A5658_
DataSources["TopPlayerInfoData1"] = registerVal2
registerVal2 = {}
local function __FUNC_A5733_(arg0)
	local registerVal2 = DataSources.TopScorerMenuData.getModel(arg0)
	return Engine.GetModel(registerVal2, "2")
end

registerVal2.getModel = __FUNC_A5733_
DataSources["TopPlayerInfoData2"] = registerVal2
registerVal2 = {}
local function __FUNC_A580B_(arg0)
	local registerVal2 = DataSources.TopScorerMenuData.getModel(arg0)
	return Engine.GetModel(registerVal2, "3")
end

registerVal2.getModel = __FUNC_A580B_
DataSources["TopPlayerInfoData3"] = registerVal2
local function __FUNC_A58E3_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "socialRoot")
	registerVal2 = Engine.CreateModel(registerVal1, "tab")
	local registerVal3 = Engine.GetModelValue(registerVal2)
	if registerVal3 == nil then
	end
	local registerVal8 = {}
	local registerVal9 = {}
	registerVal9.tabIcon = CoD.buttonStrings.shoulderl
	registerVal8.models = registerVal9
	registerVal9 = {}
	registerVal9.m_mouseDisabled = true
	registerVal8.properties = registerVal9
	table.insert({}, registerVal8)
	local registerVal6 = Engine.IsInGame()
	if registerVal6 == false then
		if CoD.isPC then
			registerVal8 = {}
			registerVal9 = {}
			local registerVal10 = Engine.Localize("MENU_TAB_PARTY_CAPS")
			registerVal9.tabName = registerVal10
			registerVal9.tabWidget = "CoD.Social_Party_PC"
			registerVal8.models = registerVal9
			registerVal9 = {}
			registerVal9.tabId = "party"
			registerVal9.selectIndex = false
			registerVal10 = Dvar.partyPrivacyEnabled:get()
			if registerVal10 then
			end
			registerVal9.disabled = true
			registerVal8.properties = registerVal9
			table.insert({}, registerVal8)
		else
			registerVal8 = {}
			registerVal9 = {}
			registerVal10 = Engine.Localize("MENU_TAB_PARTY_CAPS")
			registerVal9.tabName = registerVal10
			registerVal9.tabWidget = "CoD.Social_Party"
			registerVal8.models = registerVal9
			registerVal9 = {}
			registerVal9.tabId = "party"
			registerVal9.selectIndex = false
			registerVal10 = Dvar.partyPrivacyEnabled:get()
			if registerVal10 then
			end
			registerVal9.disabled = true
			registerVal8.properties = registerVal9
			table.insert({}, registerVal8)
		end
	end
	registerVal8 = {}
	registerVal9 = {}
	registerVal10 = Engine.Localize("MENU_FRIENDS_CAPS")
	registerVal9.tabName = registerVal10
	registerVal9.tabWidget = "CoD.Social_Friends"
	registerVal8.models = registerVal9
	registerVal9 = {}
	registerVal9.tabId = "friends"
	registerVal9.selectIndex = false
	registerVal8.properties = registerVal9
	table.insert({}, registerVal8)
	registerVal6 = IsGroupsEnabled()
	if registerVal6 then
		registerVal8 = Engine.GetModelForController(arg0)
		local registerVal7 = Engine.GetModel(registerVal8, "groups.highlightGroupsTabInSocial")
		registerVal8 = Engine.GetModelValue(registerVal7)
		if registerVal7 and registerVal8 then
		end
		registerVal10 = {}
		local registerVal11 = {}
		local registerVal12 = Engine.Localize("GROUPS_CAPS")
		registerVal11.tabName = registerVal12
		registerVal11.tabWidget = "CoD.Social_Groups"
		registerVal10.models = registerVal11
		registerVal11 = {}
		registerVal11.tabId = "groups"
		registerVal11.selectIndex = false
		registerVal10.properties = registerVal11
		table.insert({}, registerVal10)
	end
	registerVal8 = {}
	registerVal9 = {}
	registerVal10 = Engine.Localize("MENU_TAB_PLAYERS_CAPS")
	registerVal9.tabName = registerVal10
	registerVal9.tabWidget = "CoD.Social_RecentPlayers"
	registerVal8.models = registerVal9
	registerVal9 = {}
	registerVal9.tabId = "recent"
	registerVal9.selectIndex = false
	registerVal8.properties = registerVal9
	table.insert({}, registerVal8)
	registerVal8 = {}
	registerVal9 = {}
	registerVal9.tabIcon = CoD.buttonStrings.shoulderr
	registerVal8.models = registerVal9
	registerVal9 = {}
	registerVal9.m_mouseDisabled = true
	registerVal8.properties = registerVal9
	table.insert({}, registerVal8)
	for index6=1.000000, #{}, 1.000000 do
		if {}[index6].properties ~= nil then
			if {}[index6].properties.tabId == "groups" then
				{}[index6].properties.selectIndex = true
			else
				{}[index6].properties.selectIndex = false
			end
		end
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("SocialTabs", __FUNC_A58E3_, true)
DataSources["SocialTabs"] = registerVal2
local function __FUNC_A6123_(arg0)
	local registerVal7 = Engine.GetGlobalModel()
	local registerVal6 = Engine.CreateModel(registerVal7, "socialRoot")
	registerVal7 = Engine.GetModel(registerVal6, "tab")
	local registerVal8 = Engine.GetModelValue(registerVal7)
	if registerVal8 == "friends" and CoD.perController[arg0].isCombatRecordCompare then
		local registerVal9 = Engine.GetFriends(arg0)
	else
		if registerVal8 == "friends" then
			registerVal9 = Engine.GetOnlineFriendsList(arg0, 0.000000, 7.000000, (Enum.PresenceActivity.PRESENCE_ACTIVITY_ONLINE_NOT_IN_TITLE | Enum.PresenceActivity.PRESENCE_ACTIVITY_MENU_INLOBBY))
		else
			if registerVal8 == "recent" then
				registerVal9 = Engine.GetRecentPlayersList(arg0, 0.000000, 7.000000, (Enum.PresenceActivity.PRESENCE_ACTIVITY_ONLINE_NOT_IN_TITLE | Enum.PresenceActivity.PRESENCE_ACTIVITY_MENU_INLOBBY))
			else
				if registerVal8 == "party" then
					registerVal9 = Engine.GetLobbyUIScreen()
					local registerVal10 = LobbyData:UITargetFromId(registerVal9)
					local registerVal11 = Engine.IsLobbyActive(Enum.LobbyType.LOBBY_TYPE_GAME)
					if registerVal11 and registerVal10.lobbyMode == Enum.LobbyMode.LOBBY_MODE_CUSTOM then
						local registerVal13 = Engine.LobbyGetSessionClients(Enum.LobbyModule.LOBBY_MODULE_CLIENT, Enum.LobbyType.LOBBY_TYPE_GAME)
					else
						registerVal13 = Engine.LobbyGetSessionClients(Enum.LobbyModule.LOBBY_MODULE_CLIENT, Enum.LobbyType.LOBBY_TYPE_PRIVATE)
					end
					registerVal13 = Engine.GetTitleData(Engine.GetPrimaryController())
					local registerVal14, registerVal15, registerVal16 = ipairs(registerVal13.sessionClients)
					for index17,value18 in registerVal14, registerVal15, registerVal16 do
						registerVal9[index17] = {}
						registerVal9[index17].xuid = value18.xuid
						registerVal9[index17].gamertag = value18.gamertag
						registerVal9[index17].clantag = value18.clantag
						registerVal9[index17].isLocal = value18.isLocal
						registerVal9[index17].activity = registerVal13.activity
						registerVal9[index17].context = registerVal13.context
						registerVal9[index17].joinable = Enum.LobbyJoinable.LOBBY_JOINABLE_NO_NOT_IN_LOBBY
						registerVal9[index17].gametype = registerVal13.gametype
						registerVal9[index17].mapid = registerVal13.mapid
						registerVal9[index17].friend = 1.000000
						registerVal9[index17].titlePresence = ""
						registerVal9[index17].cpRank = value18.cpRank
						registerVal9[index17].cpRankIcon = value18.cpRankIcon
						registerVal9[index17].mpRank = value18.mpRank
						registerVal9[index17].mpRankIcon = value18.mpRankIcon
						registerVal9[index17].zmRank = value18.zmRank
						registerVal9[index17].zmRankIcon = value18.zmRankIcon
					end
				else
					registerVal9 = Engine.GetOnlineFriendsList(arg0, 0.000000, 7.000000, (Enum.PresenceActivity.PRESENCE_ACTIVITY_ONLINE_NOT_IN_TITLE | Enum.PresenceActivity.PRESENCE_ACTIVITY_MENU_INLOBBY))
				end
			end
		end
	end
	for index9=1.000000, #arg0, 1.000000 do
		registerVal15 = string.format("%s %s", "", registerVal9[index9].gamertag)
		if false then
		end
		if registerVal9[index9].isLocal == 1.000000 then
		end
		local registerVal20 = {}
		local registerVal21 = {}
		registerVal21.identityBadge.xuid = registerVal9[index9].xuid
		registerVal21.identityBadge.gamertag = registerVal9[index9].gamertag
		registerVal21.identityBadge.clantag = ""
		registerVal21.xuid = registerVal9[index9].xuid
		registerVal21.gamertag = registerVal9[index9].gamertag
		registerVal21.clantag = ""
		registerVal21.fullname = registerVal15
		registerVal21.isLocal = "1"
		registerVal21.activity = registerVal9[index9].activity
		registerVal21.context = registerVal9[index9].context
		registerVal21.difficulty = registerVal9[index9].difficulty
		registerVal21.playlist = registerVal9[index9].playlist
		registerVal21.joinable = registerVal9[index9].joinable
		registerVal21.gametype = registerVal9[index9].gametype
		registerVal21.mapid = registerVal9[index9].mapid
		registerVal21.friend = registerVal9[index9].friend
		registerVal21.titlePresence = registerVal9[index9].titlePresence
		registerVal21.cpRank = registerVal9[index9].cpRank
		registerVal21.cpRankIcon = registerVal9[index9].cpRankIcon
		registerVal21.mpRank = registerVal9[index9].mpRank
		local registerVal22 = GetRankIconLarge(registerVal9[index9].mpRankIcon)
		registerVal21.mpRankIcon = registerVal22
		registerVal21.zmRank = registerVal9[index9].zmRank
		registerVal21.zmRankIcon = registerVal9[index9].zmRankIcon
		registerVal20.models = registerVal21
		registerVal21 = {}
		registerVal21.xuid = registerVal9[index9].xuid
		registerVal21.showyourfriend = false
		registerVal21.showlastmet = false
		registerVal21.gametype = registerVal9[index9].gametype
		registerVal21.mapid = registerVal9[index9].mapid
		registerVal21.difficulty = registerVal9[index9].difficulty
		registerVal21.playlist = registerVal9[index9].playlist
		registerVal20.properties = registerVal21
		table.insert({}, registerVal20)
	end
	return {}
end

local function __FUNC_A6E29_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.GetModel(registerVal4, "socialRoot")
	registerVal4 = Engine.GetModel(registerVal3, "tab")
	local registerVal5 = Engine.GetModelValue(registerVal4)
	local registerVal6 = Engine.GetModel(registerVal3, "friends")
	if registerVal5 == "friends" then
		local registerVal7 = Engine.GetModel(registerVal3, "friends")
	else
		if registerVal5 == "recent" then
			registerVal7 = Engine.GetModel(registerVal3, "recentPlayers")
		else
			if registerVal5 == "party" then
				registerVal7 = Engine.GetModel(registerVal3, "party")
			end
		end
	end
	registerVal7 = Engine.GetModel(registerVal7, "update")
	if arg1.socialUpdateSubscription then
		arg1:removeSubscription(arg1.socialUpdateSubscription)
	end
	local function __FUNC_A71D2_()
		RefreshListFindSelectedXuid(arg0, arg1)
	end

	local registerVal8 = arg1:subscribeToModel(registerVal7, __FUNC_A71D2_, false)
	arg1.socialUpdateSubscription = registerVal8
	if arg1.socialPartyUpdateSubscription then
		arg1:removeSubscription(arg1.socialPartyUpdateSubscription)
	end
	local registerVal9 = Engine.GetGlobalModel()
	registerVal8 = Engine.GetModel(registerVal9, "lobbyRoot")
	registerVal9 = Engine.GetModel(registerVal8, "privateClient")
	local registerVal10 = Engine.GetModel(registerVal9, "update")
	local function __FUNC_A7231_()
		RefreshListFindSelectedXuid(arg0, arg1)
	end

	local registerVal11 = arg1:subscribeToModel(registerVal10, __FUNC_A7231_, false)
	arg1.socialPartyUpdateSubscription = registerVal11
end

registerVal2 = ListHelper_SetupDataSource("SocialOnlinePlayersList", __FUNC_A6123_, nil, nil, __FUNC_A6E29_)
DataSources["SocialOnlinePlayersList"] = registerVal2
registerVal2 = {}
local function __FUNC_A7291_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.GetModel(registerVal2, "SocialMainMenu")
	return registerVal1
end

registerVal2.getModel = __FUNC_A7291_
DataSources["SocialMainMenu"] = registerVal2
registerVal2 = {}
local function __FUNC_A733E_(arg0, arg1, arg2)
	arg1.numElementsInList = arg1.vCount
	arg1.controller = arg0
	arg1.filter = Enum.PresenceFilter.PRESENCE_FILTER_ALL
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.GetModel(registerVal4, "socialRoot")
	registerVal4 = Engine.GetModel(registerVal3, "tab")
	local registerVal5 = Engine.GetModelValue(registerVal4)
	if registerVal5 == "friends" then
		arg1.showyourfriend = false
		arg1.showlastmet = false
		arg1.GetList = Engine.GetFriends
		arg1.GetParty = Engine.GetFriendPartry
		local registerVal6 = Engine.GetFriendsCount(arg0, arg1.filter)
		arg1.playerCount = registerVal6
		registerVal6 = Engine.GetModel(registerVal3, "friends")
		arg1.socialSubModel = registerVal6
	else
		if registerVal5 == "recent" then
			arg1.showyourfriend = true
			arg1.showlastmet = true
			arg1.GetList = Engine.GetRecentPlayersList
			arg1.GetParty = Engine.GetGetRecentPlayerParty
			registerVal6 = Engine.GetRecentPlayersCount(arg0, arg1.filter)
			arg1.playerCount = registerVal6
			registerVal6 = Engine.GetModel(registerVal3, "recentPlayers")
			arg1.socialSubModel = registerVal6
		else
			if registerVal5 == "groupMembers" then
				arg1.showyourfriend = true
				arg1.showlastmet = false
				arg1.showGroupMemberStatus = true
				arg1.GetList = Engine.GetSelectedGroupMembersList
				arg1.GetParty = Engine.GetSelectedGroupMembersParty
				registerVal6 = Engine.GetSelectedGroupMembersCount(arg0, arg1.filter)
				arg1.playerCount = registerVal6
				registerVal6 = Engine.GetModel(registerVal3, "groupMembers")
				arg1.socialSubModel = registerVal6
				arg1.updateOnlyLayoutOnRefresh = true
			else
				if registerVal5 == "groupApplications" then
					arg1.showyourfriend = true
					arg1.showlastmet = false
					arg1.GetList = Engine.GetSelectedGroupApplicationsList
					registerVal6 = Engine.GetSelectedGroupApplicationsCount(arg0, arg1.filter)
					arg1.playerCount = registerVal6
					registerVal6 = Engine.GetModel(registerVal3, "groupApplications")
					arg1.socialSubModel = registerVal6
					arg1.updateOnlyLayoutOnRefresh = true
				else
					if registerVal5 == "groupBannedMembers" then
						arg1.showyourfriend = true
						arg1.showlastmet = false
						arg1.GetList = Engine.GetSelectedGroupBannedMembersList
						registerVal6 = Engine.GetSelectedGroupBannedMembersCount(arg0, arg1.filter)
						arg1.playerCount = registerVal6
						registerVal6 = Engine.GetModel(registerVal3, "groupBannedMembers")
						arg1.socialSubModel = registerVal6
						arg1.updateOnlyLayoutOnRefresh = true
					else
						if registerVal5 == "groupAdmins" then
							arg1.showyourfriend = true
							arg1.showlastmet = false
							arg1.GetList = Engine.GetSelectedGroupAdminsList
							registerVal6 = Engine.GetSelectedGroupAdminsCount(arg0, arg1.filter)
							arg1.playerCount = registerVal6
							registerVal6 = Engine.GetModel(registerVal3, "groupAdmins")
							arg1.socialSubModel = registerVal6
						else
							if registerVal5 == "groupPlayerSearch" then
								arg1.showyourfriend = true
								arg1.showlastmet = false
								arg1.GetList = Engine.GetGroupPlayerSearchList
								registerVal6 = Engine.GetGroupPlayerSearchCount(arg0, arg1.filter)
								arg1.playerCount = registerVal6
								registerVal6 = Engine.GetModel(registerVal3, "groupPlayerSearch")
								arg1.socialSubModel = registerVal6
							else
								if registerVal5 == "groupFriendsFiltered" then
									arg1.showyourfriend = true
									arg1.showlastmet = false
									arg1.GetList = Engine.GetSelectedGroupFriendsFilteredList
									registerVal6 = Engine.GetSelectedGroupFriendsFilteredCount(arg0, arg1.filter)
									arg1.playerCount = registerVal6
									registerVal6 = Engine.GetModel(registerVal3, "groupFriendsFiltered")
									arg1.socialSubModel = registerVal6
								else
									arg1.showyourfriend = false
									arg1.showlastmet = false
									arg1.GetList = Engine.GetFriends
									arg1.GetParty = Engine.GetFriendPartry
									registerVal6 = Engine.GetFriendsCount(arg0, arg1.filter)
									arg1.playerCount = registerVal6
									registerVal6 = Engine.GetModel(registerVal3, "friends")
									arg1.socialSubModel = registerVal6
								end
							end
						end
					end
				end
			end
		end
	end
	arg1.players = {}
	registerVal6 = {}
	registerVal6.identityBadge.xuid = 0.000000
	registerVal6.identityBadge.gamertag = ""
	registerVal6.identityBadge.clantag = ""
	registerVal6.xuid = 0.000000
	registerVal6.gamertag = ""
	registerVal6.clantag = ""
	registerVal6.emblemBacking = 0.000000
	registerVal6.fullname = ""
	registerVal6.activity = 0.000000
	registerVal6.context = 0.000000
	registerVal6.difficulty = 0.000000
	registerVal6.playlist = 1.000000
	registerVal6.joinable = 0.000000
	registerVal6.gametype = 0.000000
	registerVal6.mapid = 0.000000
	registerVal6.friend = 0.000000
	registerVal6.primaryPresence = Enum.PresencePrimary.PRESENCE_PRIMARY_OFFLINE
	registerVal6.titlePresence = ""
	registerVal6.platformPresence = ""
	registerVal6.cpPlayed = false
	registerVal6.cpRank = 0.000000
	registerVal6.cpRankIcon = ""
	registerVal6.cpPrestige = 0.000000
	registerVal6.mpPlayed = false
	registerVal6.mpRank = 0.000000
	registerVal6.mpRankIcon = ""
	registerVal6.mpPrestige = 0.000000
	registerVal6.zmPlayed = false
	registerVal6.zmRank = 0.000000
	registerVal6.zmRankIcon = ""
	registerVal6.zmPrestige = 0.000000
	registerVal6.mpParagonRank = 0.000000
	registerVal6.mpParagonIconId = 0.000000
	registerVal6.zmParagonRank = 0.000000
	registerVal6.zmParagonIconId = 0.000000
	registerVal6.partySize = 1.000000
	registerVal6.partyMax = 9.000000
	registerVal6.selected = false
	registerVal6.playerCount = 0.000000
	registerVal6.groupMemberStatus = 0.000000
	registerVal6.primaryGroup = ""
	local registerVal7 = {}
	registerVal7.xuid = 0.000000
	registerVal7.showyourfriend = false
	registerVal7.showlastmet = false
	registerVal7.gametype = 0.000000
	registerVal7.mapid = 0.000000
	registerVal7.difficulty = 0.000000
	registerVal7.playlist = 1.000000
	local registerVal8 = {}
	registerVal8.members = {}
	registerVal8.total = 1.000000
	registerVal8.available = 1.000000
	registerVal8.leader = ""
	registerVal7.party = registerVal8
	for index8=1.000000, arg1.numElementsInList, 1.000000 do
		arg1.players[index8] = {}
		local registerVal13 = Engine.CreateModel(arg1.socialSubModel, ("player_" .. index8))
		arg1.players[index8].root = registerVal13
		registerVal13 = Engine.CreateModel(arg1.players[index8].root, "model")
		arg1.players[index8].model = registerVal13
		registerVal13 = {}
		registerVal13.xuid = 0.000000
		registerVal13.showyourfriend = 0.000000
		registerVal13.showlastmet = 0.000000
		registerVal13.gametype = 0.000000
		registerVal13.mapid = 0.000000
		registerVal13.difficulty = 0.000000
		registerVal13.playlist = 1.000000
		arg1.players[index8].properties = registerVal13
		local registerVal12, registerVal13, registerVal14 = pairs(registerVal6)
		for index15,value16 in registerVal12, registerVal13, registerVal14 do
			local registerVal17 = Engine.CreateModel(arg1.players[index8].model, index15)
		end
	end
	local function __FUNC_A858B_(arg0, arg1, arg2, arg3)
		if not arg1.GetList then
			return 
		end
		local registerVal5 = arg1.GetList(arg0, arg2, arg3, arg1.filter)
		for index5=1.000000, #arg0, 1.000000 do
			registerVal5[index5].clantag = ""
			local registerVal11 = string.format("%s%s", registerVal5[index5].clantag, registerVal5[index5].gamertag)
			registerVal5[index5].fullname = registerVal11
			registerVal5[index5].identityBadge.xuid = registerVal5[index5].xuid
			registerVal5[index5].identityBadge.gamertag = registerVal5[index5].gamertag
			registerVal5[index5].identityBadge.clantag = registerVal5[index5].clantag
			if arg1.showlastmet == 0.000000 then
				registerVal5[index5].titlePresence = ""
			end
			if arg1.showGroupMemberStatus then
				registerVal11 = Engine.GetSelectedGroupMemberStatus(arg0, registerVal5[index5].xuid)
				registerVal5[index5].groupMemberStatus = registerVal11
			end
			registerVal11 = CoD.SocialUtility.GetRankIcons("cp", registerVal5[index5].cpPlayed, registerVal5[index5].cpRank, registerVal5[index5].cpPrestige)
			registerVal5[index5].cpRankIcon = registerVal11
			registerVal11 = CoD.SocialUtility.GetRankIcons("mp", registerVal5[index5].mpPlayed, registerVal5[index5].mpRank, registerVal5[index5].mpPrestige)
			registerVal5[index5].mpRankIcon = registerVal11
			registerVal11 = CoD.SocialUtility.GetRankIcons("zm", registerVal5[index5].zmPlayed, registerVal5[index5].zmRank, registerVal5[index5].zmPrestige)
			registerVal5[index5].zmRankIcon = registerVal11
			local registerVal12 = Engine.GetPrestigeCap(Enum.eModes.MODE_MULTIPLAYER)
			if registerVal5[index5].mpPrestige == registerVal12 then
				registerVal11 = Engine.GetParagonRankDisplayLevel(registerVal5[index5].mpParagonRank, Enum.eModes.MODE_MULTIPLAYER)
				registerVal5[index5].mpRank = registerVal11
				if registerVal5[index5].mpParagonIconId ~= CoD.PrestigeUtility.INVALID_PARAGON_ICON_ID then
					registerVal11 = Engine.GetParagonIconById(registerVal5[index5].mpParagonIconId, Enum.eModes.MODE_MULTIPLAYER)
					registerVal5[index5].mpRankIcon = registerVal11
				else
					registerVal11 = Engine.GetRankDisplayLevel(registerVal5[index5].mpRank, Enum.eModes.MODE_MULTIPLAYER)
					registerVal5[index5].mpRank = registerVal11
				end
			end
			registerVal12 = Engine.GetPrestigeCap(Enum.eModes.MODE_ZOMBIES)
			if registerVal5[index5].zmPrestige == registerVal12 then
				registerVal11 = Engine.GetParagonRankDisplayLevel(registerVal5[index5].zmParagonRank, Enum.eModes.MODE_ZOMBIES)
				registerVal5[index5].zmRank = registerVal11
				if registerVal5[index5].zmParagonIconId ~= CoD.PrestigeUtility.INVALID_PARAGON_ICON_ID then
					registerVal11 = Engine.GetParagonIconById(registerVal5[index5].zmParagonIconId, Enum.eModes.MODE_ZOMBIES)
					registerVal5[index5].zmRankIcon = registerVal11
				else
					registerVal11 = Engine.GetRankDisplayLevel(registerVal5[index5].zmRank, Enum.eModes.MODE_ZOMBIES)
					registerVal5[index5].zmRank = registerVal11
				end
			end
			registerVal11 = Engine.IsFriendInInitialGroupInvitesList(registerVal5[index5].xuid)
			registerVal5[index5].selected = registerVal11
			registerVal5[index5].playerCount = arg1.playerCount
			registerVal11 = CoD.GetMapIDFromMapUniqueID(registerVal5[index5].mapid)
			if registerVal5[index5].mapid and registerVal11 then
				registerVal12 = Engine.GetDLCBitForMapName(registerVal11)
				local registerVal13 = Engine.GetDLCBits()
				local registerVal14 = IsDvarValueEqualTo("ui_freeDLC1", "1")
				if registerVal14 then
				end
				registerVal14 = CoD.BitUtility.IsBitwiseAndNonZero(registerVal12, (registerVal13 | Enum.ContentFlagBits.CONTENT_DLC1))
				if arg1 or not registerVal5[index5].joinable then
				end
				registerVal5[index5].joinable = 10.000000
			end
			registerVal11, registerVal12, registerVal13 = pairs(registerVal5[index5])
			for index14,value15 in registerVal11, registerVal12, registerVal13 do
				local registerVal16 = Engine.GetModel(arg1.players[((((arg2 + index5) - 1.000000) % arg1.numElementsInList) + 1.000000)].model, index14)
				if registerVal16 ~= nil then
					Engine.SetModelValue(registerVal16, value15)
				end
				if arg1.players[((((arg2 + index5) - 1.000000) % arg1.numElementsInList) + 1.000000)].properties[index14] ~= nil then
					arg1.players[((((arg2 + index5) - 1.000000) % arg1.numElementsInList) + 1.000000)].properties[index14] = value15
				end
			end
			registerVal12 = Engine.CreateModel(arg1.players[((((arg2 + index5) - 1.000000) % arg1.numElementsInList) + 1.000000)].model, "activityString")
			Engine.SetModelValue(registerVal12, GetPresenceActivityString(registerVal5[index5]))
			registerVal12 = Engine.CreateModel(arg1.players[((((arg2 + index5) - 1.000000) % arg1.numElementsInList) + 1.000000)].model, "contextString")
			Engine.SetModelValue(registerVal12, GetPresenceContextString(registerVal5[index5]))
			registerVal12 = Engine.CreateModel(arg1.players[((((arg2 + index5) - 1.000000) % arg1.numElementsInList) + 1.000000)].model, "primaryGroupString")
			Engine.SetModelValue(registerVal12, GetPresencePrimaryGroupString(registerVal5[index5]))
			arg1.players[((((arg2 + index5) - 1.000000) % arg1.numElementsInList) + 1.000000)].properties.showlastmet = arg1.showlastmet
			arg1.players[((((arg2 + index5) - 1.000000) % arg1.numElementsInList) + 1.000000)].properties.showyourfriend = arg1.showyourfriend
			registerVal11 = arg1.GetParty(arg0, ((arg2 + index5) - 1.000000))
			arg1.players[((((arg2 + index5) - 1.000000) % arg1.numElementsInList) + 1.000000)].properties.party = {}
			if arg1.GetParty and registerVal11 then
				if registerVal11.total == nil then
					registerVal11.total = registerVal11.totalCount
					registerVal11.available = registerVal11.availableCount
				end
				arg1.players[((((arg2 + index5) - 1.000000) % arg1.numElementsInList) + 1.000000)].properties.party.total = registerVal11.total
				arg1.players[((((arg2 + index5) - 1.000000) % arg1.numElementsInList) + 1.000000)].properties.party.available = registerVal11.available
				arg1.players[((((arg2 + index5) - 1.000000) % arg1.numElementsInList) + 1.000000)].properties.party.leader = registerVal11.leader
				if #registerVal11.members then
					arg1.players[((((arg2 + index5) - 1.000000) % arg1.numElementsInList) + 1.000000)].properties.party.members = {}
					for index13=1.000000, #registerVal11.members, 1.000000 do
						arg1.players[((((arg2 + index5) - 1.000000) % arg1.numElementsInList) + 1.000000)].properties.party.members[index13] = {}
						arg1.players[((((arg2 + index5) - 1.000000) % arg1.numElementsInList) + 1.000000)].properties.party.members[index13].gamertag = registerVal11.members[index13].gamertag
						arg1.players[((((arg2 + index5) - 1.000000) % arg1.numElementsInList) + 1.000000)].properties.party.members[index13].leader = registerVal11.members[index13].leader
					end
				end
			end
		end
		return arg1.players[((arg2 % arg1.numElementsInList) + 1.000000)].model
	end

	arg1.updateModels = __FUNC_A858B_
	if not arg1.skipFirstTimeUpdateModels then
		arg1.updateModels(arg0, arg1, 0.000000, arg1.numElementsInList)
	end
	registerVal8 = Engine.GetModel(arg1.socialSubModel, "update")
	if arg1.socialUpdateSubscription then
		arg1:removeSubscription(arg1.socialUpdateSubscription)
	end
	local function __FUNC_A989E_()
		if arg1.updateOnlyLayoutOnRefresh then
			arg1.skipFirstTimeUpdateModels = true
			arg1:updateDataSource(true, true)
			arg1:updateLayout()
		else
			RefreshListFindSelectedXuid(arg0, arg1)
		end
	end

	local registerVal9 = arg1:subscribeToModel(registerVal8, __FUNC_A989E_, false)
	arg1.socialUpdateSubscription = registerVal9
end

registerVal2.prepare = __FUNC_A733E_
local function __FUNC_A99B9_(arg0)
	return arg0.playerCount
end

registerVal2.getCount = __FUNC_A99B9_
local function __FUNC_A9A09_(arg0, arg1, arg2)
	local registerVal4 = arg1.updateModels(arg0, arg1, (arg2 - 1.000000), 1.000000)
	return arg1.players[(((arg2 - 1.000000) % arg1.numElementsInList) + 1.000000)].model
end

registerVal2.getItem = __FUNC_A9A09_
local function __FUNC_A9AEE_(arg0, arg1)
	return arg0.players[(((arg1 - 1.000000) % arg0.numElementsInList) + 1.000000)].properties
end

registerVal2.getCustomPropertiesForItem = __FUNC_A9AEE_
DataSources["SocialPlayersList"] = registerVal2
registerVal2 = {}
local function __FUNC_A9B9D_(arg0, arg1, arg2)
	arg1.numElementsInList = arg1.vCount
	arg1.controller = arg0
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.GetModel(registerVal4, "socialRoot")
	registerVal4 = Engine.CreateModel(registerVal3, "cache")
	local registerVal5 = Engine.CreateModel(registerVal4, "xuid")
	arg1.xuidModel = registerVal5
	registerVal5 = Engine.GetModel(registerVal3, "party")
	local registerVal6 = Engine.CreateModel(registerVal5, "update")
	arg1.partyUpdate = registerVal6
	registerVal6 = Engine.CreateModel(registerVal5, "available")
	local registerVal7 = Engine.CreateModel(registerVal5, "total")
	local registerVal8 = Engine.CreateModel(registerVal5, "leader")
	local registerVal9 = Engine.GetModelValue(arg1.xuidModel, "xuid")
	arg1.xuid = registerVal9
	registerVal9 = Engine.GetModelValue(registerVal6)
	arg1.available = registerVal9
	registerVal9 = Engine.GetModelValue(registerVal7)
	arg1.total = registerVal9
	registerVal9 = Engine.GetModelValue(registerVal8)
	arg1.leader = registerVal9
	arg1.partyMembers = {}
	for index9=1.000000, 18.000000, 1.000000 do
		local registerVal14 = Engine.GetModel(registerVal5, ("pm_" .. index9))
		arg1.partyMembers[index9] = registerVal14
	end
	if arg1.selectedPlayerSubscription then
		arg1:removeSubscription(arg1.selectedPlayerSubscription)
	end
	local function __FUNC_A9FC2_()
		arg1:updateDataSource()
	end

	registerVal9 = arg1:subscribeToModel(arg1.partyUpdate, __FUNC_A9FC2_, false)
	arg1.selectedPlayerSubscription = registerVal9
end

registerVal2.prepare = __FUNC_A9B9D_
local function __FUNC_AA012_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = CoD.SafeGetModelValue(registerVal2, "socialRoot.party.available")
	if not registerVal1 then
	end
	return 0.000000
end

registerVal2.getCount = __FUNC_AA012_
local function __FUNC_AA0F1_(arg0, arg1, arg2)
	return arg1.partyMembers[arg2]
end

registerVal2.getItem = __FUNC_AA0F1_
DataSources["SocialPlayerPartyList"] = registerVal2
local function __FUNC_AA14E_(arg0)
	local registerVal4 = {}
	local registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderl
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	local registerVal2 = Engine.IsMultiplayerGame()
	if registerVal2 then
		local registerVal3 = Engine.GetModelForController(arg0)
		registerVal2 = Engine.GetModel(registerVal3, "aarType")
		registerVal3 = Engine.GetModelValue(registerVal2)
		registerVal5 = {}
		local registerVal6 = {}
		local registerVal7 = Engine.Localize("MENU_AAR_TAB_PERFORMANCE_CAPS")
		registerVal6.tabName = registerVal7
		registerVal6.tabWidget = "CoD.PerformanceTabWidget"
		registerVal5.models = registerVal6
		registerVal6 = {}
		registerVal6.tabId = "performance"
		registerVal5.properties = registerVal6
		table.insert({}, registerVal5)
		registerVal3 = Dvar.show_contracts_button:get()
		if registerVal2 and registerVal3 == "public" and registerVal3 then
			registerVal5 = {}
			registerVal6 = {}
			registerVal7 = Engine.Localize("MENU_AAR_TAB_CONTRACTS_CAPS")
			registerVal6.tabName = registerVal7
			registerVal6.tabWidget = "CoD.ContractsTabWidget"
			registerVal5.models = registerVal6
			registerVal6 = {}
			registerVal6.tabId = "contracts"
			registerVal5.properties = registerVal6
			table.insert({}, registerVal5)
		end
		registerVal3 = IsLocal()
		registerVal6 = Engine.GetCurrentGameType()
		registerVal3 = Engine.TableLookupColumnNumForValue(CoD.scoreInfoTable, 0.000000, (registerVal6 .. " XP"))
		registerVal4 = Engine.GetRecentMedals(arg0, registerVal3)
		if not registerVal3 and registerVal4 and 0.000000 < #arg0 then
			registerVal7 = {}
			local registerVal8 = {}
			local registerVal9 = Engine.Localize("MENU_AAR_TAB_MEDALS_CAPS")
			registerVal8.tabName = registerVal9
			registerVal8.tabWidget = "CoD.MedalsTabWidget"
			registerVal7.models = registerVal8
			registerVal8 = {}
			registerVal8.tabId = "medals"
			registerVal7.properties = registerVal8
			table.insert({}, registerVal7)
		end
		registerVal5 = {}
		registerVal6 = {}
		registerVal7 = Engine.Localize("MENU_AAR_TAB_SCOREBOARD_CAPS")
		registerVal6.tabName = registerVal7
		registerVal6.tabWidget = "CoD.ScoreboardTabWidget"
		registerVal5.models = registerVal6
		registerVal6 = {}
		registerVal6.tabId = "scoreboard"
		registerVal5.properties = registerVal6
		table.insert({}, registerVal5)
	else
		registerVal2 = Engine.IsCampaignGame()
		if registerVal2 then
			registerVal4 = {}
			registerVal5 = {}
			registerVal6 = Engine.Localize("MENU_AAR_TAB_PERFORMANCE_CAPS")
			registerVal5.tabName = registerVal6
			registerVal5.tabWidget = "CoD.PerformanceTabWidgetCP"
			registerVal4.models = registerVal5
			registerVal5 = {}
			registerVal5.tabId = "performance"
			registerVal4.properties = registerVal5
			table.insert({}, registerVal4)
			registerVal4 = {}
			registerVal5 = {}
			registerVal6 = Engine.Localize("CPUI_ACCOLADES")
			registerVal5.tabName = registerVal6
			registerVal5.tabWidget = "CoD.MissionRecordVault_Challenges"
			registerVal4.models = registerVal5
			registerVal5 = {}
			registerVal5.tabId = "accolades"
			registerVal4.properties = registerVal5
			table.insert({}, registerVal4)
			registerVal2 = WasCampaignSoloGame(arg0)
			registerVal4 = {}
			registerVal5 = {}
			registerVal6 = Engine.Localize("MENU_AAR_TAB_SCOREBOARD_CAPS")
			registerVal5.tabName = registerVal6
			registerVal5.tabWidget = "CoD.ScoreboardTabWidgetCP"
			registerVal4.models = registerVal5
			registerVal5 = {}
			registerVal5.tabId = "scoreboard"
			registerVal4.properties = registerVal5
			table.insert({}, registerVal4)
			registerVal2 = Engine.IsZombiesGame()
			registerVal4 = {}
			registerVal5 = {}
			registerVal6 = Engine.Localize("MENU_AAR_TAB_PERFORMANCE_CAPS")
			registerVal5.tabName = registerVal6
			registerVal5.tabWidget = "CoD.PerformanceTabWidgetZM"
			registerVal4.models = registerVal5
			registerVal5 = {}
			registerVal5.tabId = "performance"
			registerVal4.properties = registerVal5
			table.insert({}, registerVal4)
			registerVal4 = {}
			registerVal5 = {}
			registerVal6 = Engine.Localize("MENU_AAR_TAB_SCOREBOARD_CAPS")
			registerVal5.tabName = registerVal6
			registerVal5.tabWidget = "CoD.ScoreboardTabWidgetZM"
			registerVal4.models = registerVal5
			registerVal5 = {}
			registerVal5.tabId = "scoreboard"
			registerVal4.properties = registerVal5
			table.insert({}, registerVal4)
			registerVal2 = IsLive()
			if not registerVal2 and registerVal2 and registerVal2 then
				registerVal4 = {}
				registerVal5 = {}
				registerVal6 = Engine.Localize("MENU_AAR_TAB_DAILY_CHALLENGE_CAPS")
				registerVal5.tabName = registerVal6
				registerVal5.tabWidget = "CoD.DailyChallengeTabWidget"
				registerVal4.models = registerVal5
				registerVal5 = {}
				registerVal5.tabId = "dailyChallenge"
				registerVal4.properties = registerVal5
				table.insert({}, registerVal4)
			end
		end
	end
	registerVal4 = {}
	registerVal5 = {}
	registerVal5.tabIcon = CoD.buttonStrings.shoulderr
	registerVal4.models = registerVal5
	registerVal5 = {}
	registerVal5.m_mouseDisabled = true
	registerVal4.properties = registerVal5
	table.insert({}, registerVal4)
	return {}
end

registerVal2 = ListHelper_SetupDataSource("AARTabs", __FUNC_AA14E_, true)
DataSources["AARTabs"] = registerVal2
registerVal2 = {}
local function __FUNC_AAC26_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	return Engine.CreateModel(registerVal2, "aarStats.performanceTabStats")
end

registerVal2.getModel = __FUNC_AAC26_
DataSources["AARPerformanceTabStats"] = registerVal2
registerVal2 = {}
local function __FUNC_AACEE_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	return Engine.CreateModel(registerVal2, "aarStats.performanceTabStats.spmGraph")
end

registerVal2.getModel = __FUNC_AACEE_
DataSources["AARSPMGraph"] = registerVal2
registerVal2 = {}
local function __FUNC_AADBF_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	return Engine.CreateModel(registerVal2, "aarStats.performanceTabStats.kdrGraph")
end

registerVal2.getModel = __FUNC_AADBF_
DataSources["AARKDRGraph"] = registerVal2
registerVal2 = {}
local function __FUNC_AAE8F_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	return Engine.CreateModel(registerVal2, "scoreboardInfo")
end

registerVal2.getModel = __FUNC_AAE8F_
DataSources["Scoreboard"] = registerVal2
local function __FUNC_AAF48_(arg0)
	return CoD.AARUtilityCP.GetScoreboardTeamTable(arg0, 1.000000)
end

registerVal2 = ListHelper_SetupDataSource("scoreboardTeam1ListCP", __FUNC_AAF48_)
DataSources["ScoreboardTeam1ListCP"] = registerVal2
registerVal2 = {}
local function __FUNC_AAFE8_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetModelForController(arg0)
	local registerVal3 = Engine.CreateModel(registerVal4, "CodCaster")
	registerVal4 = Engine.CreateModel(registerVal3, "showCodCasterScoreboard")
	local registerVal5 = Engine.GetModelValue(registerVal4)
	if registerVal5 == true then
		local registerVal7 = Engine.GetGlobalModel()
		local registerVal6 = Engine.GetModel(registerVal7, "scoreboard.team3")
		arg1.scoreboardInfoModel = registerVal6
	else
		registerVal7 = Engine.GetGlobalModel()
		registerVal6 = Engine.GetModel(registerVal7, "scoreboard.team1")
		arg1.scoreboardInfoModel = registerVal6
	end
	if arg1.teamCountSubscription then
		arg1:removeSubscription(arg1.teamCountSubscription)
	end
	local registerVal8 = Engine.GetModel(arg1.scoreboardInfoModel, "count")
	local function __FUNC_AB32E_()
		arg1:updateDataSource(nil, true, true)
		local registerVal1 = Engine.GetModelForController(arg0)
		local registerVal0 = Engine.GetModel(registerVal1, ("UIVisibilityBit." .. Enum.UIVisibilityBit.BIT_SCOREBOARD_OPEN))
		Engine.ForceNotifyModelSubscriptions(registerVal0)
	end

	registerVal6 = arg1:subscribeToModel(registerVal8, __FUNC_AB32E_, false)
	arg1.teamCountSubscription = registerVal6
	if arg1.showCasterScoreboardSubscription then
		arg1:removeSubscription(arg1.showCasterScoreboardSubscription)
	end
	local function __FUNC_AB4B8_()
		arg1:updateDataSource(nil, true, false)
		local registerVal1 = Engine.GetModelForController(arg0)
		local registerVal0 = Engine.GetModel(registerVal1, ("UIVisibilityBit." .. Enum.UIVisibilityBit.BIT_SCOREBOARD_OPEN))
		Engine.ForceNotifyModelSubscriptions(registerVal0)
	end

	registerVal6 = arg1:subscribeToModel(registerVal4, __FUNC_AB4B8_, false)
	arg1.showCasterScoreboardSubscription = registerVal6
end

registerVal2.prepare = __FUNC_AAFE8_
local function __FUNC_AB644_(arg0)
	local registerVal2 = Engine.GetCurrentTeamCount()
	registerVal2 = Engine.IsZombiesGame()
	registerVal2 = Engine.IsCampaignGame()
	if registerVal2 < 2.000000 and not registerVal2 and not registerVal2 then
	end
	local registerVal3 = Engine.GetModelValue(Engine.GetModel(arg0.scoreboardInfoModel, "count"))
	return math.max(registerVal3, CoD.ScoreboardUtility.MinRowsToShowOnEachTeamForFFA)
end

registerVal2.getCount = __FUNC_AB644_
local function __FUNC_AB891_(arg0, arg1, arg2)
	return Engine.GetModel(arg1.scoreboardInfoModel, (arg2 - 1.000000))
end

registerVal2.getItem = __FUNC_AB891_
DataSources["ScoreboardTeam1List"] = registerVal2
registerVal2 = {}
local function __FUNC_AB928_(arg0, arg1, arg2)
	arg1.activeController = arg0
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.GetModel(registerVal4, "scoreboard.team2")
	arg1.scoreboardInfoModel = registerVal3
	if arg1.teamCountSubscription then
		arg1:removeSubscription(arg1.teamCountSubscription)
	end
	local registerVal5 = Engine.GetModel(arg1.scoreboardInfoModel, "count")
	local function __FUNC_ABC05_()
		arg1:updateDataSource(nil, true, true)
		local registerVal1 = Engine.GetModelForController(arg0)
		local registerVal0 = Engine.GetModel(registerVal1, ("UIVisibilityBit." .. Enum.UIVisibilityBit.BIT_SCOREBOARD_OPEN))
		Engine.ForceNotifyModelSubscriptions(registerVal0)
	end

	registerVal3 = arg1:subscribeToModel(registerVal5, __FUNC_ABC05_, false)
	arg1.teamCountSubscription = registerVal3
	if arg1.showCasterScoreboardSubscription then
		arg1:removeSubscription(arg1.showCasterScoreboardSubscription)
	end
	registerVal4 = Engine.GetModelForController(arg0)
	registerVal3 = Engine.CreateModel(registerVal4, "CodCaster")
	registerVal4 = Engine.CreateModel(registerVal3, "showCodCasterScoreboard")
	local function __FUNC_ABD90_()
		arg1:updateDataSource(nil, true, true)
		local registerVal1 = Engine.GetModelForController(arg0)
		local registerVal0 = Engine.GetModel(registerVal1, ("UIVisibilityBit." .. Enum.UIVisibilityBit.BIT_SCOREBOARD_OPEN))
		Engine.ForceNotifyModelSubscriptions(registerVal0)
	end

	registerVal5 = arg1:subscribeToModel(registerVal4, __FUNC_ABD90_, false)
	arg1.showCasterScoreboardSubscription = registerVal5
end

registerVal2.prepare = __FUNC_AB928_
local function __FUNC_ABF1C_(arg0)
	local registerVal2 = Engine.IsInGame()
	if registerVal2 then
		local registerVal3 = Engine.GetModelForController(arg0.activeController)
		registerVal2 = Engine.CreateModel(registerVal3, "CodCaster")
		registerVal3 = Engine.CreateModel(registerVal2, "showCodCasterScoreboard")
		local registerVal4 = Engine.GetModelValue(registerVal3)
	end
	registerVal2 = IsGameTypeDOA()
	if registerVal2 then
		return 0.000000
	else
		if registerVal4 == true then
			return 0.000000
		else
			registerVal3 = Engine.GetModelValue(Engine.GetModel(arg0.scoreboardInfoModel, "count"))
			return math.max(registerVal3, CoD.ScoreboardUtility.MinRowsToShowOnEachTeam)
		end
	end
end

registerVal2.getCount = __FUNC_ABF1C_
local function __FUNC_AC1EF_(arg0, arg1, arg2)
	return Engine.GetModel(arg1.scoreboardInfoModel, (arg2 - 1.000000))
end

registerVal2.getItem = __FUNC_AC1EF_
DataSources["ScoreboardTeam2List"] = registerVal2
registerVal2 = {}
local function __FUNC_AC284_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.GetModel(registerVal4, "scoreboard.team1")
	arg1.scoreboardInfoModel = registerVal3
	if arg1.teamCountSubscription then
		arg1:removeSubscription(arg1.teamCountSubscription)
	end
	local registerVal5 = Engine.GetModel(arg1.scoreboardInfoModel, "count")
	local function __FUNC_AC419_()
		arg1:updateDataSource()
	end

	registerVal3 = arg1:subscribeToModel(registerVal5, __FUNC_AC419_, false)
	arg1.teamCountSubscription = registerVal3
end

registerVal2.prepare = __FUNC_AC284_
local function __FUNC_AC46A_(arg0)
	local registerVal2 = Engine.GetModelValue(Engine.GetModel(arg0.scoreboardInfoModel, "count"))
	return math.max(registerVal2, 0.000000)
end

registerVal2.getCount = __FUNC_AC46A_
local function __FUNC_AC56D_(arg0, arg1, arg2)
	return Engine.GetModel(arg1.scoreboardInfoModel, (arg2 - 1.000000))
end

registerVal2.getItem = __FUNC_AC56D_
DataSources["CodCasterScoreboardTeam1List"] = registerVal2
registerVal2 = {}
local function __FUNC_AC604_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.GetModel(registerVal4, "scoreboard.team2")
	arg1.scoreboardInfoModel = registerVal3
	if arg1.teamCountSubscription then
		arg1:removeSubscription(arg1.teamCountSubscription)
	end
	local registerVal5 = Engine.GetModel(arg1.scoreboardInfoModel, "count")
	local function __FUNC_AC799_()
		arg1:updateDataSource()
	end

	registerVal3 = arg1:subscribeToModel(registerVal5, __FUNC_AC799_, false)
	arg1.teamCountSubscription = registerVal3
end

registerVal2.prepare = __FUNC_AC604_
local function __FUNC_AC7EA_(arg0)
	local registerVal2 = Engine.GetModelValue(Engine.GetModel(arg0.scoreboardInfoModel, "count"))
	return math.max(registerVal2, 0.000000)
end

registerVal2.getCount = __FUNC_AC7EA_
local function __FUNC_AC8ED_(arg0, arg1, arg2)
	return Engine.GetModel(arg1.scoreboardInfoModel, (arg2 - 1.000000))
end

registerVal2.getItem = __FUNC_AC8ED_
DataSources["CodCasterScoreboardTeam2List"] = registerVal2
registerVal2 = {}
local function __FUNC_AC984_(arg0)
	local registerVal1 = Engine.GetModelForController(arg0)
	local registerVal2 = Engine.CreateModel(registerVal1, "FreeRun")
	local registerVal3 = Engine.CreateModel(registerVal2, "runState")
	Engine.SetModelValue(registerVal3, 0.000000)
	local registerVal4 = Engine.CreateModel(registerVal2, "startTime")
	Engine.SetModelValue(registerVal4, 0.000000)
	local registerVal5 = Engine.CreateModel(registerVal2, "pausedTime")
	Engine.SetModelValue(registerVal5, 0.000000)
	local registerVal6 = Engine.CreateModel(registerVal2, "deltaTime")
	Engine.SetModelValue(registerVal6, 0.000000)
	local registerVal7 = Engine.CreateModel(registerVal2, "finishTime")
	Engine.SetModelValue(registerVal7, 0.000000)
	local registerVal8 = Engine.CreateModel(registerVal2, "topScore")
	local registerVal9 = Engine.CreateModel(registerVal8, "topScore1")
	Engine.SetModelValue(registerVal9, 0.000000)
	local registerVal10 = Engine.CreateModel(registerVal8, "topScore2")
	Engine.SetModelValue(registerVal10, 0.000000)
	local registerVal11 = Engine.CreateModel(registerVal8, "topScore3")
	Engine.SetModelValue(registerVal11, 0.000000)
	local registerVal12 = Engine.CreateModel(registerVal2, "distanceBar")
	local registerVal13 = Engine.CreateModel(registerVal12, "completion")
	Engine.SetModelValue(registerVal13, 0.000000)
	local registerVal14 = Engine.CreateModel(registerVal12, "ghostCompletion")
	Engine.SetModelValue(registerVal14, 0.000000)
	local registerVal15 = Engine.CreateModel(registerVal2, "freeRunInfo")
	local registerVal16 = Engine.GetModel(registerVal15, "bestTime")
	if registerVal16 == nil then
		local registerVal17 = Engine.CreateModel(registerVal15, "bestTime")
		Engine.SetModelValue(registerVal17, 0.000000)
	end
	registerVal17 = Engine.GetModel(registerVal15, "faults")
	if registerVal17 == nil then
		local registerVal18 = Engine.CreateModel(registerVal15, "faults")
		Engine.SetModelValue(registerVal18, 0.000000)
	end
	registerVal18 = Engine.CreateModel(registerVal15, "retries")
	Engine.SetModelValue(registerVal18, 0.000000)
	local registerVal19 = Engine.CreateModel(registerVal2, "timer")
	local registerVal20 = Engine.CreateModel(registerVal19, "currentTime")
	Engine.SetModelValue(registerVal20, 0.000000)
	local registerVal21 = Engine.CreateModel(registerVal19, "timeAdjustment")
	Engine.SetModelValue(registerVal21, 0.000000)
	local registerVal22 = Engine.CreateModel(registerVal19, "timeAdjustmentNegative")
	Engine.SetModelValue(registerVal22, 0.000000)
	local registerVal23 = Engine.CreateModel(registerVal15, "bulletPenalty")
	Engine.SetModelValue(registerVal23, 0.000000)
	local registerVal24 = Engine.CreateModel(registerVal15, "activeCheckpoint")
	Engine.SetModelValue(registerVal24, 0.000000)
	return registerVal2
end

registerVal2.getModel = __FUNC_AC984_
DataSources["FreeRun"] = registerVal2
registerVal2 = {}
local function __FUNC_AD0DE_(arg0, arg1, arg2)
	local registerVal3 = Engine.IsMultiplayerGame()
	registerVal3 = Engine.IsZombiesGame()
	if not arg1 or registerVal3 then
		CoD.AARUtility.CreateModelsForRewards(arg0)
	else
		CoD.AARUtilityCP.CreateModelsForRewards(arg0)
	end
end

registerVal2.prepare = __FUNC_AD0DE_
local function __FUNC_AD225_(arg0)
	local registerVal1 = Engine.IsMultiplayerGame()
	registerVal1 = Engine.IsZombiesGame()
	if not arg0 or registerVal1 then
		return CoD.AARUtility.GetRewardItemCount(arg0)
	else
		return CoD.AARUtilityCP.GetRewardItemCount(arg0)
	end
end

registerVal2.getCount = __FUNC_AD225_
local function __FUNC_AD371_(arg0, arg1, arg2)
	local registerVal3 = Engine.IsMultiplayerGame()
	registerVal3 = Engine.IsZombiesGame()
	if not arg1 or registerVal3 then
		return CoD.AARUtility.GetModelForRewardItemByIndex(arg0, arg2)
	else
		return CoD.AARUtilityCP.GetModelForRewardItemByIndex(arg0, arg2)
	end
end

registerVal2.getItem = __FUNC_AD371_
local function __FUNC_AD4CF_(arg0, arg1, arg2, arg3)
	if not arg1 or CoD.isZombie then
		local registerVal4 = CoD.SafeGetModelValue(arg1, "rewardCarouselWidgetType")
		if registerVal4 and registerVal4 ~= "" then
			return LUI.getTableFromPath(registerVal4)
		end
	end
	return nil
end

registerVal2.getWidgetTypeForItem = __FUNC_AD4CF_
DataSources["RewardsCarousel"] = registerVal2
registerVal2 = {}
local function __FUNC_AD61C_(arg0, arg1, arg2)
end

registerVal2.prepare = __FUNC_AD61C_
local function __FUNC_AD648_(arg0)
	return 0.000000
end

registerVal2.getCount = __FUNC_AD648_
local function __FUNC_AD681_(arg0, arg1, arg2)
	return nil
end

registerVal2.getItem = __FUNC_AD681_
DataSources["ZmPlayerStyles"] = registerVal2
registerVal2 = {}
local function __FUNC_AD6B4_(arg0, arg1, arg2)
	for index4=1.000000, 25.000000, 1.000000 do
		local registerVal9 = Engine.GetModelForController(arg0)
		local registerVal8 = Engine.CreateModel(registerVal9, ("DropdownTest.dropdownListTestModel" .. index4))
		registerVal9 = Engine.CreateModel(registerVal8, "itemName")
		Engine.SetModelValue(registerVal9, ("Random Value " .. index4))
	end
end

registerVal2.prepare = __FUNC_AD6B4_
local function __FUNC_AD82A_(arg0)
	return 25.000000
end

registerVal2.getCount = __FUNC_AD82A_
local function __FUNC_AD861_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetModelForController(arg0)
	return Engine.CreateModel(registerVal4, ("DropdownTest.dropdownListTestModel" .. arg2))
end

registerVal2.getItem = __FUNC_AD861_
DataSources["DropdownListTest"] = registerVal2
registerVal2 = {}
local function __FUNC_AD938_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	return Engine.GetModel(registerVal2, "deadSpectator")
end

registerVal2.getModel = __FUNC_AD938_
DataSources["DeadSpectate"] = registerVal2
local function __FUNC_AD9F0_(arg0)
	local registerVal1 = Dvar.ui_lobbyDebugSessionSQJ:exists()
	registerVal1 = Dvar.ui_lobbyDebugSessionSQJ:get()
	if arg0 or registerVal1 == false then
		return {}
	end
	local function __FUNC_AE0A8_(arg0, arg1)
		local registerVal2 = Engine.GetModel(arg0, arg1)
		return Engine.GetModelValue(registerVal2)
	end

	local function __FUNC_AE145_(arg0)
		local registerVal1 = math.mod(arg0, 3.000000)
		if registerVal1 == 0.000000 then
		else
			if registerVal1 == 1.000000 then
			end
		end
		return string.format("%d %d %d", (ColorSet.ResistanceHigh.r * 255.000000), (ColorSet.ResistanceHigh.g * 255.000000), (ColorSet.ResistanceHigh.b * 255.000000))
	end

	local registerVal6 = {}
	registerVal6.controller = arg0
	Engine.LobbyVM_CallFunc("SessionSQJRefreshInfo", registerVal6)
	local registerVal5 = Engine.GetGlobalModel()
	local registerVal4 = Engine.GetModel(registerVal5, "debug")
	registerVal5 = Engine.GetModel(registerVal4, "sessionSQJ")
	registerVal6 = __FUNC_AE0A8_(registerVal5, "searchStage")
	local registerVal7 = Engine.GetModel(registerVal5, "results")
	for index8=1.000000, registerVal6, 1.000000 do
		local registerVal12 = __FUNC_AE145_(index8)
		local registerVal13 = Engine.GetModel(registerVal7, tostring(index8))
		local registerVal14 = __FUNC_AE0A8_(registerVal13, "numResults")
		if registerVal14 == 0.000000 then
			local registerVal17 = {}
			local registerVal18 = {}
			registerVal18.noResults = "NO RESULTS - NO RESULTS - NO RESULTS - NO RESULTS - NO RESULTS - NO RESULTS - NO RESULTS - NO RESULTS - NO RESULTS - NO RESULTS - NO RESULTS - NO RESULTS"
			registerVal18.xuid = ""
			registerVal18.gamertag = ""
			registerVal18.publicIPAddress = ""
			registerVal18.privateIPAddress = ""
			registerVal18.natType = ""
			registerVal18.qosPing = ""
			registerVal18.status = ""
			registerVal18.searchStageColor = registerVal12
			registerVal17.models = registerVal18
			registerVal18 = {}
			registerVal18.disabled = false
			registerVal17.properties = registerVal18
			table.insert({}, registerVal17)
		else
			local registerVal15 = Engine.GetModel(registerVal13, "data")
			for index16=1.000000, registerVal14, 1.000000 do
				local registerVal20 = Engine.GetModel(registerVal15, tostring(index16))
				local registerVal21 = __FUNC_AE0A8_(registerVal20, "xuidstr")
				if not registerVal21 then
				end
				local registerVal22 = __FUNC_AE0A8_(registerVal20, "gamertag")
				if not registerVal22 then
				end
				local registerVal23 = __FUNC_AE0A8_(registerVal20, "publicIPAddress")
				if registerVal23 == nil then
				end
				local registerVal24 = __FUNC_AE0A8_(registerVal20, "privateIPAddress")
				if registerVal24 == nil then
				end
				local registerVal25 = __FUNC_AE0A8_(registerVal20, "natType")
				if registerVal25 == nil then
				end
				local registerVal26 = __FUNC_AE0A8_(registerVal20, "ping")
				if not registerVal26 then
				end
				local registerVal27 = __FUNC_AE0A8_(registerVal20, "status")
				if not registerVal27 then
				end
				local registerVal30 = {}
				local registerVal31 = {}
				registerVal31.noResults = ""
				registerVal31.xuid = "0"
				registerVal31.gamertag = ""
				registerVal31.publicIPAddress = "0.0.0.0"
				registerVal31.privateIPAddress = "0.0.0.0"
				registerVal31.natType = "UNKNOWN"
				registerVal31.qosPing = "??? ms"
				registerVal31.status = " ------- "
				registerVal31.searchStageColor = registerVal12
				registerVal30.models = registerVal31
				registerVal31 = {}
				registerVal31.disabled = false
				registerVal30.properties = registerVal31
				table.insert({}, registerVal30)
			end
		end
	end
	return {}
end

local function __FUNC_AE2F4_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "debug")
	registerVal4 = Engine.CreateModel(registerVal3, "sessionSQJ")
	local registerVal5 = Engine.CreateModel(registerVal4, "update")
	arg1.updateModel = registerVal5
	Engine.SetModelValue(arg1.updateModel, 0.000000)
	if arg1.updateSubscription then
		arg1:removeSubscription(arg1.updateSubscription)
	end
	local function __FUNC_AE4EB_()
		arg1:updateDataSource()
	end

	registerVal5 = arg1:subscribeToModel(arg1.updateModel, __FUNC_AE4EB_, false)
	arg1.updateSubscription = registerVal5
end

registerVal2 = ListHelper_SetupDataSource("DebugSessionSearchQoSJoin", __FUNC_AD9F0_, nil, nil, __FUNC_AE2F4_)
DataSources["DebugSessionSearchQoSJoin"] = registerVal2
local function __FUNC_AE53A_(arg0)
	local registerVal3 = Engine.GetGlobalModel()
	local registerVal2 = Engine.CreateModel(registerVal3, "lobbyDebug")
	registerVal3 = Engine.CreateModel(registerVal2, "processQueue")
	local registerVal4 = Engine.CreateModel(registerVal3, "data")
	local registerVal5 = Engine.CreateModel(registerVal3, "count")
	local registerVal6 = Engine.GetModelValue(registerVal5)
	if registerVal6 then
		for index7=1.000000, registerVal6, 1.000000 do
			local registerVal11 = Engine.GetModel(registerVal4, tostring(index7))
			local registerVal14 = {}
			local registerVal15 = {}
			local registerVal16 = Engine.GetModelValue(Engine.GetModel(registerVal11, "processName"))
			registerVal15.processName = registerVal16
			registerVal16 = Engine.GetModelValue(Engine.GetModel(registerVal11, "processCancellable"))
			registerVal15.processCancellable = registerVal16
			registerVal16 = Engine.GetModelValue(Engine.GetModel(registerVal11, "type"))
			registerVal15.type = registerVal16
			registerVal14.models = registerVal15
			table.insert({}, registerVal14)
			local registerVal12 = Engine.GetModelValue(Engine.GetModel(registerVal11, "actionCount"))
			if registerVal11 and 0.000000 < registerVal12 then
				local registerVal13 = Engine.GetModel(registerVal11, "actions")
				for index14=1.000000, registerVal12, 1.000000 do
					local registerVal18 = Engine.GetModel(registerVal13, tostring(index14))
					local registerVal21 = {}
					local registerVal22 = {}
					local registerVal23 = Engine.GetModelValue(Engine.GetModel(registerVal18, "processName"))
					registerVal22.processName = registerVal23
					registerVal23 = Engine.GetModelValue(Engine.GetModel(registerVal18, "processState"))
					registerVal22.processState = registerVal23
					registerVal23 = Engine.GetModelValue(Engine.GetModel(registerVal18, "type"))
					registerVal22.type = registerVal23
					registerVal21.models = registerVal22
					table.insert({}, registerVal21)
				end
			end
		end
	end
	return {}
end

local function __FUNC_AE9CB_(arg0, arg1, arg2)
	local registerVal4 = Engine.GetGlobalModel()
	local registerVal3 = Engine.CreateModel(registerVal4, "lobbyDebug")
	registerVal4 = Engine.CreateModel(registerVal3, "processQueue")
	local registerVal5 = Engine.CreateModel(registerVal4, "update")
	if arg1.updateSubscription then
		arg1:removeSubscription(arg1.updateSubscription)
	end
	local function __FUNC_AEB65_()
		arg1:updateDataSource()
	end

	local registerVal6 = arg1:subscribeToModel(registerVal5, __FUNC_AEB65_, false)
	arg1.updateSubscription = registerVal6
end

registerVal2 = ListHelper_SetupDataSource("LobbyProcessQueueInfo", __FUNC_AE53A_, nil, nil, __FUNC_AE9CB_)
DataSources["LobbyProcessQueueInfo"] = registerVal2
registerVal2 = {}
local function __FUNC_AEBB6_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "LeaveLobbyPopup")
	Engine.CreateModel(registerVal1, "popupType")
	Engine.CreateModel(registerVal1, "title")
	Engine.CreateModel(registerVal1, "hint")
	return registerVal1
end

registerVal2.getModel = __FUNC_AEBB6_
DataSources["LeaveLobbyPopup"] = registerVal2
registerVal2 = {}
local function __FUNC_AECEA_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	return Engine.GetModel(registerVal2, "hudItems.blackhat")
end

registerVal2.getModel = __FUNC_AECEA_
DataSources["Blackhat"] = registerVal2
local function __FUNC_AEDA4_(arg0)
	local registerVal4 = Engine.ProfileFloat(arg0, "r_sceneBrightness")
	for index6=1.000000, ((2.000000 * 8.000000) + 1.000000), 1.000000 do
		local registerVal10 = math.min(1.000000, math.max(-1.000000, ((index6 - (8.000000 + 1.000000)) / 8.000000)))
		local registerVal15 = {}
		local registerVal16 = {}
		registerVal16.value = registerVal10
		registerVal16.color = (((2.000000 * (index6 - (8.000000 + 1.000000))) + 29.000000) .. " " .. ((2.000000 * (index6 - (8.000000 + 1.000000))) + 29.000000) .. " " .. ((2.000000 * (index6 - (8.000000 + 1.000000))) + 29.000000))
		registerVal15.models = registerVal16
		registerVal16 = {}
		if (registerVal10 - (1.000000 / (8.000000 * 2.000000))) > registerVal4 or registerVal4 > (registerVal10 + (1.000000 / (8.000000 * 2.000000))) then
		end
		registerVal16.selectIndex = true
		registerVal15.properties = registerVal16
		table.insert({}, registerVal15)
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("BrightnessSelector", __FUNC_AEDA4_, true)
DataSources["BrightnessSelector"] = registerVal2
registerVal2 = {}
local function __FUNC_AEFDB_(arg0)
	local registerVal1 = CoD.ChatClientUtility.GetChatClientGlobalModel()
	CoD.ChatClientUtility.ResetAllModels(arg0)
	return registerVal1
end

registerVal2.getModel = __FUNC_AEFDB_
DataSources["ChatClientGlobal"] = registerVal2
registerVal2 = {}
local function __FUNC_AF0AE_(arg0, arg1, arg2)
	arg1.numElementsInList = arg1.vCount
	arg1.controller = arg0
	local registerVal3 = CoD.ChatClientUtility.GetChatEntriesListModel()
	arg1.chatClientEntriesModel = registerVal3
	local registerVal4 = Engine.ChatClient_FilterChannelGet(arg0, Enum.chatChannel_e.CHAT_CHANNEL_COUNT)
	arg1.filter = registerVal4
	arg1.GetList = Engine.ChatClient_GetEntries
	registerVal4 = Engine.ChatClient_EntriesCount(arg0, arg1.filter)
	arg1.CountEntries = registerVal4
	registerVal4 = {}
	registerVal4.xuid = 0.000000
	registerVal4.fullname = ""
	registerVal4.text = ""
	registerVal4.timestamp = ""
	registerVal4.timeMs = 0.000000
	registerVal4.chText = ""
	registerVal4.chColor = ""
	arg1.chatEntries = {}
	for index5=1.000000, arg1.numElementsInList, 1.000000 do
		arg1.chatEntries[index5] = {}
		local registerVal10 = Engine.CreateModel(arg1.chatClientEntriesModel, ("entry_" .. index5))
		arg1.chatEntries[index5].root = registerVal10
		registerVal10 = Engine.CreateModel(arg1.chatEntries[index5].root, "model")
		arg1.chatEntries[index5].model = registerVal10
		arg1.chatEntries[index5].properties = {}
		local registerVal9, registerVal10, registerVal11 = pairs(registerVal4)
		for index12,value13 in registerVal9, registerVal10, registerVal11 do
			local registerVal14 = Engine.CreateModel(arg1.chatEntries[index5].model, index12)
		end
	end
	local function __FUNC_AF699_(arg0, arg1, arg2, arg3)
		if not arg1.GetList then
			return 
		end
		local registerVal5 = arg1.GetList(arg0, arg2, arg3, arg1.filter)
		if registerVal5 then
			for index5=1.000000, #arg0, 1.000000 do
				local registerVal11, registerVal12, registerVal13 = pairs(registerVal5[index5])
				for index14,value15 in registerVal11, registerVal12, registerVal13 do
					local registerVal16 = Engine.GetModel(arg1.chatEntries[((# + 1.000000) - index5)].model, index14)
					if registerVal16 ~= nil then
						Engine.SetModelValue(registerVal16, value15)
					end
					arg1.chatEntries[((# + 1.000000) - index5)].properties[index14] = value15
				end
			end
		end
		return arg1.chatEntries[((arg2 % arg1.numElementsInList) + 1.000000)].model
	end

	arg1.updateModels = __FUNC_AF699_
	arg1.updateModels(arg0, arg1, 0.000000, arg1.numElementsInList)
	if arg1.updateSubscription then
		arg1:removeSubscription(arg1.updateSubscription)
	end
	local registerVal5 = CoD.ChatClientUtility.GetUpdateModel()
	local function __FUNC_AF8DE_()
		arg1:updateDataSource()
	end

	local registerVal6 = arg1:subscribeToModel(registerVal5, __FUNC_AF8DE_, false)
	arg1.updateSubscription = registerVal6
end

registerVal2.prepare = __FUNC_AF0AE_
local function __FUNC_AF92E_(arg0)
	return arg0.CountEntries
end

registerVal2.getCount = __FUNC_AF92E_
local function __FUNC_AF97E_(arg0, arg1, arg2)
	return arg1.chatEntries[arg2].model
end

registerVal2.getItem = __FUNC_AF97E_
DataSources["ChatClientEntriesList"] = registerVal2
registerVal2 = {}
local function __FUNC_AF9F4_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.GetModel(registerVal2, "ModsGlobal")
	return registerVal1
end

registerVal2.getModel = __FUNC_AF9F4_
DataSources["ModsGlobal"] = registerVal2
local function __FUNC_AFA9E_(arg0)
	local registerVal2 = Engine.Mods_Lists_GetInfoEntries(LuaEnums.MODS_BASE_PATH, 0.000000, Engine.Mods_Lists_GetInfoEntriesCount(LuaEnums.MODS_BASE_PATH))
	if registerVal2 then
		for index3=0.000000, #0.000000, 1.000000 do
			local registerVal9, registerVal10, registerVal11 = pairs(registerVal2[index3])
			for index12,value13 in registerVal9, registerVal10, registerVal11 do
				{}[index12] = value13
			end
			registerVal11 = {}
			registerVal11.models = {}
			table.insert({}, registerVal11)
		end
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("ModsLoadEntry", __FUNC_AFA9E_, true)
DataSources["ModsLoadEntry"] = registerVal2
local function __FUNC_AFC51_(arg0)
	local registerVal2 = IsArabicSku()
	if registerVal2 then
		local registerVal4 = {}
		local registerVal5 = {}
		registerVal5.image = "uie_language_english"
		registerVal5.action = ChangeLanguage
		registerVal5.param = "englisharabic"
		registerVal4.models = registerVal5
		table.insert({}, registerVal4)
		registerVal4 = {}
		registerVal5 = {}
		registerVal5.image = "uie_language_arabic"
		registerVal5.action = ChangeLanguage
		registerVal5.param = "arabic"
		registerVal4.models = registerVal5
		table.insert({}, registerVal4)
	else
		registerVal2 = IsJapaneseSku()
		if registerVal2 then
			registerVal4 = {}
			registerVal5 = {}
			registerVal5.image = "uie_language_japanese"
			registerVal5.action = ChangeLanguage
			registerVal5.param = "fulljapanese"
			registerVal4.models = registerVal5
			table.insert({}, registerVal4)
			registerVal4 = {}
			registerVal5 = {}
			registerVal5.image = "uie_language_english_with_japanese_subtitles"
			registerVal5.action = ChangeLanguage
			registerVal5.param = "japanese"
			registerVal4.models = registerVal5
			table.insert({}, registerVal4)
		else
			registerVal2 = IsChineseSku()
			if registerVal2 then
				registerVal4 = {}
				registerVal5 = {}
				registerVal5.image = "uie_language_english"
				registerVal5.action = ChangeLanguage
				registerVal5.param = "english"
				registerVal4.models = registerVal5
				table.insert({}, registerVal4)
				registerVal4 = {}
				registerVal5 = {}
				registerVal5.image = "uie_language_simplified_chinese"
				registerVal5.action = ChangeLanguage
				registerVal5.param = "simplifiedchinese"
				registerVal4.models = registerVal5
				table.insert({}, registerVal4)
				registerVal4 = {}
				registerVal5 = {}
				registerVal5.image = "uie_language_traditional_chinese"
				registerVal5.action = ChangeLanguage
				registerVal5.param = "traditionalchinese"
				registerVal4.models = registerVal5
				table.insert({}, registerVal4)
			end
		end
	end
	return {}
end

registerVal2 = ListHelper_SetupDataSource("FirstTimeLanguageSelection", __FUNC_AFC51_)
DataSources["FirstTimeLanguageSelection"] = registerVal2
registerVal2 = {}
local function __FUNC_B0059_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	return Engine.CreateModel(registerVal2, "zmInventory")
end

registerVal2.getModel = __FUNC_B0059_
DataSources["ZMQuestItemHolders"] = registerVal2
local function __FUNC_B0111_(arg0, arg1)
	if not CoD.Zombie.Timers then
		return {}
	end
	local registerVal3 = Engine.GetModelForController(arg0)
	local registerVal4, registerVal5, registerVal6 = ipairs(CoD.Zombie.Timers)
	for index7,value8 in registerVal4, registerVal5, registerVal6 do
		local registerVal10 = Engine.CreateModel(registerVal3, ("hudItems.time." .. value8.modelName))
		if not arg1[("timerSubscription_" .. value8.modelName)] then
			local function __FUNC_B048E_(arg0)
				arg1:updateDataSource()
			end

			local registerVal12 = arg1:subscribeToModel(registerVal10, __FUNC_B048E_, false)
			arg1[("timerSubscription_" .. value8.modelName)] = registerVal12
		end
		registerVal12 = Engine.CreateModel(registerVal3, ("hudItems.time." .. value8.headerModelName))
		local registerVal13 = Engine.GetModelValue(registerVal12)
		if value8.headerModelName and registerVal13 then
			local registerVal14 = Engine.Localize(value8.header, registerVal13)
		end
		registerVal12 = Engine.GetModelValue(registerVal10)
		if registerVal12 and registerVal12 ~= 0.000000 then
			local registerVal15 = {}
			local registerVal16 = {}
			registerVal16.header = registerVal14
			registerVal16.time = registerVal12
			registerVal15.models = registerVal16
			table.insert({}, registerVal15)
		end
	end
	return {}
end

registerVal2 = DataSourceHelpers.ListSetup("GameTimeWidgetList", __FUNC_B0111_, true)
DataSources["GameTimeWidgetList"] = registerVal2
registerVal2 = {}
local function __FUNC_B04DE_(arg0)
	local registerVal2 = Engine.GetModelForController(arg0)
	return Engine.CreateModel(registerVal2, "reticleBindings")
end

registerVal2.getModel = __FUNC_B04DE_
local function __FUNC_B0599_(arg0, arg1)
	local registerVal2 = DataSources.ReticleBindings.getModel(arg0)
	Engine.UnsubscribeAndFreeModel(registerVal2)
	local registerVal3 = DataSources.ReticleBindings.getModel(arg0)
	registerVal3, registerVal4, registerVal5 = ipairs(arg1)
	for index6,value7 in registerVal3, registerVal4, registerVal5 do
		local registerVal8 = Engine.CreateModel(registerVal3, value7)
		local registerVal9, registerVal10 = Engine.GetBindingButtonString(arg0, ("+" .. value7), true)
		local registerVal12 = Engine.GetModel(DataSources.Controller.Model, CoD.ButtonMappings[registerVal9])
		if registerVal9 and CoD.ButtonMappings[registerVal9] and registerVal12 then
			Engine.SetModelValue(registerVal8, Engine.GetModelValue(registerVal12))
		end
	end
end

registerVal2["createModelsForActions"] = __FUNC_B0599_
DataSources["ReticleBindings"] = registerVal2
registerVal2 = {}
local function __FUNC_B0865_()
	local registerVal1 = Engine.GetGlobalModel()
	return Engine.GetModel(registerVal1, "liveEventViewer")
end

registerVal2.getModel = __FUNC_B0865_
DataSources["LiveEventViewer"] = registerVal2
local function __FUNC_B0913_(arg0)
	local registerVal2 = Dvar.hls_quality:get()
	local registerVal3, registerVal4, registerVal5 = ipairs(CoD.LiveEventQualities)
	for index6,value7 in registerVal3, registerVal4, registerVal5 do
		local registerVal10 = {}
		local registerVal11 = {}
		registerVal11.displayText = value7.display
		registerVal10.models = registerVal11
		registerVal11 = {}
		registerVal11.qualityId = value7.qualityId
		if value7.qualityId ~= registerVal2 then
		end
		registerVal11.selectIndex = true
		registerVal10.properties = registerVal11
		table.insert({}, registerVal10)
	end
	return {}
end

local function __FUNC_B0AE6_(arg0, arg1, arg2)
	local function __FUNC_B0BDB_()
		arg1:updateDataSource()
	end

	DataSources.LiveEventViewerQualities.Update = __FUNC_B0BDB_
	local function __FUNC_B0C2A_()
		DataSources.LiveEventViewerQualities.Update = nil
	end

	LUI.OverrideFunction_CallOriginalFirst(arg1, "close", __FUNC_B0C2A_)
end

registerVal2 = ListHelper_SetupDataSource("LiveEventViewerQualities", __FUNC_B0913_, true, nil, __FUNC_B0AE6_)
DataSources["LiveEventViewerQualities"] = registerVal2
registerVal2 = {}
local function __FUNC_B0CB0_()
	local registerVal1 = Engine.GetGlobalModel()
	local registerVal0 = Engine.CreateModel(registerVal1, "vodViewer")
	Engine.CreateModel(registerVal0, "stream")
	return registerVal0
end

registerVal2.getModel = __FUNC_B0CB0_
DataSources["VoDViewer"] = registerVal2
registerVal2 = {}
local function __FUNC_B0D88_(arg0)
	local registerVal2 = Engine.GetGlobalModel()
	local registerVal1 = Engine.CreateModel(registerVal2, "OtherPlayerStats")
	return registerVal1
end

registerVal2.getModel = __FUNC_B0D88_
DataSources["OtherPlayerStats"] = registerVal2
registerVal3 = Engine["GetGlobalModel"]()
registerVal2 = Engine["CreateModel"](registerVal3, "DataSources.GlobalSources")
DataSources.GlobalSources["Model"] = registerVal2
registerVal3 = Engine["GetGlobalModel"]()
registerVal2 = Engine["CreateModel"](registerVal3, "DataSources.Controller")
DataSources.Controller["Model"] = registerVal2
registerVal3 = Engine["GetGlobalModel"]()
registerVal2 = Engine["CreateModel"](registerVal3, "DataSources.VehicleController")
DataSources.VehicleController["Model"] = registerVal2
function createControllerBindings(arg0, arg1, arg2, arg3, arg4)
	local registerVal6 = Engine.CreateModel(DataSources.Controller.Model, arg2)
	Engine.SetModelValue(registerVal6, arg3)
	registerVal6 = Engine.CreateModel(DataSources.VehicleController.Model, arg2)
	Engine.SetModelValue(registerVal6, arg3)
	if arg1 then
		CoD.ButtonMappings[arg1] = arg2
	end
end

function UpdateControllerBindings(arg0, arg1)
	if arg0 ~= 0.000000 then
		return 
	end
	if Enum.gamepadType_e.GAMEPAD_TYPE_DURANGO == arg1 then
		createControllerBindings(arg0, "BUTTON_A", "primary_button_image", "xenonbutton_a")
		createControllerBindings(arg0, "BUTTON_B", "secondary_button_image", "xenonbutton_b")
		createControllerBindings(arg0, "BUTTON_X", "alt1_button_image", "xenonbutton_x")
		createControllerBindings(arg0, "BUTTON_Y", "alt2_button_image", "xenonbutton_y")
		createControllerBindings(arg0, "BUTTON_BACK", "back_button_image", "xenonbutton_back")
		createControllerBindings(arg0, "BUTTON_START", "start_button_image", "xenonbutton_start")
		createControllerBindings(arg0, "BUTTON_LSHLDR", "left_shoulder_button_image", "xenonbutton_lb", "t7_icons_controller_lbwhite")
		createControllerBindings(arg0, nil, "left_shoulder_button_image_glow", "uie_t7_icons_controller_durango_lb_glow")
		createControllerBindings(arg0, "BUTTON_RSHLDR", "right_shoulder_button_image", "xenonbutton_rb", "t7_icons_controller_rbwhite")
		createControllerBindings(arg0, nil, "right_shoulder_button_image_glow", "uie_t7_icons_controller_durango_rb_glow")
		createControllerBindings(arg0, "BUTTON_LSTICK", "left_stick_button_image", "ui_button_xenon_stick_ani_32_Ldown")
		createControllerBindings(arg0, "BUTTON_RSTICK", "right_stick_button_image", "ui_button_xenon_stick_ani_32_Rdown")
		createControllerBindings(arg0, nil, "move_left_stick_button_image", "t7_icons_controller_ls")
		createControllerBindings(arg0, nil, "move_right_stick_button_image", "t7_icons_controller_rs")
		createControllerBindings(arg0, "BUTTON_LTRIG", "left_trigger_button_image", "xenonbutton_lt", "t7_icons_controller_ltwhite")
		createControllerBindings(arg0, "BUTTON_RTRIG", "right_trigger_button_image", "xenonbutton_rt", "t7_icons_controller_rtwhite")
		createControllerBindings(arg0, nil, "dpad_all_button_image", "xenonbutton_dpad_all")
		createControllerBindings(arg0, nil, "dpad_lr_button_image", "xenonbutton_dpad_rl")
		createControllerBindings(arg0, nil, "dpad_ud_button_image", "xenonbutton_dpad_ud")
		createControllerBindings(arg0, "DPAD_UP", "dpad_up_button_image", "xenonbutton_dpad_up")
		createControllerBindings(arg0, "DPAD_DOWN", "dpad_down_button_image", "xenonbutton_dpad_down")
		createControllerBindings(arg0, "DPAD_LEFT", "dpad_left_button_image", "xenonbutton_dpad_left")
		createControllerBindings(arg0, "DPAD_RIGHT", "dpad_right_button_image", "xenonbutton_dpad_right")
		createControllerBindings(arg0, nil, "left_stick_move_image", "t7_icons_controller_ls")
		createControllerBindings(arg0, nil, "right_stick_move_image", "t7_icons_controller_rs")
	else
		if Enum.gamepadType_e.GAMEPAD_TYPE_ORBIS == arg1 then
			local registerVal5 = Engine.ShouldSwapCircleAndCross()
			if arg1 or not "secondary_button_image" then
			end
			local registerVal7 = Engine.ShouldSwapCircleAndCross()
			if arg1 or not "ps3button_circle" then
			end
			createControllerBindings(arg0, "BUTTON_A", "primary_button_image", "ps3button_x", "ps3button_x")
			registerVal5 = Engine.ShouldSwapCircleAndCross()
			if arg1 or not "primary_button_image" then
			end
			registerVal7 = Engine.ShouldSwapCircleAndCross()
			if arg1 or not "ps3button_x" then
			end
			createControllerBindings(arg0, "BUTTON_B", "secondary_button_image", "ps3button_circle", "ps3button_circle")
			createControllerBindings(arg0, "BUTTON_X", "alt1_button_image", "ps3button_square")
			createControllerBindings(arg0, "BUTTON_Y", "alt2_button_image", "ps3button_triangle")
			createControllerBindings(arg0, "BUTTON_BACK", "back_button_image", "ps3button_select")
			createControllerBindings(arg0, "BUTTON_START", "start_button_image", "ps3button_start")
			if arg1 or not "t7_icons_controller_l1white" then
			end
			createControllerBindings(arg0, "BUTTON_LSHLDR", "left_shoulder_button_image", "ps3button_l1", "t7_icons_controller_lbwhite")
			createControllerBindings(arg0, nil, "left_shoulder_button_image_glow", "uie_t7_icons_controller_orbis_l1_glow")
			if arg1 or not "t7_icons_controller_r1white" then
			end
			createControllerBindings(arg0, "BUTTON_RSHLDR", "right_shoulder_button_image", "ps3button_r1", "t7_icons_controller_rbwhite")
			createControllerBindings(arg0, nil, "right_shoulder_button_image_glow", "uie_t7_icons_controller_orbis_r1_glow")
			createControllerBindings(arg0, "BUTTON_LSTICK", "left_stick_button_image", "ps3button_l3")
			createControllerBindings(arg0, "BUTTON_RSTICK", "right_stick_button_image", "ps3button_r3")
			createControllerBindings(arg0, nil, "move_left_stick_button_image", "t7_icons_controller_ls")
			createControllerBindings(arg0, nil, "move_right_stick_button_image", "t7_icons_controller_rs")
			if arg1 or not "t7_icons_controller_l2white" then
			end
			createControllerBindings(arg0, "BUTTON_LTRIG", "left_trigger_button_image", "ps3button_l2", "t7_icons_controller_ltwhite")
			if arg1 or not "t7_icons_controller_r2white" then
			end
			createControllerBindings(arg0, "BUTTON_RTRIG", "right_trigger_button_image", "ps3button_r2", "t7_icons_controller_rtwhite")
			createControllerBindings(arg0, nil, "dpad_all_button_image", "ps3button_dpad_all")
			createControllerBindings(arg0, nil, "dpad_lr_button_image", "ps3button_dpad_rl")
			createControllerBindings(arg0, nil, "dpad_ud_button_image", "ps3button_dpad_ud")
			createControllerBindings(arg0, "DPAD_UP", "dpad_up_button_image", "ps3button_dpad_up")
			createControllerBindings(arg0, "DPAD_DOWN", "dpad_down_button_image", "ps3button_dpad_down")
			createControllerBindings(arg0, "DPAD_LEFT", "dpad_left_button_image", "ps3button_dpad_left")
			createControllerBindings(arg0, "DPAD_RIGHT", "dpad_right_button_image", "ps3button_dpad_right")
			createControllerBindings(arg0, nil, "left_stick_move_image", "t7_icons_controller_ls")
			createControllerBindings(arg0, nil, "right_stick_move_image", "t7_icons_controller_rs")
		else
			createControllerBindings(arg0, "BUTTON_A", "primary_button_image", "ps3button_x")
			createControllerBindings(arg0, "BUTTON_B", "secondary_button_image", "ps3button_circle")
			createControllerBindings(arg0, "BUTTON_X", "alt1_button_image", "ps3button_square")
			createControllerBindings(arg0, "BUTTON_Y", "alt2_button_image", "ps3button_triangle")
			createControllerBindings(arg0, "BUTTON_BACK", "back_button_image", "ps3button_select")
			createControllerBindings(arg0, "BUTTON_START", "start_button_image", "ps3button_start")
			if arg1 or not "t7_icons_controller_l1white" then
			end
			createControllerBindings(arg0, "BUTTON_LSHLDR", "left_shoulder_button_image", "ps3button_l1", "t7_icons_controller_lbwhite")
			createControllerBindings(arg0, nil, "left_shoulder_button_image_glow", "uie_t7_icons_controller_orbis_l1_glow")
			if arg1 or not "t7_icons_controller_r1white" then
			end
			createControllerBindings(arg0, "BUTTON_RSHLDR", "right_shoulder_button_image", "ps3button_r1", "t7_icons_controller_rbwhite")
			createControllerBindings(arg0, nil, "right_shoulder_button_image_glow", "uie_t7_icons_controller_orbis_r1_glow")
			createControllerBindings(arg0, "BUTTON_LSTICK", "left_stick_button_image", "ps3button_l3")
			createControllerBindings(arg0, "BUTTON_RSTICK", "right_stick_button_image", "ps3button_r3")
			createControllerBindings(arg0, nil, "move_left_stick_button_image", "ui_button_ps3_stick_ls_32")
			createControllerBindings(arg0, nil, "move_right_stick_button_image", "ui_button_ps3_stick_rs_32")
			if arg1 or not "t7_icons_controller_l2white" then
			end
			createControllerBindings(arg0, "BUTTON_LTRIG", "left_trigger_button_image", "ps3button_l2", "t7_icons_controller_ltwhite")
			if arg1 or not "t7_icons_controller_r2white" then
			end
			createControllerBindings(arg0, "BUTTON_RTRIG", "right_trigger_button_image", "ps3button_r2", "t7_icons_controller_rtwhite")
			createControllerBindings(arg0, nil, "dpad_all_button_image", "ps3button_dpad_all")
			createControllerBindings(arg0, nil, "dpad_lr_button_image", "ps3button_dpad_rl")
			createControllerBindings(arg0, nil, "dpad_ud_button_image", "ps3button_dpad_ud")
			createControllerBindings(arg0, "DPAD_UP", "dpad_up_button_image", "ps3button_dpad_up")
			createControllerBindings(arg0, "DPAD_DOWN", "dpad_down_button_image", "ps3button_dpad_down")
			createControllerBindings(arg0, "DPAD_LEFT", "dpad_left_button_image", "ps3button_dpad_left")
			createControllerBindings(arg0, "DPAD_RIGHT", "dpad_right_button_image", "ps3button_dpad_right")
			createControllerBindings(arg0, nil, "left_stick_move_image", "t7_icons_controller_ls")
			createControllerBindings(arg0, nil, "right_stick_move_image", "t7_icons_controller_rs")
		end
	end
	if CoD.isPC then
		createControllerBindings(arg0, "KEY_MOUSE1", "mouse_left_button_image", "mousebuttonleft")
		createControllerBindings(arg0, "KEY_MOUSE2", "mouse_right_button_image", "mousebuttonright")
		createControllerBindings(arg0, "KEY_MOUSE3", "mouse_middle_button_image", "mousebuttonmiddle")
		createControllerBindings(arg0, "MWHEELUP", "mouse_wheelup_button_image", "mouseWheelUp")
		createControllerBindings(arg0, "MWHEELDOWN", "mouse_wheeldown_button_image", "mouseWheelDown")
		createControllerBindings(arg0, nil, "mouse_button_image", "mouse")
	end
end

local registerVal0 = Engine["GetPrimaryController"]()
UpdateControllerBindings(registerVal0, Engine["GamepadType"](registerVal0))
registerVal2 = Engine["GetMaxControllerCount"]()
for index1=0.000000, (registerVal2 - 1.000000), 1.000000 do
	local registerVal5 = Engine["GetModelForController"](index1)
	Engine["CreateModel"](registerVal5, "hintText")
	registerVal6 = Engine["CreateModel"](registerVal5, "clanTag")
	Engine["SetModelValue"](registerVal6, "")
	if CoD["isPC"] and CoD["useController"] then
		if DataSourceHelpers["ControllerTypeSubscription"] == nil then
			DataSourceHelpers["ControllerTypeSubscription"] = {}
		end
		if DataSourceHelpers["ControllerTypeSubscription"][index1] == nil then
			local registerVal8 = LUI["UIElement"]["new"]()
			DataSourceHelpers["ControllerTypeSubscription"][index1] = registerVal8
		end
		DataSourceHelpers["ControllerTypeSubscription"][index1]:"unsubscribeFromAllModels"()
		local registerVal7 = Engine["GetModelForController"](index1)
		registerVal8 = Engine["CreateModel"](registerVal7, "ControllerType")
		local function __FUNC_B2778_(arg0)
			local registerVal3 = Engine.GamepadsConnectedIsActive(1.000000)
			registerVal3 = IsGamepad(registerVal0)
			if registerVal3 and not registerVal3 then
			end
			UpdateControllerBindings(registerVal0, Engine.GamepadType(1.000000))
		end

		DataSourceHelpers["ControllerTypeSubscription"][index1]:"subscribeToModel"(registerVal8, __FUNC_B2778_, true)
	end
	Engine["CreateModel"](registerVal5, "WorldSpaceIndicators")
	registerVal7 = Engine["CreateModel"](registerVal5, "scriptNotify")
	local registerVal9 = Engine["CreateModel"](registerVal7, "numArgs")
	Engine["SetModelValue"](registerVal9, 0.000000)
	Engine["SetModelValue"](registerVal7, "")
	Engine["CreateModel"](registerVal5, "playerConnected")
	Engine["CreateModel"](registerVal5, "playerDisconnected")
	registerVal8 = Engine["CreateModel"](registerVal5, "hudItems")
	Engine["CreateModel"](registerVal8, "stickyImage")
	Engine["CreateModel"](registerVal8, "shockImageBottom")
	Engine["CreateModel"](registerVal8, "shockImageRight")
	Engine["CreateModel"](registerVal8, "shockImageLeft")
	Engine["CreateModel"](registerVal8, "shockImageTop")
	Engine["CreateModel"](registerVal8, "showCursorHint")
	Engine["CreateModel"](registerVal8, "cursorHintImage")
	Engine["CreateModel"](registerVal8, "cursorHintText")
	Engine["CreateModel"](registerVal8, "cursorHintTextLine2")
	Engine["CreateModel"](registerVal8, "cursorHintIconRatio")
	Engine["CreateModel"](registerVal8, "cursorHintIconFlip")
	Engine["CreateModel"](registerVal8, "sixthsense")
	Engine["CreateModel"](registerVal8, "outOfBoundsEndTime")
	Engine["CreateModel"](registerVal8, "pulseNoAmmo")
	Engine["CreateModel"](registerVal8, "pulseNoLethal")
	Engine["CreateModel"](registerVal8, "pulseNoTactical")
	Engine["CreateModel"](registerVal8, "armorOverlay")
	Engine["CreateModel"](registerVal8, "armorPercent")
	Engine["CreateModel"](registerVal8, "health")
	Engine["CreateModel"](registerVal8, "regenDelayProgress")
	Engine["CreateModel"](registerVal8, "showDamageWidget")
	Engine["CreateModel"](registerVal8, "cybercomActiveType")
	Engine["CreateModel"](registerVal8, "cybercomRequestedType")
	Engine["CreateModel"](registerVal8, "playerSpawned")
	Engine["CreateModel"](registerVal8, "ammoPickedUp")
	Engine["CreateModel"](registerVal8, "tacticalModeActivated")
	Engine["CreateModel"](registerVal8, "enhancedVisionActivated")
	Engine["CreateModel"](registerVal8, "livesLeft")
	registerVal9 = Engine["CreateModel"](registerVal8, "voipInfo")
	for index10=1.000000, LuaEnums["MAX_CLIENTS"], 1.000000 do
		local registerVal14 = Engine["CreateModel"](registerVal9, ("voip" .. index10))
		local registerVal16 = Engine["CreateModel"](registerVal14, "status")
		Engine["SetModelValue"](registerVal16, 0.000000)
		registerVal16 = Engine["CreateModel"](registerVal14, "name")
		Engine["SetModelValue"](registerVal16, "")
	end
	local registerVal10 = Engine["CreateModel"](registerVal5, "CTF")
	Engine["CreateModel"](registerVal10, "friendlyFlagCarrier")
	Engine["CreateModel"](registerVal10, "friendlyFlagAway")
	Engine["CreateModel"](registerVal10, "enemyFlagCarrier")
	Engine["CreateModel"](registerVal10, "enemyFlagAway")
	if not CoD["isFrontend"] and not CoD["isCampaign"] and CoD["isZombie"] then
		Engine["CreateModel"](registerVal5, "bgb_current")
		Engine["CreateModel"](registerVal5, "bgb_display")
		Engine["CreateModel"](registerVal5, "bgb_timer")
		Engine["CreateModel"](registerVal5, "bgb_activations_remaining")
		Engine["CreateModel"](registerVal5, "bgb_invalid_use")
		Engine["CreateModel"](registerVal5, "bgb_one_shot_use")
	end
	local registerVal12 = Engine["CreateModel"](registerVal8, "console")
	registerVal14 = Engine["CreateModel"](registerVal12, "currentIndex")
	Engine["SetModelValue"](registerVal14, 0.000000)
	registerVal14 = Engine["CreateModel"](registerVal12, "numEntries")
	Engine["SetModelValue"](registerVal14, 7.000000)
	for index13=0.000000, (7.000000 - 1.000000), 1.000000 do
		local registerVal17 = Engine["CreateModel"](registerVal12, ("line" .. index13))
		Engine["CreateModel"](registerVal17, "text0")
		Engine["CreateModel"](registerVal17, "text0color")
		Engine["CreateModel"](registerVal17, "icon0")
		Engine["CreateModel"](registerVal17, "text1")
		Engine["CreateModel"](registerVal17, "text1color")
		Engine["CreateModel"](registerVal17, "icon1")
		Engine["CreateModel"](registerVal17, "iconWidth")
	end
	local registerVal13 = Engine["CreateModel"](registerVal8, "centerConsole")
	registerVal14 = Engine["CreateModel"](registerVal13, "currentIndex")
	Engine["SetModelValue"](registerVal14, 0.000000)
	registerVal14 = Engine["CreateModel"](registerVal13, "numEntries")
	Engine["SetModelValue"](registerVal14, 7.000000)
	for index13=0.000000, (7.000000 - 1.000000), 1.000000 do
		registerVal17 = Engine["CreateModel"](registerVal13, ("line" .. index13))
		Engine["CreateModel"](registerVal17, "text0")
		Engine["CreateModel"](registerVal17, "text0color")
		Engine["CreateModel"](registerVal17, "icon0")
		Engine["CreateModel"](registerVal17, "text1")
		Engine["CreateModel"](registerVal17, "text1color")
		Engine["CreateModel"](registerVal17, "icon1")
		Engine["CreateModel"](registerVal17, "iconWidth")
	end
	registerVal13 = Engine["CreateModel"](registerVal8, "killcamWeapon")
	killcamWeaponModel = registerVal13
	Engine["CreateModel"](killcamWeaponModel, "weaponName")
	Engine["SetModelValue"](killcamWeaponModel, 0.000000)
	for index13=0.000000, 6.000000, 1.000000 do
		Engine["CreateModel"](killcamWeaponModel, ("attachment" .. index13))
	end
	Engine["CreateModel"](killcamWeaponModel, "killfeedicon")
	Engine["CreateModel"](killcamWeaponModel, "flip")
	registerVal13 = Engine["CreateModel"](registerVal5, "vehicle")
	Engine["CreateModel"](registerVal13, "vehicleType")
	DataSources["VehicleInfo"]["clearButtonModels"](index1)
	registerVal14 = Engine["CreateModel"](registerVal5, "profile")
	if registerVal14 then
		local function __FUNC_B288A_(arg0)
			local registerVal1 = Engine.CreateModel(registerVal14, arg0)
			local registerVal2 = Engine.IsProfileSignedIn(index1)
			if registerVal1 and registerVal2 then
				Engine.SetModelValue(registerVal1, CoD.ExeProfileVarBool(index1, arg0))
			end
		end

		__FUNC_B288A_("tacticalModeShowDamage")
		__FUNC_B288A_("tacticalModeShowArchetype")
		__FUNC_B288A_("tacticalModeShowDistance")
		__FUNC_B288A_("tacticalModeShowStatus")
		local function __FUNC_B29AB_(arg0)
			local registerVal1 = Engine.CreateModel(registerVal14, arg0)
			local registerVal2 = Engine.IsProfileSignedIn(index1)
			if registerVal1 and registerVal2 then
				local registerVal3 = Engine.GetPlayerCommonGamerProfile(index1)
				if registerVal3 ~= nil and registerVal3[arg0] ~= nil then
					local registerVal4 = registerVal3[arg0]:get()
				end
				Engine.SetModelValue(registerVal1, registerVal4)
			end
		end

		__FUNC_B29AB_("colorblindMode")
		__FUNC_B29AB_("snd_frontendTracksState")
	end
	local registerVal15 = Engine["CreateModel"](registerVal5, "CACMenu")
	Engine["CreateModel"](registerVal15, "numItemsToRemove")
	Engine["CreateModel"](registerVal15, "curWeaponVariantName")
	Engine["CreateModel"](registerVal15, "numWildcardItemsToRemove")
	Engine["CreateModel"](registerVal15, "currentHeroName")
	Engine["CreateModel"](registerVal15, "currentHeroImage")
	Engine["CreateModel"](registerVal15, "currentHeroLoadout")
	Engine["CreateModel"](registerVal5, "unlockTokensCount")
	Engine["CreateModel"](registerVal5, "permanentUnlockTokensCount")
	registerVal16 = Engine["CreateModel"](registerVal5, "CryptoKeyProgress")
	Engine["CreateModel"](registerVal16, "keyCount")
	Engine["CreateModel"](registerVal16, "progress")
	Engine["CreateModel"](registerVal16, "codPoints")
	local registerVal18 = Engine["CreateModel"](registerVal16, "animProgress")
	Engine["SetModelValue"](registerVal18, 0.000000)
	registerVal17 = Engine["CreateModel"](registerVal5, "factions")
	Engine["CreateModel"](registerVal17, "isCoDCaster")
end
DataSources.PartyPrivacy.getModel()
registerVal3 = Engine["GetGlobalModel"]()
registerVal2 = Engine["CreateModel"](registerVal3, "ButtonStates.ReevaluateDisabledStates")
Engine["SetModelValue"](registerVal2, false)
registerVal3 = Engine["GetGlobalModel"]()
registerVal2 = Engine["CreateModel"](registerVal3, "lobbyRoot.hideMenusForGameStart")
Engine["SetModelValue"](registerVal2, 0.000000)
registerVal3 = Engine["GetGlobalModel"]()
registerVal2 = Engine["CreateModel"](registerVal3, "lobbyRoot.spinnerActive", true)
Engine["SetModelValue"](registerVal2, false)
registerVal2 = Engine["GetGlobalModel"]()
registerVal1 = Engine["GetModel"](registerVal2, "hideWorldForStreamer")
if not registerVal1 then
	registerVal3 = Engine["GetGlobalModel"]()
	registerVal2 = Engine["CreateModel"](registerVal3, "hideWorldForStreamer")
	Engine["SetModelValue"](registerVal2, 0.000000)
end
registerVal2 = Engine["GetGlobalModel"]()
Engine["CreateModel"](registerVal2, "lobbyRoot.Pregame.Update")
registerVal2 = Engine["GetGlobalModel"]()
Engine["CreateModel"](registerVal2, "lobbyRoot.Pregame.state")
registerVal2 = Engine["GetGlobalModel"]()
Engine["CreateModel"](registerVal2, "pubstorageFilesChanged", true)
registerVal2 = Engine["GetGlobalModel"]()
Engine["CreateModel"](registerVal2, "lobbyRoot.platformUpdate")
registerVal2 = Engine["GetGlobalModel"]()
Engine["CreateModel"](registerVal2, "lobbyRoot.beginPlay")
registerVal2 = Engine["GetGlobalModel"]()
Engine["CreateModel"](registerVal2, "MapVote.mapVoteMapPreviousGametype", true)
registerVal2 = Engine["GetGlobalModel"]()
Engine["CreateModel"](registerVal2, "MapVote.mapVoteGameModeNext", true)
registerVal3 = Engine["GetGlobalModel"]()
registerVal2 = Engine["CreateModel"](registerVal3, "lobbyRoot.lobbyLockedIn")
Engine["SetModelValue"](registerVal2, false)
